<h3>Obfuscation</h3>

<p>In response to the 

<a href="http://thebuildingcoder.typepad.com/blog/2008/10/converting-between-vb-and-c-and-net-decompilation.html">
last post</a>, 

<a href="http://roddotnet.blogspot.com">Rod Howarth</a>

brought up the related topic of 

<a href="http://en.wikipedia.org/wiki/Obfuscated">source code obfuscation</a>

for a .NET assembly. He says:</p>

<p>Reflector is certainly a useful tool, and it’s good to delve into both your own code and other namespaces. It can greatly assist with understanding code and also disaster recovery, in the case of lost source files.</p>

<p>A related topic is 

<a href="http://en.wikipedia.org/wiki/Obfuscated">obfuscation</a>,

as the first thing that one thinks about when you realize that your DLL file is easily convertible back to source code is the possible loss of intellectual property. 

<a href="http://forum.codecall.net/tutorials/6391-tutorial-visual-studio-2008-obfuscating-dotfuscator.html">
Codecall</a>

and the

<a href="http://msdotnetsupport.blogspot.com/2008/02/net-obfuscation-using-dotfuscator-for.html">
Microsoft .NET Support Team</a>

have quick tutorials about dotfuscator, which comes with Visual Studio. There are also a number of 3rd party tools. 

<a href="http://www.xenocode.com/Products/Postbuild">
Xenocode Postbuild</a>

and 

<a href="http://www.programmersheaven.com/download/55168/download.aspx">
CodeVeil</a>

are a couple of names I’ve heard used.</p>
