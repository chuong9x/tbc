<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="bc.css">
<script src="http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js"></script>
</head>

<!--

10151172 [REVIT的几何运算接口 - REVIT geometric computing interface]

http://thebuildingcoder.typepad.com/blog/2014/11/functional-programming-view-and-data-api-demos.html?cid=6a00e553e16897883301b7c70196b9970b#comment-6a00e553e16897883301b7c70196b9970b
http://thebuildingcoder.typepad.com/blog/2014/11/functional-programming-view-and-data-api-demos.html?cid=6a00e553e16897883301b8d08c17c0970c#comment-6a00e553e16897883301b8d08c17c0970c

-->

<h3>Migrating Deprecated API and 2D Boolean Operations</h3>

<p>While my colleagues are busy with the

<a href="http://thebuildingcoder.typepad.com/blog/2014/11/the-devdays-2014-conferences-have-started.html">
DevDays in Asia</a>,

Let me mention two little questions that I addressed in the past few hours:</p>

<ul>
<li><a href="#2">2D Boolean operations</a></li>
<li><a href="#3">Getting started migrating deprecated API</a></li>
</ul>


<a name="2"></a>

<h4>2D Boolean Operations</h4>

<p><strong>Question:</strong> In AutoCAD development, the ObjectARX AcGe library provides powerful tools such as the AcDbRegion::booleanOper computational geometry unions and differences.</p>

<p>Does the Revit API provide anything similar for surfaces?
Is there any way to calculate and display the difference between two areas?</p>

<p>Revit is a great three-dimensional software, the above function is a common operation, but I did not find the relevant API.</p>

<p>Please help, thank you!</p>


<p><strong>Answer:</strong> The Revit API does not provide any general-purpose geometric engine like the AutoCAD ARX AcGe library, because it is highly specialised and purely dedicated to BIM.</p>

<p>If you have a requirement for additional geometric functionality such as 2D Boolean operations, you will need to implement it yourself or make use of some additional external libraries. Numerous such libraries exist.</p>

<p>The Building Coder has implemented and presented several examples making use of 2D Boolean operations using external libraries.</p>

<p>They can be found through the topic list 5.2. on

<a href="http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.2">
2D Booleans and Adjacent Areas</a>,

which I just updated for you, adding a couple of new recent posts.</p>

<p>I hope this helps.</p>



<a name="3"></a>

<h4>Getting Started Migrating Deprecated API</h4>

<p>Raised by Fimo in a

<a href="http://thebuildingcoder.typepad.com/blog/2014/11/functional-programming-view-and-data-api-demos.html?cid=6a00e553e16897883301b7c70196b9970b#comment-6a00e553e16897883301b7c70196b9970b">comment</a> or

<a href="http://thebuildingcoder.typepad.com/blog/2014/11/functional-programming-view-and-data-api-demos.html?cid=6a00e553e16897883301b8d08c17c0970c#comment-6a00e553e16897883301b8d08c17c0970c">two</a> on

<a href="http://thebuildingcoder.typepad.com/blog/2014/11/functional-programming-view-and-data-api-demos.html">
functional programming, View and Data API demos</a>:</p>


<p><strong>Question:</strong> I am new to this blog and new to the Revit 2015 API, still not really knowing what I am doing and struggling through the examples here and in other places.</p>

<p>There are lots of useful examples and many of them are based on using "ElementSet". So I create an element set, like "ElementSet elems = selection.Elements;" That produces a message saying "don't use Selection.Elements, it's deprecated, use GetElementIds() instead." Of course I want to be a good guy, so I use "GetElementIds", only to find out that this does not work for "ElementSet".</p>

<p>Okay, so I abandon "ElementSet" and use "ICollectionElems" which is (grammatically) fine and produces no compiler errors. But now I have an ICollection and all the loads of code which I had found in the web so far do not work for me any more, as they were based on "ElementSet".</p>

<p>So here are my questions: is there a way to cast/convert "ICollection" to "ElementSet"? Am I the first one to come across this problem? What would be the professional approach to deal with this?</p>

<p>Many thanks for you advice...</p>

<p><strong>Answer:</strong> Thank you for a very valid question.</p>

<p>ElementSet is deprecated in Revit 2015, just as the message tells you.
I guess the main change is caused by the

<a href="http://thebuildingcoder.typepad.com/blog/2014/04/whats-new-in-the-revit-2015-api.html#2.10">
Selection API changes</a>.

<p>However, as long as it has not been removed, you can still use it and ignore the warning.</p>

<p>All new code should avoid making use of it, since it will probably no longer work (and be removed) in the next release.</p>

<p>In most cases, you can replace it by a collection of ElementId objects.
However, its members are element ids and not Element instances, so there will be some differences in usage.</p>

<p>That is the issue you are encountering. Basically, the old code needs to be rewritten to take the collection of ids instead of the set of elements.</p>

<p>The Revit API used to define quite a number of custom collections.</p>

<p>They are all being replaced by generic .NET collections, by and by.</p>

<p>Also, a number of methods are now using ElementId arguments instead of straight Element ones.</p>

<p>This is part of a multi-year transition.</p>

<p>I hope this explains.</p>

<p><strong>Response:</strong> Thanks for your detailed response.</p>

<p>Yes, it does explain...</p>

<p>But, alas, my personal conclusion is supposed to be the following: as there are mostly old style code snippets available and I do not know how to convert them into new style, I have to stick to the obsolete variants in order to get some results. That means I am now learning the old style. I hope Autodesk will wait a little longer before removing the old code... :-)</p>

<p>Anyway thanks a lot for your explanation.</p>

<p><strong>Answer:</strong> Please do not jump to the wrong conclusion.</p>

<p>My personal conclusion from that is to learn the new style and convert to old snippets to the new style.</p>

<p>The conversion is mostly trivial. Here is an example: the

<a href="https://github.com/jeremytammik/DataToBimCountoursAndBuildings/commit/88637e90dfa984ae424d655304e9e0a43f6b19c7">
DataToBimCountoursAndBuildings migration from Revit 2014 to 2015</a>.</p>

<p>Look specifically at the modification of the file DataToBim/DataToBuilding.cs:</p>

<pre>
    Family family = null;
    this.document.LoadFamily( path, out family );
    FamilySymbol symbol = null;
<span class="red">-   foreach( FamilySymbol s in family.Symbols )</span>
<span class="green">+   //foreach( FamilySymbol s in family.Symbols ) // 2014
+   foreach( ElementId id in family.GetFamilySymbolIds() ) // 2015</span>
    {
<span class="red">-     symbol = s;</span>
<span class="green">+     symbol = document.GetElement( id ) as FamilySymbol;</span>
      break;
    }
    symbols.Add( symbol );
</pre>

<p>I have migrated dozens of projects on The Building Coder and often documented the migration steps in great detail.</p>

<p>Simply look at The Building Coder category on

<a href="http://thebuildingcoder.typepad.com/blog/migration">
Migration</a>.</p>

<p>Actually, I went one step further, just for your sake, and fixed some of the numerous deprecated API usage warnings still present in The Building Coder samples until I hit the exact one you are encountering and struggling with.</p>

<p>I started out with these

<a href="zip/bc_migr_2015_b.txt">65 warnings</a>.</p>

<p>I then globally replaced <code>sel.Elements.Size</code> by <code>sel.GetElementIds().Count</code>, reducing the count to

<a href="zip/bc_migr_2015_c.txt">46 warnings</a>.</p>

<p>Now I fixed just one of the warnings about iterating over the selection elements, in the module CmdListMarks.cs, by replacing the <code>Selection.Elements</code> iteration by a call to GetElementIds and iterating over the element ids instead, afterwards producing

<a href="zip/bc_migr_2015_d.txt">45 remaining warnings</a>.</p>

<p>Here is the new code, marked with '// 2015', and the old code, commented out and marked with '// 2014':</p>

<pre class="code">
&nbsp; <span class="blue">if</span>( _modify_existing_marks )
&nbsp; {
&nbsp; &nbsp; <span class="green">//ElementSet els = uidoc.Selection.Elements; // 2014</span>
&nbsp;
&nbsp; &nbsp; <span class="teal">ICollection</span>&lt;<span class="teal">ElementId</span>&gt; ids = uidoc.Selection.GetElementIds(); <span class="green">// 2015</span>
&nbsp;
&nbsp; &nbsp; <span class="green">//foreach( Element e in els ) // 2014</span>
&nbsp;
&nbsp; &nbsp; <span class="blue">foreach</span>( <span class="teal">ElementId</span> id <span class="blue">in</span> ids ) <span class="green">// 2015</span>
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="teal">Element</span> e = doc.GetElement( id ); <span class="green">// 2015</span>
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( e <span class="blue">is</span> <span class="teal">FamilyInstance</span>
&nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; <span class="blue">null</span> != e.Category
&nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; (<span class="blue">int</span>) <span class="teal">BuiltInCategory</span>.OST_Doors
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; == e.Category.Id.IntegerValue )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; e.get_Parameter(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">BuiltInParameter</span>.ALL_MODEL_MARK )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .Set( _the_answer );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; ++n;
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; }
</pre>

<p>I very much hope that this suffices to convince you to fix the warnings you encounter.</p>

<p>As always, the most up to date version of The Building Coder samples is provided in

<a href="https://github.com/jeremytammik/the_building_coder_samples">its GitHub repository</a>,

and the version described above is

<a href="https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.115.1">
release 2015.0.115.1</a>.</p>

<p>I hope this helps.</p>
