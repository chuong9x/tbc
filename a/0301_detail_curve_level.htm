<head>
<link rel="stylesheet" type="text/css" href="bc.css">
</head>

<!-- 1256590 [Draw Detail arc on a level] -->

<h3>Detail Curve on Level</h3>

<p>In the past, we discussed 

<a href="http://thebuildingcoder.typepad.com/blog/2009/09/detail-lines.html">
detail curve creation</a> and

<a href="http://thebuildingcoder.typepad.com/blog/2010/01/model-and-detail-curve-colour.html">
modifying their colour</a>.

Several parties including 

<!-- http://thebuildingcoder.typepad.com/blog/2008/12/linked-files.html?cid=6a00e553e1689788330120a7f65ac4970b#comment-6a00e553e1689788330120a7f65ac4970b -->

<a href="http://thebuildingcoder.typepad.com/blog/2008/12/linked-files.html?cid=6a00e553e168978833012876fee5bf970c#comment-6a00e553e168978833012876fee5bf970c">
Shifali</a>

and

<a href="http://thebuildingcoder.typepad.com/blog/2008/08/the-revit-sdk-c.html?cid=6a00e553e1689788330120a555869e970c#comment-6a00e553e1689788330120a555869e970c">
Dharanidharan</a> inquired 

about creating detail curves on a specified level.
Here is a solution to that issue by Joe Ye.

<p><strong>Question:</strong> I am using the following code to draw some circles using arcs: 

<pre class="code">
&nbsp; <span class="teal">XYZ</span> p = <span class="teal">XYZ</span>.Zero;
&nbsp; <span class="teal">XYZ</span> norm = <span class="teal">XYZ</span>.BasisZ;
&nbsp; <span class="blue">double</span> startAngle = 0;
&nbsp; <span class="blue">double</span> endAngle = 2 * <span class="teal">Math</span>.PI;
&nbsp; <span class="blue">double</span> radius = 1.23;
&nbsp;
&nbsp; <span class="teal">Plane</span> plane = <span class="blue">new</span> <span class="teal">Plane</span>( norm, p );
&nbsp;
&nbsp; <span class="teal">Arc</span> arc = app.Create.NewArc(
&nbsp; &nbsp; plane, radius, startAngle, endAngle );
&nbsp;
&nbsp; <span class="teal">DetailArc</span> detailArc
&nbsp; &nbsp; = doc.Create.NewDetailCurve(
&nbsp; &nbsp; &nbsp; doc.ActiveView, arc ) <span class="blue">as</span> <span class="teal">DetailArc</span>;
</pre>

<p>This code draws an arc in the active level of the active view. 
I would like to specify the level as a parameter and draw the arc on that level independently of the current active level. 
In the code above, I am setting the Z coordinate to the height of the level, hoping the curves will be drawn on the desired level. 
Instead, they are drawn on the active level of the active view of the document. 
Is there any way to draw the arcs on a specified level independent of the current active level? 

<p><strong>Answer:</strong> You just need to set the first argument of the NewDetailCurve method to the specific level ViewPlan. 
For example, to draw an arc on Level 2, first find the ViewPlan instance associated with that level. 
To find the target view plan, you can iterate over all ViewPlan instances and check their GenLevel property.
If it matches the desired target level, this is the one we need.   
Here is some sample code illustrating this:

<pre class="code">
<span class="blue">using</span> System;
<span class="blue">using</span> Autodesk.Revit;
<span class="blue">using</span> Autodesk.Revit.Elements;
<span class="blue">using</span> Autodesk.Revit.Geometry;
&nbsp;
<span class="blue">public</span> <span class="blue">class</span> <span class="teal">RevitCommand</span> : <span class="teal">IExternalCommand</span>
{
&nbsp; <span class="blue">public</span> <span class="teal">IExternalCommand</span>.<span class="teal">Result</span> Execute(
&nbsp; &nbsp; <span class="teal">ExternalCommandData</span> commandData,
&nbsp; &nbsp; <span class="blue">ref</span> <span class="blue">string</span> messages,
&nbsp; &nbsp; <span class="teal">ElementSet</span> elements )
&nbsp; {
&nbsp; &nbsp; <span class="teal">Application</span> app = commandData.Application;
&nbsp; &nbsp; <span class="teal">Document</span> doc = app.ActiveDocument;
&nbsp;
&nbsp; &nbsp; <span class="green">// Create an arc on the plane whose </span>
&nbsp; &nbsp; <span class="green">// center is at the plane origin:</span>
&nbsp;
&nbsp; &nbsp; <span class="teal">XYZ</span> end0 = <span class="blue">new</span> <span class="teal">XYZ</span>( 0, 0, 1 );
&nbsp; &nbsp; <span class="teal">XYZ</span> end1 = <span class="blue">new</span> <span class="teal">XYZ</span>( 1, 3, 2 );
&nbsp; &nbsp; <span class="teal">XYZ</span> norm;
&nbsp;
&nbsp; &nbsp; <span class="blue">if</span>( end0.X == end1.X )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; norm = <span class="teal">XYZ</span>.BasisZ;
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="blue">else</span> <span class="blue">if</span> ( end0.Y == end1.Y )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; norm = <span class="teal">XYZ</span>.BasisZ;
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="blue">else</span>
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; norm = <span class="teal">XYZ</span>.BasisZ;
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">double</span> startAngle = 0;
&nbsp; &nbsp; <span class="blue">double</span> endAngle = 2 * <span class="teal">Math</span>.PI;
&nbsp; &nbsp; <span class="blue">double</span> radius = 5;
&nbsp;
&nbsp; &nbsp; <span class="teal">Plane</span> objPlane 
&nbsp; &nbsp; &nbsp; = app.Create.NewPlane( norm, <span class="teal">XYZ</span>.Zero );
&nbsp;
&nbsp; &nbsp; <span class="green">// ViewPlan of &quot;Level 2&quot;</span>
&nbsp;
&nbsp; &nbsp; <span class="teal">ViewPlan</span> vp2 = <span class="blue">null</span>;
&nbsp;
&nbsp; &nbsp; <span class="teal">ElementIterator</span> ei 
&nbsp; &nbsp; &nbsp; = doc.get_Elements( <span class="blue">typeof</span>( <span class="teal">ViewPlan</span> ) );
&nbsp;
&nbsp; &nbsp; <span class="blue">while</span>( ei.MoveNext() )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="teal">ViewPlan</span> vp = ei.Current <span class="blue">as</span> <span class="teal">ViewPlan</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( vp.GenLevel.Name.Equals( <span class="maroon">&quot;Level 2&quot;</span> ) )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; vp2 = vp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">break</span>;
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">if</span>( <span class="blue">null</span> == vp2 )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; vp2 = doc.ActiveView <span class="blue">as</span> <span class="teal">ViewPlan</span>;
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">if</span>( <span class="blue">null</span> != vp2 )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="green">// draw the circle:</span>
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="teal">Arc</span> arc = app.Create.NewArc( objPlane,
&nbsp; &nbsp; &nbsp; &nbsp; radius, startAngle, endAngle );
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="teal">DetailArc</span> detailArc
&nbsp; &nbsp; &nbsp; &nbsp; = doc.Create.NewDetailCurve(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vp2, arc ) <span class="blue">as</span> <span class="teal">DetailArc</span>;
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="blue">return</span> (<span class="blue">null</span> == vp2)
&nbsp; &nbsp; &nbsp; ? <span class="teal">IExternalCommand</span>.<span class="teal">Result</span>.Failed
&nbsp; &nbsp; &nbsp; : <span class="teal">IExternalCommand</span>.<span class="teal">Result</span>.Succeeded;
&nbsp; }
}
</pre>

<p>Another point I would like to mention:
I noticed in your code that you create the Plane instance using one of its constructor member methods.
This works fine as long as you are not working in VSTA. 
You can also use the dedicated Autodesk.Revit.Creation.Application method NewPlane to create the plane object. 
UV and XYZ instances can also be created both ways, either using their constructor member methods or dedicated creation application methods.
If you are working in VSTA, you have to use the application creation methods, because the constructors will not work.

<p>For completeness sake, here is the complete 

<a href="zip/detail_curve_level.zip">
detail_curve_level</a> source code and Visual Studio solution.
Many thanks to Joe for providing it!
