<head>
<link rel="stylesheet" type="text/css" href="bc.css">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>

<h3>ADN Training Material for Revit Structure 2014</h3>

<p>Here comes the final step of migrating the ADN training material and The Building Coder samples to Revit 2014.

<p>The previous steps included:</p>

<ul>
<li><a href="http://thebuildingcoder.typepad.com/blog/2013/06/migrating-the-adn-training-labs-to-revit-2014.html">
ADN Revit API training labs</a></li>

<li><a href="http://thebuildingcoder.typepad.com/blog/2013/06/the-adn-sample-adnrme-for-revit-mep-2014.html">
ADN Revit MEP sample AdnRme</a></li>

<li>The Building Coder samples

<a href="http://thebuildingcoder.typepad.com/blog/2013/04/migrating-the-building-coder-samples-to-revit-2014.html">
migration</a> and

deprecated API usage

<a href="http://thebuildingcoder.typepad.com/blog/2013/06/removing-deprecated-api-compilation-warnings.html">
cleanup</a>
</li>
</ul>

<p>Now we turn to the final component, the ADN training material for Revit Structure, consisting of:</p>

<ul>
<li><a href="#2">Revit Structure training labs</a></li>
<li><a href="#3">Revit Structure link sample</a></li>
<li><a href="#4">NewRstLab</a></li>
<li><a href="#5">RstAvfDmu</a></li>
</ul>

<a name="2"></a>

<h4>The ADN Revit Structure Training Labs</h4>

<p>The ADN Revit Structure training labs include both a C# and a VB version.

<p>They compile with zero errors right out of the box after updating the Revit API assembly references.</p>

<p>They generate ten warnings each, though, all caused by use of the obsolete Curve.EndPoint property.

<p>In VB, it is represented as an indexed property, whereas the C# version converts it to the Curve.get_EndPoint method instead.
This discrepancy is eliminated by the Revit 2014 API method Curve.GetEndPoint, which looks the same in both languages.
The advantage of this change is that the C# and VB code becomes virtually identical, whereas previously in C# the properties were converted to methods adorned with a "get_" prefix.</p>


<a name="3"></a>

<h4>The ADN Revit Structure Link Sample</h4>

<p>The link sample did not present any unexpected difficulties either.</p>

<p>Again, I cleaned up some calls to the obsolete Curve.EndPoint and Document.Element properties, which have both been replaced by GetEndPoint and GetElement methods.

<p>Please note that the associated AutoCAD .NET add-in requires an additional AutoCAD .NET API reference, accoremgd.dll.
The ARX C++ component has not yet been compiled, and we are thinking of replacing it with something else that does not require a full ARX installation to compile.</p>


<a name="4"></a>

<h4>NewRstLab</h4>

<p>Unlike the previous RST samples, the NewRstLab code produced a compilation error.</p>

<p>After updating the Revit API assembly references, it generates

<a href="zip/NewRstLab_2014_a.txt">
25 warnings and one error</a> reporting

that the AnalyticalModel class does not contain a definition for the CanSetAnalyticalOffset method used in the RstLab3_3_EditAnalyticalModel command:</p>

<pre class="code">
&nbsp; <span class="green">// Some structural component's analytical model</span>
&nbsp; <span class="green">// can be offset, for instance column.</span>
&nbsp; <span class="green">// However some cannot be offset, for instance </span>
&nbsp; <span class="green">// beam. So we need to check first if the </span>
&nbsp; <span class="green">// analytical model can be offset.</span>
&nbsp;
&nbsp; <span class="blue">if</span>( model.CanSetAnalyticalOffset() )
&nbsp; {
&nbsp; &nbsp; <span class="green">// Move the analytical model </span>
&nbsp; &nbsp; <span class="green">// one foot along X axis.</span>
&nbsp;
&nbsp; &nbsp; model.SetOffset(
&nbsp; &nbsp; &nbsp; <span class="teal">AnalyticalElementSelector</span>.Whole,
&nbsp; &nbsp; &nbsp; <span class="blue">new</span> <span class="teal">XYZ</span>( 1, 0, 0 ) );
&nbsp; }
</pre>

<p>This method has no direct equivalent in the enhanced offset handling, so I simply replaced it by a try-catch handler for now.</p>

<p>Most of the warnings were generated by calls to get_EndPoint, which again can be trivially replaced by GetEndPoint.</p>

<p>Only

<a href="zip/NewRstLab_2014_b.txt">
5 compilation warnings</a> remain, caused by the following two obsolete method calls:</p>

<ul>
<li>Line.get_Bound is obsolete: use Line.CreateBound instead.</li>
<li>RebarShapeDefinitionBySegments.AddBendDefaultRadius(int, int, Autodesk.Revit.DB.Structure.RebarShapeBendAngle) is obsolete: use the addBendDefaultRadius with parameter turn type RebarShapeVertexTurn::Enum instead.</li>
</ul>

<p>Since I could not figure out off-hand how to fix the latter, I left it in for the moment.</p>


<a name="5"></a>

<h4>RstAvfDmu</h4>

<p>Last but not least, we come to the RST AVF and

<a href="http://thebuildingcoder.typepad.com/blog/2010/08/structural-dynamic-model-update-sample.html">
DMU</a> samples,

which happily also only generate warnings about usage of the obsolete Curve.EndPoint property, quickly and easily fixed.</p>


<a name="6"></a>

<h4>Conclusion and Download</h4>

<p>Here is

<a href="zip/adn_rst_2014_0.zip">
adn_rst_2014_0.zip</a> containing

version 2014.0.0.0 of the ADN training material for Revit Structure 2014.</p>

<p>There are still a few details to be resolved, and we need to decide internally how to update the pretty trivial column type editing inside of AutoCAD for the RST link demo.</p>

<p>As said, I plan to host all the ADN sample material on GitHub soon, to make is easier to maintain and collaborate on, and also follow Matt's

<a href="http://thebuildingcoder.typepad.com/blog/2013/06/the-adn-sample-adnrme-for-revit-mep-2014.html#comment-6a00e553e1689788330191034be6cc970c">
excellent advice</a> to

do the same with RevitLookup.</p>
