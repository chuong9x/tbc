<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="bc.css">
<script src="http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js"></script>
</head>

<!--

-->

<h3>Autodesk View and Data API Notes and Samples</h3>

<p>Here is a summary of my notes from three presentations on the Autodesk View and Data API given by Cyrille Fauvel and Philippe Leefsma, in the two introductory workshops at

<a href="http://thebuildingcoder.typepad.com/blog/2014/10/hackzrh-fluelisee-memento-jobs-and-books.html">
HackZurich</a> on Friday evening, October 10 and at

<a href="http://www.transformabxl.be/agenda/event/hackathon-open-data-brussels">
HackaBxl</a> in

Brussels on October 17.</p>

<p>Philippe also presented a very nice and absolutely minimal

<a href="#3">basic viewer sample in node.js</a> demonstrating

how to implement a private web service to obtain the authorisation token without exposing your key and secret in your JavaScript source.</p>

<p>I will be making use of this material again in the coming days, for my Autodesk View and Data API class on Thursday at

<a href="https://cluster.ems-secure.de/registrations/autodesk/au.2014/ems.registration.php">AU Germany</a> in

Darmstadt and at the Berlin Hackathon next weekend.</p>


<a name="2"></a>

<h4>Autodesk View and Data API Presentation Notes</h4>

<p>I already presented a bunch of stuff on the

<a href="http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.46">
Autodesk View and Data API</a>.</p>

<p>Here is an executive summary of the most important information to get started with it.
We used this for the recent hackathons in

<a href="http://thebuildingcoder.typepad.com/blog/2014/10/hackzrh-fluelisee-memento-jobs-and-books.html#2">
Zurich</a>,

<a href="http://thebuildingcoder.typepad.com/blog/2014/10/brussels-hackathon-and-determining-pipe-wall-thickness.html#2">
Brussels</a>,

and the upcoming one in

<a href="http://www.meetup.com/TechMeetups-Berlin/events/161213342">Berlin</a>.</p>

<p>The presentation is quick and efficient; the slides are discussed in just a couple of minutes, before diving into live source code demonstrations.</p>

<p>Please read the following notes in the context of the

<a href="http://thebuildingcoder.typepad.com/adva/2014-10/jeremy_tammik_adva.pdf">
accompanying slide deck</a>.

By the way, this is the version I will be using for my presentation

<i>Autodesk View and Data API &ndash; Interaktives 3D Modell in beliebige Webseiten einbetten</i>

at

<a href="https://cluster.ems-secure.de/registrations/autodesk/au.2014/ems.registration.php">Autodesk University Germany</a> in

Darmstadt on Thursday October 23.</p>

<ul>
<li><a href="#2.1">Introduction</a></li>
<li><a href="#2.2">Samples</a></li>
<li><a href="#2.3">Main highlights</a></li>
<li><a href="#2.4">More Features</a></li>
<li><a href="#2.5">Resources</a></li>
<li><a href="#2.6">Two separate APIs</a></li>
<li><a href="#2.7">Server API &ndash; REST</a></li>
<li><a href="#2.8">Client API &ndash; JavaScript</a></li>
<li><a href="#2.9">Questions and Answers</a></li>
</ul>

<h4><a name="2.1"></a>Introduction</h4>
<ul>
<li>We are from Autodesk.</li>
<li>Traditionally, we have implemented model authoring tools.</li>
<li>Now we are looking at optimal way to share models with others and use the rich data they contain.</li>
<li>Complexity is growing, we have a huge number of components addressing all imaginable requirements, many of them open source &ndash; how to put all the puzzle pieces together optimally?</li>
<li>We can use WebGL and Three.js to present any graphical data, either 2D or 3D.</li>
<li>What is WebGL? &ndash; Three.js simplifies it.</li>
</ul>

<h4><a name="2.2"></a>Samples</h4>
<ul>
<li>Look at the mechanical tractor sample, an Inventor model.</li>
<li>Rotate, pan, zoom, easy intuitive manipulation with zero footprint.</li>
<li>This is a pretty big CAD model consisting of numerous files, &nbsp; &gt; 1 GB.</li>
<li>It is shrunk and streamlined to be viewed interactively in the browser.</li>
<li>All the CAD model structure and properties are preserved.</li>
<li>We understand the internal model structure, metadata, properties, how the model was built.</li>
<li>The pane on the left side shows the engineering structure, e.g. parts, assemblies and subassemblies.</li>
<li>A hierarchical tree, objects selectable either on screen or in the tree view.</li>
<li>The selected element is highlighted and its properties are displayed.</li>
<li>The smart explode engine understands and dissects subassemblies step by step, e.g. the cabin initially remains intact.</li>
<li>All interaction performed here in the browser is coded in JavaScript.</li>
<li>An architectural model, the Autodesk Waltham office.</li>
<li>We understand and can use the internal model structure to select only a specific level or only HVAC MEP data, i.e. ducts and pipes.</li>
<li>We can pick an individual element, e.g. a window, isolate it, examine its properties.</li>
<li>The Morgan steampunk sample shows how other JavaScript UI libraries can be integrated.</li>
<li>The Morgan model was created by the Morgan car company. We worked with them for the Geneva car expo and they let us have it.</li>
<li>It also shows how to drive the navigation programmatically, e.g., highlight just the engine or other significant aspects.</li>
<li>All JavaScript libraries can be used.</li>
<li>Infraworks model representing infrastructure from GIS data.</li>
<li>Car seat model demonstrating real time price update from a linked external SAP database.</li>
<li>Multiple user interaction to share remote control over view and camera in real time.
Simulate two users in two separate parallel Firefox windows.
Based on a node.js implementation using socket io.</li>
</ul>

<h4><a name="2.3"></a>Main Highlights</h4>
<ul>
<li>Zero install.</li>
<li>Not only geometry, many other data, metadata.</li>
<li>Public API, open source, based on three.js.</li>
</ul>

<h4><a name="2.4"></a>More Features</h4>
<ul>
<li>Translate heavy CAD model to lightweight JSON streamable web objects.</li>
<li>Streamed to the browser, you see initial geometry immediately, them metadata, then textures.</li>
<li>The tractor model was 1 GB and consisted of many files, not useful for web.</li>
<li>Take all of this, upload to a server, translate to JSON and stream it in little objects.</li>
<li>Many file formats are supported.</li>
<li>Long-term objective: support any 3D file format.</li>
<li>You can still access and manipulate geometry in the viewer.</li>
<li>You cannot modify original model, just the view.</li>
<li>Rendering on client side using WebGL.</li>
<li>Everything is happening through Chrome and JavaScript.</li>
<li>Everything done interactively can also be driven programmatically.</li>
</ul>

<h4><a name="2.5"></a>Resources</h4>
<ul>
<li><a href="https://developer.autodesk.com">Getting started and documentation</a>.</li>
<li>Programming examples on <a href="https://github.com/developer-autodesk">GitHub</a> in all kinds of different programming languages.</li>
<li>An <a href="https://developer.autodesk.com/api-console">API console</a> for testing.</li>
<li>The <a href="http://adndevblog.typepad.com/cloud_and_mobile">cloud and mobile DevBlog</a> for questions and more info.</li>
</ul>

<h4><a name="2.6"></a>Two Separate APIs</h4>
<ol>
<li>Server side, to upload and translate.</li>
<li>Web client, a normal HTML5 web page using CSS and JavaScript.</li>
</ol>


<h4><a name="2.7"></a>Server API &ndash; REST</h4>
<ul>
<li>The server API requires a few initial one-time steps to upload and translate the model:</li>
<ul>
<li>Authorisation</li>
<li>Upload</li>
<li>Translation</li>
</ul>
<li>You get a secret key pair to protect your data.</li>
<li>The translation gives you the file id or URN.</li>
<li>From then on all is on the client side.</li>
<li>This is well illustrated by the documentation and the <a href="https://github.com/Developer-Autodesk/workflow-curl-view.and.data.api">curl shell scripts</a> available from GitHub.</li>
</ul>

<h4><a name="2.8"></a>Client API &ndash; JavaScript</h4>
<ul>
<li>The client side JavaScript API is most likely to be customised, e.g. in hackathon projects.</li>
<li>It can be used to query model data, examine the model hierarchy, properties, handle model, camera, events, access underlying geometry and textures insert other transient objects, and much more.</li>
<li>For instance, we can grab the internal id of a model element and use that to attach, display and modify other information coming for separate databases, like in the car seat model displaying prices defined in SAP.</li>

<li>You can just embed viewer in your web page.</li>
<li>That is all you need, just an iframe.</li>
<li>Example on Kean's blog, also Facebook, etc.</li>
<li>If you have your own website: create HTML5 page, add CSS and JavaScript, create div, initialise, must be div, not canvas.</li>
<li>The viewer creates the canvas itself internally.</li>
<li>Show the initialisation function, replace the XXX by your credentials.</li>
<li>This function can be defined in a plugin, of course.</li>
<li>Client side API enables all extensions, e.g. to take control of geometry, change properties, get unique id from elements to add more data from external db, etc.</li>
</ul>

<h4><a name="2.9"></a>Questions and Answers</h4>
<ul>
<li>Cost, pricing, business model?
<br/>&ndash; The viewer is and will remain free forever; the pricing for translation and storage is undefined.
There may one day be a charge for translation, storage or both.
If so, however, it will be in the range of cents.</li>
<li>Access?
<br/>&ndash; Viewer is totally open source and JavaScript.
You have access to all the code.
Only the translation part is Autodesk private.
You upload the model to an Autodesk server to convert it to streamable JSON.</li>
<li>Can I add my own data, metadata?
<br/>&ndash; Yes, absolutely.
It is not saved, this is a viewer only.
You can add both geometry and properties.</li>
<li>What is driving the backend server?
<br/>&ndash; Background is AWS, C++.</li>
<li>Is the JSON format published?
<br/>&ndash; JSON format is not yet published because still in flux.
Once it is finished, sometime next year, we might publish the JSON object format.
It does not really matter.</li>
<li>Offline access?
<br/>&ndash; If you put all JSON on the local hard drive, you can load and view the models, but you lose the streaming aspects.
If you load a file without streaming it, you have to wait until it completes.</li>
<li>Notification and interaction?
<br/>&ndash; You can get callbacks on selection, explode, camera change, property change, everything.
All behaviour can be completely customised.</li>
<li>Is the JSON format published?
<br/>&ndash; JSON format is not published. It is still in flux.
Maybe once it is finished, sometime next year.
It does not really matter.</li>
</ul>
</ul>


<a name="3"></a>

<h4>Philippe's Basic Viewer Sample</H4>

<p>Philippe Leefsma presented a sweet client-server sample to demonstrate an easy solution to manage the credentials in a JavaScript viewer application.</p>

<p>The problem is that you do not wish to expose your secret consumer key and consumer secret.</p>

<p>On the other hand, the viewer client needs to use them to access your stored models.</p>

<p>The solution for this is to define a minimal server that provides the required credentials.</p>

<p>The server is called by the client via REST and returns a token without exposing the credentials.</p>

<p>The server can only be called by the client due to the

<a href="http://en.wikipedia.org/wiki/Same-origin_policy">same-origin security policy</a>.</p>

<p>The whole application just consists of four files implementing a node.js application:</p>

<ul>
<li>package.json</li>
<li>server.js</li>
<li>routes/api.js</li>
<li>views/index.html</li>
</ul>

<p>Some points of interest:</p>

<ul>
<li>Node.js server app.</li>
<li>Minimum server.js.</li>
<li>Generate auth token on server side.</li>
<li>Serve a static web page.</li>
<li>Using express and request modules for node.js.</li>
<li>Code for a super simple REST API called /api.</li>
<li>Credentials from registering web page.</li>
<li>Show token &ndash; <code>http://localhost:3001/api/token</code>.</li>
<li>Show model &ndash; <code>http://localhost:3001</code>.</li>
</ul>

<p>The contents of the node.js application package are defined by package.json:</p>

<pre class="prettyprint">
  {
    "name": "AdnViewerBasic",
    "version": "0.0.0",
    "private": true,
    "scripts": {
      "start": "node ./bin/www"
    },
    "dependencies": {
      "express": "~4.8.6",
      "body-parser": "~1.6.6",
      "cookie-parser": "~1.3.2",
      "morgan": "~1.2.3",
      "serve-favicon": "~2.0.1",
      "debug": "~1.0.4",
      "jade": "~1.5.0",
      "request": "*"
    }
  }
</pre>

<p>The server provides one single REST entry point, /api/token, to return an authoristion token, and implementes one view, views/index.html, setting up and displaying the viewer canvas:</p>

<pre class="prettyprint">
  var api = require('./routes/api');
  var express = require('express');

  var app = express();

  app.use(express.static(__dirname + '/views'));
  app.use('/api', api);

  app.set('port', process.env.PORT || 3000);

  var server = app.listen(app.get('port'), function() {
    console.log('Server listening on port ' + server.address().port);
  });
</pre>

<p>The REST API call is implemented like this by routes/api.js:</p>

<pre class="prettyprint">
  var express = require('express');
  var request = require('request');

  var router = express.Router();

  router.get('/token', function (req, res) {

    var params = {
      client_id: '********',
      client_secret: '********',
      grant_type: 'client_credentials'
    }

    request.post(
      'https://developer.api.autodesk.com' +
        '/authentication/v1/authenticate',

      { form: params },

      function (error, response, body) {
        if (!error && response.statusCode == 200) {
          var authResponse = JSON.parse(body);
          res.send(authResponse.access_token);
        }
      });
  });

  module.exports = router;
</pre>

<p>Cyrille Fauvel used a similar technique to implement the

<a href="https://github.com/PoiPointer/node.js">
PoiPointer node.js REST server</a>.</p>

<p>The client view is defined by index.html, a minimal sample of setting up and displaying the viewer:</p>

<pre class="prettyprint">
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;ADN Viewer Basic&lt;/title&gt;
    &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt;
    &lt;link type="text/css" rel="stylesheet" href="https://viewing.api.autodesk.com/viewingservice/v1/viewers/style.css"/&gt;
    &lt;script src="https://developer.api.autodesk.com/viewingservice/v1/viewers/viewer3D.min.js"&gt;&lt;/script&gt;
    &lt;script src="https://rawgit.com/Developer-Autodesk/library-javascript-view.and.data.api/master/js/Autodesk.ADN.Toolkit.Viewer.js"&gt;&lt;/script&gt;
    &lt;script&gt;
      $(document).ready(function () {

        var adnViewerMng = new Autodesk.ADN.Toolkit.Viewer.AdnViewerManager(
          'http://' + window.location.host + '/api/token',
          document.getElementById('ViewerDiv'));

        adnViewerMng.loadDocument(
          "*X*u*m*k*2*u*2*q*W*0*z*v*y*v*m*l*3*6*W*u*T*w*j*3*j*w*T*t*T*u*D*u*z*v*2*h*C*k*2*=");
      });
    &lt;/script&gt;
  &lt;/head&gt;

  &lt;body style="margin:0"&gt;
    &lt;div id="ViewerDiv"&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>You can start it up on the command line and then check the results in the browser via your localhost at the specified port:</p>

<pre>
  $ node server.js
  Server listening on port 3000
</pre>


<hr/>

<h1>Cloud and Mobile</h1>

<h3>Autodesk View and Data API Notes and Samples</h3>

<p>By

<a href="http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html">
Jeremy</a>

<a href="http://thebuildingcoder.typepad.com/blog/about-the-author.html">
Tammik</a>.</p>

<p>I just published a summary of my notes from three

<a href="http://thebuildingcoder.typepad.com/blog/2014/10/autodesk-view-and-data-api-notes-and-samples.html">
presentations on the Autodesk View and Data API</a> given

by Cyrille Fauvel and Philippe Leefsma, in the two introductory workshops at

<a href="http://thebuildingcoder.typepad.com/blog/2014/10/hackzrh-fluelisee-memento-jobs-and-books.html">
HackZurich</a> on Friday evening, October 10 and at

<a href="http://www.transformabxl.be/agenda/event/hackathon-open-data-brussels">
HackaBxl</a> in

Brussels on October 17.</p>

<p>Philippe also presented a very nice and absolutely minimal

<a href="http://thebuildingcoder.typepad.com/blog/2014/10/autodesk-view-and-data-api-notes-and-samples.html#3">
basic viewer sample in node.js</a> demonstrating

how to implement a private web service to obtain the authorisation token without exposing your key and secret in your JavaScript source.</p>

