<head>
<link rel="stylesheet" type="text/css" href="bc.css">
</head>

<h3>Mobile Device Room Location</h3>

<p>I had a so-called education day last Friday, and one of our current goals for these days is to learn about mobile and cloud computing.
Here is my account of activities and research that day.
Please excuse me for exposing my fallibility in this rambling account of a spontaneous unstructured single-person work-in-progress project.

<p>The task I set myself was to query the location of a mobile device and determine the room it is located in in the Revit model.

<p>That led to a number of interesting issues and explorations, some of which I was able to complete right away, and others to leave for another day:

<ol>
<li><a href="#1">Scenario</a>.
<li><a href="#2">Architectural considerations</a>.
<li><a href="#3">Mobile indoor positioning</a>.
<li><a href="#4">Coordinate system and multi-user considerations</a>.
<li><a href="#5">Android location and altitude</a>.
<li><a href="#6">Scalable Vector Graphics SVG</a>.
<li><a href="#7">Azure web service</a>.
<li><a href="#8">Installing the Windows Azure SDK</a>.
<li><a href="#9">Installing ASP.NET MVC 4</a>.
<li><a href="#10">Implementing an ASP.NET web service</a>.
<li><a href="#11">Enabling a non-numerical id in the URL</a>.
<li><a href="#12">Thoughts on the web service grammar</a>.
<li><a href="#13">Adding a levels controller</a>.
<li><a href="#14">Summary and next steps</a>.
</ol>

<p>I did think of breaking this up into several posts, and cleaning up some of the results a bit more before publishing, then decided to leave it as is.

<p>Please be aware that this is work in progress, or even less, notes on research and general head-scratching in progress.
It would be useful to discuss my ideas and results with peers before writing about them, but I am here all by my little lonesome and will simply share them with you instead.
These notes will be useful for me personally for future reference and may or may not be of interest to others.

<p>Especially the ASP.NET results are still pretty wobbly  :-)



<a name="1"></a>

<h4>1. Scenario</h4>

<p>Imagine the following scenario:

<p>I am running around inside a building with a mobile device, taking notes of things.
As I take notes, I wish the device to automatically determine which room or space it is located in.
Does that make sense?

<p>I thought of various approaches to implement this kind of room determination.

<p>I am assuming we have a Revit model specifying the rooms and their geometry.
The room geometry could be handled as 3D volumes, or we could work with 2D boundary polygons in conjunction with the level information.

<p>We are dealing with at least two and possibly three active agents: the Revit session on a PC somewhere, the mobile device, and potentially a web service on the cloud, accessible to both.

<p>I am looking at the interaction between two or three agents here: the Revit session with the BIM, presumably running some custom add-ins, the mobile device and its location sensor, and optionally a web service on the cloud.
I'll call them 'Revit', 'mobile device' and 'web service' henceforth.

<p>I have several choices to make, such as which of the three agents to set up to perform the actual calculation?
There are various pros and cons here:

<ul>
<li>Calculate in Revit? That would be really easy, once we have the GPS data converted to the local model coordinates, because we can simply call the GetRoomAtPoint method. The hard part is to have Revit running as a ubiquitously accessible web service. There is a license issue, and even if we implemented it, we would still have to put the calculation into something that can be driven from outside, like an Idling event handler.
<li>Calculate on the mobile device? That would require many copies of the data on each device.
<li>Calculate in a web service? 
</ul>

<p>Actually, the latter looks like the cleanest choice.


<a name="2"></a>

<h4>2. Architectural Considerations</h4>

<p>Let's revisit the issue from a slightly different perspective.

<p>Here are another couple of sketches of scenarios for locating the room in a building from the mobile device location:

<ol>
<li>Obtain the 3D location from the mobile device and pass it to a web service which communicates real-time with a running Revit session. In the Revit session, open the appropriate document, if needed, translate the mobile device location information to a model space XYZ point, and call the Document.GetRoomAtPoint method to determine the room.

<li>Ask the mobile device user to specify what building level she is working on. Use that to enhance the 3D location from the mobile device and pass it to a web service which communicates real-time with a running Revit session. In the Revit session, open the appropriate document, if needed, translate the mobile device location information to a model space XYZ point, and call the Document.GetRoomAtPoint method to determine the room.

<li>Export the Revit model room 3D volumes to the cloud. On the mobile device, use the location, optionally enhanced with user-defined level data, and find the volume containing that point.

<li>Export the Revit model room 2D polygons to the cloud in separate levels. On the mobile device, use the location to determine the 2D location, and ask the user to specify the level, then find the polygon on the appropriate level containing the given 2D point.
</ol>

<p>My current tendency is to simply export the room boundary polygons per level.

<p>Other considerations include:

<ul>
<li>Use 3D volume or 2D polygon plus level information?
<li>Prompt user to manually enter current level? Yes, I think so.
<li>Data format? Simple list of closed polygon points passed to the web service?
<li>Data visualisation? Yes, we could easily implement a nice visualiser, e.g. using <a href="#6">SVG</a>.
The web service could hold a database of polygon point data and render it to SVG on request.
</ul>

<p>At the moment, I am thinking of a room collector web service offering the following functionality:

<ul>
<li>Add room: caller supplies room name, level, room boundary point data. Check for uniqueness, calculate bounding box and add to database, e.g. to dictionary within level dictionary.
<li>Retrieve room: caller supplies level and mobile device location point data. Retrieve the containing room via level, bounding box analysis to speed up the search, and finally a point in polygon algorithm.
<li>List levels: return all level names, so that they can be listed and selected on the mobile device.
</ul>

<p>Obviously this does not cover all the required functionality, so much more is still to be defined.

<p>Anyway, it seems pretty straightforward to me to implement a mobile device room determination service using the following architecture and workflow:

<ul>
<li>Implement a Revit add-in to export all the room polygons to the web service, separated by level.
<li>Store the room polygon database on the cloud, e.g. using Windows Azure.
<li>Optionally automate the storage, so that every document save updates the cloud database, as described by 

<a href="http://adndevblog.typepad.com/aec/2012/05/experiential-learning-with-net-web-application-with-sql-azure-tutorial.html">
Saikat</a>.

<li>Implement a web service query taking an input 3D point, optionally with a level attached, and determines the room polygon containing that point.
<li>On the mobile device, determine the 3D location, possibly asking the user to manually define which level she is working on.
<li>Query the web service for the room containing the current location point.
<li>Implement room polygon visualisation: query the web service for a room or all rooms on an entire level to be rendered to SVG.
</ul>



<a name="3"></a>

<h4>3. Mobile Indoor Positioning</h4>

<p>The 

<a href="http://press.nokia.com/2012/08/23/accurate-mobile-indoor-positioning-industry-alliance-called-in-location-to-promote-deployment-of-location-based-indoor-services-and-solutions">
In-Location</a> Accurate 

Mobile Indoor Positioning Industry Alliance was announced last month.

<p>I guess I will go for this topic, even though it is hard to make real practical use of it immediately.

<p>One basic question, before we even get started, is this:

<p><strong>Question:</strong> Does the mobile device location service work well enough at all to determine what room or space it is in within a building?

<p>If so, does it always work that well, or only sometimes?

<p>What can one do to improve precision if needed?

<p>I asked Kean, and his reply is:

<p><strong>Answer:</strong> In my experience it’s not there yet. 
Current technologies are based on proximity to Wi-Fi access points.
Best results are obtained when it’s possible to triangulate.

<p>Currently, the best chance of solving this may be the recently founded 

<a href="http://press.nokia.com/2012/08/23/accurate-mobile-indoor-positioning-industry-alliance-called-in-location-to-promote-deployment-of-location-based-indoor-services-and-solutions">
In-Location accurate mobile indoor positioning industry alliance</a>.

<p>Anyway, for the sake of argument and experimenting, let's assume that this issue can be solved.

<p>If so, how can we correlate the mobile device positioning with the Revit BIM room boundaries?



<a name="4"></a>

<h4>4. Coordinate System and Multi-user Considerations</h4>

<p>One interesting open issue is what coordinate system to work in.

<p>I'll use Android as the mobile device example here, leaving the iOS based ones to Adam et al.

<p>The Android location service provides longitude and latitude via the GPS and Wi-Fi networks, so it makes sense to work in that.
The altitude is apparently given in meters as explained below.

<p>Assuming that no two rooms or spaces can be in the same physical location, and that all the data passed in is correctly defined and positioned, that allows me to simply ignore all multi-user considerations.

<p>I might decide to allow rooms to be identified by their unique Revit id, so that they can be told apart, and their data corrected.

<p>Oh yes, it would also make sense to implement functionality to clear the entire database, and to delete individual levels and rooms.



<a name="5"></a>

<h4>5. Android Location and Altitude</h4>

<p>Retrieving a precise fix of the mobile device location is not trivial, as this discussion on

<a href="http://stackoverflow.com/questions/3145089/what-is-the-simplest-and-most-robust-way-to-get-the-users-current-location-in-a">
the simplest and most robust way to get the user's current location in Android</a> shows.

<p>Obtaining the altitude is even more unreliable; in the words of

<a href="http://stackoverflow.com/users/213269/jonas">Jonas</a> in 

the question of

<a href="http://stackoverflow.com/questions/2791927/how-does-getaltitude-of-android-gps-location-works">
how Android GPS Location getAltitude method works</a>:

<p>The altitude value you get is in meters from 

<a href="http://en.wikipedia.org/wiki/WGS84">the GPS (WGS84)</a> 

<a href="http://en.wikipedia.org/wiki/Reference_ellipsoid">reference ellipsoid</a> and 

not from the <a href="http://en.wikipedia.org/wiki/Geoid">geoid</a>.

From my experience, the GPS are really bad at altitude values.
Here is a quote from the 

<a href="http://eclipsim.com/gpsstatus">GPS Status</a> FAQ:

<p>"GPS does not report the height above the mean sea level; rather the GPS system compares the height to the WGS84 reference ellipsoid which may be above or below the actual sea level. 
In different parts of the earth it can be off by more than 200 meters (depending on the mass distribution of Earth). 
For example the geoid's surface around Florida is above the mean sea level by a good 30-40 meters, which means that standing on the shore would show you -30m as altitude. 
This is normal, and not an error, and caused by the fact that the altitude is relative to an artificial reference surface and not to the sea level. 
If you are interested in this topic, I recommend reading 

<a href="http://www.esri.com/news/arcuser/0703/geoid1of3.html">Mean Sea Level, GPS, and the Geoid</a>."

<p>In summary, the mobile device altitude reading might be too unreliable for locating rooms on different levels.

<p>For an introduction to determining an Android mobile device location, here is a complete little tutorial describing the 

<a href="http://foo.jasonhudgins.com/2007/12/cruising-around-with-android.html">
TrivialGPS application</a> which 

will display a MapView and centre it on the current device location in real-time as it moves around.

<p>For a complete video tutorial introduction to Android development and a huge number of other programming and non-programming topics, you can look at the

<a href="http://thenewboston.org">
New Boston</a>, 

with 

<a href="http://thenewboston.org/list.php?cat=6">
200 videos on Android development</a> and

<a href="http://thenewboston.org/list.php?cat=28">
37 on iPhone development</a>.

I had a quick look at its Android application development tutorial 142 on the 

<a href="http://www.youtube.com/watch?v=Q5U2cbJNBM8">
LocationManager and location permissions</a>.






<a name="6"></a>

<h4>6. Scalable Vector Graphics SVG</h4>

<p>Thinking about the room polygons, I also wondered about visualising them.

<p>One handy way to achieve that is to use the 

<a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">
Scalable Vector Graphics format SVG</a>.

<p>It is a

<a href="http://en.wikipedia.org/wiki/World_Wide_Web_Consortium">
W3C</a>

<a href="http://en.wikipedia.org/wiki/Open_standard">
open standard</a> XML-based 

file format for two-dimensional vector graphics enabling a pretty compact representation of 

<a href="http://www.w3.org/TR/SVG11/shapes.html#PolygonElement">
polygons</a>, 

and can be visualised on just about any browser, including 

<a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics#Mobile_support">
mobile devices</a>.

<p>By the way, reading the details of the SVG polygon specification, I really love the precision of the specification of its list of points, the 

<a href="http://www.w3.org/TR/SVG11/shapes.html#PointsBNF">
grammar for points specifications</a>:

<p>The following is the Extended Backus-Naur Form (EBNF) for points specifications in 'polyline' and 'polygon' elements. 
The following notation is used:

<pre>
    *: 0 or more
    +: 1 or more
    ?: 0 or 1
    (): grouping
    |: separates alternatives
    double quotes surround literals

list-of-points:
    wsp* coordinate-pairs? wsp*
coordinate-pairs:
    coordinate-pair
    | coordinate-pair comma-wsp coordinate-pairs
coordinate-pair:
    coordinate comma-wsp coordinate
    | coordinate negative-coordinate
coordinate:
    number
number:
    sign? integer-constant
    | sign? floating-point-constant
negative-coordinate:
    "-" integer-constant
    | "-" floating-point-constant
comma-wsp:
    (wsp+ comma? wsp*) | (comma wsp*)
comma:
    ","
integer-constant:
    digit-sequence
floating-point-constant:
    fractional-constant exponent?
    | digit-sequence exponent
fractional-constant:
    digit-sequence? "." digit-sequence
    | digit-sequence "."
exponent:
    ( "e" | "E" ) sign? digit-sequence
sign:
    "+" | "-"
digit-sequence:
    digit
    | digit digit-sequence
digit:
    "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
wsp:
    (#x20 | #x9 | #xD | #xA)+
</pre>

<p>Cool, isn't it?
Leaves no open questions!

<p>I'll leave SVG be for now, and probably return to it later on.
The visualisation is not an essential part of the room determination, of course.




<a name="7"></a>

<h4>7. Azure Web Service</h4>

<p>I installed the Windows Azure SDK for .NET to use with my Visual Studio 2010 SP1 installation.

<p>I also found it handy to take a look at 

<a href="http://adndevblog.typepad.com/aec/2012/05/experiential-learning-with-net-web-application-with-sql-azure-tutorial.html">
Saikat's experiences</a> with 

this as well.




<a name="8"></a>

<h4>8. Installing the Windows Azure SDK</h4>

<p>I followed Kean's suggestions for 

<a href="http://through-the-interface.typepad.com/through_the_interface/2012/04/exposing-a-restful-web-service-for-use-inside-autocad-using-the-aspnet-web-api-part-1.html">
exposing a web service using ASP.NET</a> and

first used the Visual Studio new project wizard to enable the Windows Azure tools:</p>

<center>
<img src="img/azure_1.png" alt="Azure" width="400"/>
</center>

<p>That initialises a download process:</p>

<center>
<img src="img/azure_2.png" alt="Azure" width="400"/>
</center>


<a name="9"></a>

<h4>9. Installing ASP.NET MVC 4</h4>

<p>After installing the Windows Azure tools, 

<a href="http://through-the-interface.typepad.com/through_the_interface/2012/04/exposing-a-restful-web-service-for-use-inside-autocad-using-the-aspnet-web-api-part-1.html">
Kean suggests</a> installing

<a href="http://asp.net/mvc/mvc4">
MVC 4 beta for Visual Studio 2010</a>.

<p>Finally, my Visual Studio installation is enhanced like this:</p>

<center>
<img src="img/azure_3.png" alt="Azure" width="400"/>
</center>


<a name="10"></a>

<h4>10. Implementing an ASP.NET Web Service</h4>

<p>I created a new ASP.NET MVC 4 Web Application using the wizard presented by Visual Studio &gt; New &gt; Project &gt; New Project dialogue.

<p>I compiled it and hit F5 to debug it in the browser, which shows the default web-page provided in the boilerplate project:

<center>
<img src="img/asp_net_default_home.png" alt="ASP.NET default home page" width="400"/>
</center>

<p>I have done nothing yet to implement any API, but I can still provide some input data and use the debugger to explore where it ends up in my new project.

<p>Simply replace the original URL displayed in the address bar, in my case 'http://localhost:1574', with an address including some input data, such as 'http://localhost:1574/api/values'.
This triggers a breakpoint in the ValuesController Get method taking no arguments:
      
<pre class="code">
&nbsp; <span class="green">// GET api/values</span>
&nbsp; <span class="blue">public</span> <span class="teal">IEnumerable</span>&lt;<span class="blue">string</span>&gt; Get()
&nbsp; {
&nbsp; &nbsp; <span class="blue">return</span> <span class="blue">new</span> <span class="blue">string</span>[] { <span class="maroon">&quot;value1&quot;</span>, <span class="maroon">&quot;value2&quot;</span> };
&nbsp; }
</pre>

<p>The result returned to the browser is an XML document containing the list of predefined values:</p>

<center>
<img src="img/asp_net_default_values.png" alt="ASP.NET default value list" width="400"/>
</center>

<p>Providing an integer id as an additional argument, i.e. in this case as an additional node in the URL path, e.g. 'http://localhost:1574/api/values/12345', triggers the breakpoint in the next overload of the Get method, taking an integer input argument:

<pre class="code">
&nbsp; <span class="green">// GET api/values/5</span>
&nbsp; <span class="blue">public</span> <span class="blue">string</span> Get( <span class="blue">int</span> id )
&nbsp; {
&nbsp; &nbsp; <span class="blue">return</span> <span class="maroon">&quot;value&quot;</span>;
&nbsp; }
</pre>

<p>This time, the result is an XML document containing the one single value specified:</p>

<center>
<img src="img/asp_net_default_value.png" alt="ASP.NET default specific value" width="400"/>
</center>

<p>I cannot specify an arbitrary string argument, such as 'jeremy', since the default implementation expects integer id values only:</p>

<center>
<img src="img/asp_net_invalid_value.png" alt="ASP.NET invalid value" width="400"/>
</center>


<a name="11"></a>

<h4>11. Enabling a Non-numerical Id in the URL</h4>

<p>Realising that it will be hard for me to encode the mobile device location into a simple integer, I worked really hard to find a way to pass in a string via the URL.

<p>After extensive research, I finally found a solution in two simple steps:

<p>1. Specify non-standard constraints in the WebApiConfig implementation:

<pre class="code">
&nbsp; <span class="blue">public</span> <span class="blue">static</span> <span class="blue">class</span> <span class="teal">WebApiConfig</span>
&nbsp; {
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">static</span> <span class="blue">void</span> Register( <span class="teal">HttpConfiguration</span> config )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; config.Routes.MapHttpRoute(
&nbsp; &nbsp; &nbsp; &nbsp; name: <span class="maroon">&quot;DefaultApi&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; routeTemplate: <span class="maroon">&quot;api/{controller}/{id}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; defaults: <span class="blue">new</span> { id = <span class="teal">RouteParameter</span>.Optional },
&nbsp; &nbsp; &nbsp; &nbsp; constraints: <span class="blue">new</span> { id = <span class="maroon">&quot;[0-9a-z]+&quot;</span> }
&nbsp; &nbsp; &nbsp; );
&nbsp; &nbsp; }
&nbsp; }
</pre>

<p>This important solution is not explicitly pointed out, only sort of hinted at in the article by Mike Wasson on 

<a href="http://www.asp.net/web-api/overview/web-api-routing-and-actions/routing-and-action-selection">
ASP.NET routing and action selection</a>, 

where it just says that you can "provide constraints, which restrict how a URI segment can match a placeholder".
Anyway, this modification finally allows me to enter non-numerical characters in the 'id' part of the URL.

<p>2. The modified constraints triggered an error when executing the application, however, because my ApiController implementation only provides a Get method taking an int argument.

<p>I removed that and replaced it by one taking a string instead:

<pre class="code">
&nbsp; <span class="blue">public</span> <span class="blue">string</span> Get( <span class="blue">string</span> id )
&nbsp; {
&nbsp; &nbsp; <span class="blue">return</span> <span class="blue">string</span>.Format(
&nbsp; &nbsp; &nbsp; <span class="maroon">&quot;The room containing the input location &quot;</span>
&nbsp; &nbsp; &nbsp; + <span class="maroon">&quot;'{0}' is still being determined...&quot;</span>, 
&nbsp; &nbsp; &nbsp; id );
&nbsp; }
</pre>

<p>While making these modifications, I also renamed my controller from ValuesController to RoomController.

<p>Now I can pass in a string through the URL and receive the expected result:

<center>
<img src="img/asp_net_string_value.png" alt="ASP.NET string value in URL" width="400"/>
</center>

<p>I don't know whether I ever previously needed such a long time to learn how to change such a small number of lines of code.

<p>Anyway, now I have more control over my URL argument passing, and can start thinking about an effective format to pass in the mobile device location value and other data.


<a name="12"></a>

<h4>12. Thoughts on the Web Service Grammar</h4>

<p>Please excuse my rather unstructured gung-ho approach.
I am thinking about what to implement and how to do so at the same time.
Sorry about that.
Here goes anyway.
More elegantly, I might also simply say that this is work in progress, on all levels.

<p>Now that we have some infrastructure in place, let me take a step back again and consider what I really want to achieve.
Basically, I want to query the system for the room containing a given location.
In order to do so, I also need to be able to first specify the room data.
Let's take a look at the input required for that.

<p>Each room resides on a level.
I could specify the levels anew each time I specify a room.
A cleaner approach would be to first specify all the levels, supplying data such as their name and elevation, and returning a simple integer id for each.
Then I can use the level id when defining the room, which would help avoid a lot of level data repetition.

<p>Once defined, it would also be nice to be able to query the system for the data it contains.
It might be useful to retrieve lists of all levels and rooms.
For each room, the room polygons could be returned as a list of points.

<p>We could implement rendering to SVG, e.g. given an individual room or an entire level, return an SVG file displaying all its room polygons.

<p>And of course the most basic functionality that this whole exercise is targeted at: given a specific level and location point, return the room containing it.

<p>How can we define a grammar to support this functionality?

<p>Here is a preliminary draft of a suggestion using the following notation:
I don't really like those horrible % sign escape codes commonly used in URL arguments.

<ul>
<li>I &ndash; an integer number, e.g. 342.
<li>L &ndash; an integer level id, i.e. the same as I.
<li>R &ndash; a real number, e.g. 1.234. Might be encoded in the URL as 1p234.
<li>E &ndash; an elevation, i.e. the same as R.
<li>P &ndash; a 3D point, i.e. a comma-separated list of three real numbers, e.g. "R,R,R"; to encode this in a URL, we might want to use something like "RcRcR", i.e. "1p23c4p56c7p89". 
</ul>

<p>With that notation, we might consider operations such as the following:

<ul>
<li>levels &ndash; list all levels with their id, name and elevation.
<li>rooms &ndash; list all rooms with their level, id and name.
<li>rooms-L &ndash; list all rooms on the given level specified by id integer id N.
<li>level-add-name-elevation
<li>room-add-L ...
</ul>

<p>Actually, I will not even finish this list, just go ahead and start implementing some more right away.
Maybe I'll get around to completing and cleaning it up once I know better what I really want.



<a name="13"></a>

<h4>13. Adding a Levels Controller</h4>

<p>In starting to write the grammar and list of actions above, I immediately realise that it would be nice to have more than one controller, so that I can specify different more or less meaningful text snippets in my URL command.

<p>At least I am pretty sure that I would like to be able to use the word 'levels' as well as 'room' or 'rooms', so let's add a LevelsController and see whether that works.

<p>Here are the steps:

<ul>
<li>Visual Studio solution explorer &gt; RoomPolygon project &gt; Controllers &gt; right click for context menu &gt; Add &gt; Controller... &gt; LevelsController.
<li>Change the parent class from 'Controller' to 'ApiController'.
<li>Replace the default Controller method Index by the ApiController methods Get, Post, Put and Delete, as we have them in the RoomController, which was based on the default whatever-it-was controller in the new project template.
</ul>

<center>
<img src="img/asp_net_levels_controller.png" alt="Adding a LevelsController" width="400"/>
</center>

<p>Very simple.

<p>I am not doing everything the way the system expects, though, because my Get() method with no arguments is never called, and trying to call the service with a URL ending in just "api/levels" causes an error.
I must specify an id, maybe because my constraints require a non-empty string for the id.

<p>I implemented code in my Get method taking the id argument to respond to the id "all" with a list of all levels.

<p>Here is the resulting code with a dummy level class definition and a list of dummy level entries to play with:

<pre class="code">
&nbsp; <span class="blue">class</span> <span class="teal">Level</span>
&nbsp; {
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">string</span> Name { <span class="blue">get</span>; <span class="blue">set</span>; }
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">double</span> Elevation { <span class="blue">get</span>; <span class="blue">set</span>; }
&nbsp;
&nbsp; &nbsp; <span class="blue">public</span> Level( <span class="blue">string</span> name, <span class="blue">double</span> elevation )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; Name = name;
&nbsp; &nbsp; &nbsp; Elevation = elevation;
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">override</span> <span class="blue">string</span> ToString()
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">return</span> Name + <span class="maroon">&quot;, &quot;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; + Elevation.ToString( <span class="maroon">&quot;0.###&quot;</span> );
&nbsp; &nbsp; }
&nbsp; }
&nbsp;
&nbsp; <span class="blue">public</span> <span class="blue">class</span> <span class="teal">LevelsController</span> : <span class="teal">ApiController</span>
&nbsp; {
&nbsp; &nbsp; <span class="blue">static</span> <span class="teal">List</span>&lt;<span class="teal">Level</span>&gt; _levels = <span class="blue">new</span> <span class="teal">List</span>&lt;<span class="teal">Level</span>&gt;()
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">new</span> <span class="teal">Level</span> ( <span class="maroon">&quot;Level 1&quot;</span>, 12.345 ),
&nbsp; &nbsp; &nbsp; <span class="blue">new</span> <span class="teal">Level</span> ( <span class="maroon">&quot;Level 2&quot;</span>, 67.89 )
&nbsp; &nbsp; };
&nbsp;
&nbsp; &nbsp; <span class="green">// GET api/levels</span>
&nbsp; &nbsp; <span class="blue">public</span> <span class="teal">IEnumerable</span>&lt;<span class="blue">string</span>&gt; Get()
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">return</span> <span class="blue">new</span> <span class="blue">string</span>[] { 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;1: Level 1, 12.345&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;2: Level 2, 67.89&quot;</span> };
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">string</span> Get( <span class="blue">string</span> id )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( id.ToLower().Equals( <span class="maroon">&quot;all&quot;</span> ) )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">return</span> Get().Aggregate&lt;<span class="blue">string</span>&gt;( 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ( current, next ) 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =&gt; current + <span class="maroon">&quot;, &quot;</span> + next );
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; <span class="blue">try</span>
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">int</span> i = <span class="blue">int</span>.Parse( id );
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( 0 &gt; i )
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">return</span> <span class="blue">string</span>.Format( 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;Invalid negative level id '{0}'&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id );
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( _levels.Count &lt;= i )
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">return</span> <span class="blue">string</span>.Format( 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;Invalid out-of-range level id '{0}'&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id );
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">return</span> _levels[i].ToString();
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; <span class="blue">catch</span>( <span class="teal">Exception</span> ex )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">return</span> <span class="blue">string</span>.Format( 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;Invalid level id '{0}': {1}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id, ex.Message );
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="green">// POST api/levels</span>
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">void</span> Post( [<span class="teal">FromBody</span>]<span class="blue">string</span> value )
&nbsp; &nbsp; {
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="green">// PUT api/levels/5</span>
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">void</span> Put( <span class="blue">int</span> id, [<span class="teal">FromBody</span>]<span class="blue">string</span> value )
&nbsp; &nbsp; {
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="green">// DELETE api/levels/5</span>
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">void</span> Delete( <span class="blue">int</span> id )
&nbsp; &nbsp; {
&nbsp; &nbsp; }
&nbsp; }
</pre>

<p>With that in place, I can now run my ASP.NET RoomPolygon application in the debugger and provide test URLs to receive the following XML results:

<ul>
<li>http://localhost:1574/api/levels/all &ndash;
<pre class="code">
<span class="blue">&lt;</span><span class="maroon">string</span><span class="blue">&gt;</span>1: Level 1, 12.345, 2: Level 2, 67.89<span class="blue">&lt;/</span><span class="maroon">string</span><span class="blue">&gt;</span>
</pre>

<li>http://localhost:1574/api/levels/1 &ndash;
<pre class="code">
<span class="blue">&lt;</span><span class="maroon">string</span><span class="blue">&gt;</span>Level 2, 67.89<span class="blue">&lt;/</span><span class="maroon">string</span><span class="blue">&gt;</span>
</pre>
</ul>

<p>I should probably revisit the ASP.NET tutorial, though, and understand the implementation of the Get method with no argument, as well as the Post, Put and Delete methods.



<a name="14"></a>

<h4>14. Summary and Next Steps</h4>

<p>I completed my education day working through these thirteen (rather arbitrary) steps.
Let's stop at this special number and consider what has been achieved.

<p>We have painted an interesting scenario, albeit possibly a little bit ahead of its time.

<p>We have considered some architectural underpinnings and possible implementation approaches, and looked at some possible interesting bits and pieces of infrastructure and support, such as SVG.

<p>We have installed support for and created an MVC 4 Azure web service, and made some useful modifications to it as a proof of concept for populating it with data from the Revit BIM as well as querying the service from the mobile device.

<p>What to do next?

<p>Well, we still have not implemented anything at all to run on the mobile device, so that is an important next step.

<p>We need to implement the Revit add-in to call the web service and populate the level and room information in the cloud.

<p>The web service itself needs to be implemented to receive the data from the BIM, save it in efficient internal data structures or a database, and reply to queries from the mobile device, possibly including requests for a graphical representation, potentially based on SVG.

<p>As hinted, I am not completely happy with my understanding of the ASP.NET functionality yet.
I need to revisit that, and maybe restart from scratch with a better understanding.

<p>It would help to first understand it workings in more depth, plan the full required functionality and how it should be made accessible, and only then start implementing  :-)

<p>Oh yes, the web service needs to be deployed to the cloud, as well.

<p>Looks like I have enough material lined up for another couple of interesting education days.

<p>Before I end, here is the initial

<a href="zip/RoomPolygon_1.zip">version 0.0.1.0</a> of 

my skeleton web service implementation, in case it is of interest to anyone.

<p>It handles the grammar outlined above but does not execute any actions on the requests yet, beyond echoing them in the XML strings returned.
