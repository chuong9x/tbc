<head>
<link rel="stylesheet" type="text/css" href="bc.css">
<script src="http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js"></script>
<!--<script src="google-code-prettify/run_prettify.js"></script>-->
</head>

<!--

- write markus: dessert + flac good
  http://www.stereophile.com/features/308mp3cd/
  http://kuppiano.blogspot.ch/p/evaluating-perceptual-coders.html
  http://www.codinghorror.com/blog/2012/06/concluding-the-great-mp3-bitrate-experiment.html
  http://www.abyssmedia.com/audioconverter/flac-vs-mp3.shtml
  Personally, I prefer to use lame 3.98.4 vbr0 instead of cbr 320 for portable use. Which of course will usually generate a far smaller size size. And I listen to the flac files while I am at the computer.
  The real reason for me to use vbr0 instead of cbr 320 is as follows.
  1- not every second will require 320kb.
  2- vbr 0 can go up to 320kbps if required.
  3- People often forget that  vbr is joint-stereo and cbr default setting is stereo. Which means that instead of just 160kbps per a channel for cbr. more kbps can be allocated to one of the channel as required (not sure how much more since I can't find any documentation on this).
  4- LAME vbr psychoacoustic algorithm has been constantly worked on. Yes, all lossy format depends on how good its pyscho acoustic algorithm is.  This why mp3 made over 15 years ago can sound so different to the the mp3 being generated by a more modern encoder. even if using cbr 320. But usually the difference is more obvious for the lower settings.
  http://ffmpeg.org/trac/ffmpeg/wiki/Encoding%20VBR%20%28Variable%20Bit%20Rate%29%20mp3%20audio
  http://wiki.hydrogenaudio.org/index.php?title=LAME#VBR_.28variable_bitrate.29_settings

- FFmpeg: converting M4A files to MP3 with the same bitrate

http://blog.kdecherf.com/2012/01/14/ffmpeg-converting-m4a-files-to-mp3-with-the-same-bitrate

Today I show you a (really) tiny tip to convert M4A files to MP3 keeping bitrate with FFmpeg.

By using the command ffmpeg -i thefile we obtain data about all streams of the file (codec, bitrate, …), like this:

$ ffmpeg -i test.m4a
[...]
Input #0, mov,mp4,m4a,3gp,3g2,mj2, from 'test.m4a':
  Metadata:
    major_brand     : M4A
    minor_version   : 1
    compatible_brands: M4A mp42isom
    creation_time   : 2012-01-06 13:08:47
    composer        : Tiësto
    title           : clublife_episode249
    artist          : Tiësto
    album           : Tiësto
    encoder         : GarageBand 6.0.4
  Duration: 00:59:04.87, start: 0.000000, bitrate: 324 kb/s
    Chapter #0.0: start 0.000000, end 31.000000
    Metadata:
      title           : Begin
    [...]
    Stream #0.0(eng): Subtitle: tx3g / 0x67337874, 0 kb/s
    Metadata:
      creation_time   : 2012-01-06 13:08:47
    Stream #0.1(eng): Subtitle: tx3g / 0x67337874
    Metadata:
      creation_time   : 2012-01-06 13:08:47
    Stream #0.2(eng): Audio: aac, 44100 Hz, stereo, s16, 319 kb/s
    Metadata:
      creation_time   : 2012-01-06 13:08:47
    Stream #0.3(eng): Video: mjpeg, yuvj444p, 300x300 [PAR 72:72 DAR 1:1], 2 kb/s, 0k fps, 600 tbr, 600 tbn, 600 tbc
    Metadata:
      creation_time   : 2012-01-06 13:08:47

Well, the line we need to use for the bitrate is

Stream #0.2(eng): Audio: aac, 44100 Hz, stereo, s16, 319 kb/s.

Now we can play with grep and awk to extract 319 (according to the example line):

$ ffmpeg -i test.m4a 2>&1 | grep Audio | awk -F', ' '{print $5}' | cut -d' ' -f1
319

This output will be used for the -ab argument:

ffmpeg -i test.m4a -ab `ffmpeg -i test.m4a 2>&1 | grep Audio | awk -F', ' '{print $5}' | cut -d' ' -f1`k test.mp3

Finally, we verify the new file:

$ ffmpeg -i test.mp3
[...]
Input #0, mp3, from 'test.mp3':
  Metadata:
    major_brand     : M4A
    minor_version   : 1
    compatible_brands: M4A mp42isom
    creation_time   : 2012-01-06 13:08:47
    composer        : Tiësto
    title           : clublife_episode249
    artist          : Tiësto
    album           : Tiësto
    encoder         : Lavf53.2.0
  Duration: 00:59:04.93, start: 0.000000, bitrate: 320 kb/s
    Stream #0.0: Audio: mp3, 44100 Hz, stereo, s16, 320 kb/s

- ffmpeg -i input.mp4 -acodec copy output.aac

- I wrote a small script that does it:
  gist.github.com/2267094

- http://www.togaware.com/linux/survivor/Convert_m4a.html
  To convert a directory of iTunes m4a format files to mp3 we can use Debian's faad and lame packages.
  You can then run the command faad to convert to wav format and then lame to convert to mp3 format:

  $ faad -o abc.wav abc.m4a
  $ lame -h -b 192 abc.wav abc.mp3

  The -h option of lame requests the production of higher quality output (taking more time to do so) and the -b option results in a bitrate of 192kbps for the resulting mp3.

  A simple script can be created to transform a directory of m4a files. You could put the following script into a file (first line should be #!/bin/sh) and call the file /usr/local/bin/m4a2mp3 with the appropriate permissions (chmod a+rx /usr/local/bin/m4a2mp3). Or you can simply select this code and paste it into a command line Terminal.

  for i in *.m4a
  do
  faad -o - "$i" | lame -h -b 192 - "${i%m4a}mp3"
  done

  The recipe iterates over all files in the current directory that match the pattern *.m4a (i.e., all files with an extension of m4a). The faad command is applied to each m4a file in turn (the $i argument is quoted in case the filenames contain spaces). The - argument to the -o option of faad indicates that the output should be to the standard output, which is then piped to the lame command. The ${i%m4a}mp3 replaces the m4a extension with the mp3 extension in the filename.

- http://www.linuxquestions.org/questions/linux-software-2/convert-m4b-to-mp3-batch-682854/
  mkdir -p mp3s

  SAVEIFS=$IFS
  IFS=$(echo -en "\n\b")

  for i in `find . -type f -iname "*.m4[ab]" -print`; do
  echo $i
  NAME=`echo $i | sed -e 's/\.\///' -e 's/\.m4b//g' `
  echo "doing '$NAME'"
  faad --stdio $i | lame --preset standard - "mp3s/${NAME}.mp3"
  done

  IFS=$SAVEIFS

- use faad and lame and specify minimum encoding bitrate:
  faad -o X.wav X.m4a
  lame -b 256 -V0 X.wav X.mp3

-->

<h3>Super Insane MP3 and Songbird Playlist Exporter</h3>

<p>I am still in the USA, visiting my colleague Kevin Vandecar in Goffstown, New Hampshire, returning to Europe on Tuesday.</p>

<p>Today we worked in his huge garden, loading a bunch of tree stumps on a truck with a tractor, then went for a swim in the beautiful Uncanoonuc Lake:</p>

<center>
<img src="file:////j/photo/jeremy/2013/2013-06-08_goffstown/05.jpeg" alt="Uncanoonuc Lake" width="300"/>
</center>

<p>Back in February I mentioned using Songbird to play music on the Mac,

<a href="http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#3">
extracting M3U playlists</a> from

it, and

<a href="http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#4">
determining the playlist duration</a> using ffmpeg and mutagen.</p>

<p>I encountered lots of other digital music related issues since then, and here are some notes on a few of them:</p>

<ul>
<li><a href="#2">MP3 versus FLAC</a></li>
<li><a href="#3">CBR versus VBR</a></li>
<li><a href="#4">Insanely high MP3 quality is insufficient</a></li>
<li><a href="#5">Converting M4A to MP3</a></li>
<li><a href="#6">Exporting a Songbird playlist to M3U</a></li>
<li><a href="#7">MP3 track and M3U playlist duration</a></li>
</ul>


<a name="2"></a>

<h3>MP3 Versus FLAC</h3>

<p>Here is a discussion of a topic important to me but completely unconnected to Revit and its API.
I hope it is of use to other audiophiles as well.
In fact, I would never dream of terming myself audiophile, and I seems to me that it should be of great interest to anybody using the MP3 format, and probably any other digital music format as well.
As far as I can tell, that incudes just about everybody I know, and definitely everybody under 25 years of age.</p>

<p>I mentioned that I dabble with DJ-ing and listen to music, which is vastly more handy to manage in digital format, of course.

<p>Until quite recently, I was storing all my music in the lossy compressed

<a href="http://en.wikipedia.org/wiki/MP3">
MP3</a> format.</p>

<p>I recently had a bad shock connected with that, though.

<p>My friend Markus gave me a nice jazzy guitar and percussion recording in the lossless

<a href="http://en.wikipedia.org/wiki/FLAC">
FLAC</a> format.

<p>I converted it to MP3 using the standard settings, and was surprised and pretty devastated to find that I could hear a significant difference in quality, just listening to the first few seconds of the original FLAC and the compressed MP3 on the built-in Mac loudspeakers.</p>

<p>This led to a visit to Markus, who stores all his music in FLAC and has the appropriate equipment to listen to it in high quality as well.
Further experiments showed that I need to either abandon the MP3 format entirely for any high quality sound archival and listening, or pay a lot more attention to details that I had hitherto completely ignored.</p>

<p>I seriously considered giving up on the MP3 format altogether, which would be painful, since so far I have been converting everything I have to that format, and standardising all my tools to expect and handle that and nothing else, significantly simplifying scripts for creating and analysing playlists and such-like things.</p>

<p>On the other hand, the MP3 format does include options for handling levels of quality that are said to make the compressed version indistinguishable from the original, so I had hopes of making use of them to allow me to happily continue using this format after all.</p>

<p>It was harder than expected, though.</p>

<p>Below are a few things I learned on the way.</p>

<p>I would also like to recommend this old article from 2005 on

<a href="http://www.codinghorror.com/blog/2005/12/variable-bit-rate-getting-the-best-bang-for-your-byte.html">
variable bit rate and getting the best bang for your byte</a>,

including the numerous comments providing some interesting suggestions and lots of background information.</p>

<!--
<a name=""></a>

<h4>Ffmpeg and Lame</h4>

<p>Until I ran into this issue, I was using

<a href="">
ffmpeg</a> to

convert between different formats and generate the MP3.

<p>Ffmpeg is actually driving

<a href="">
lame</a> in

the background.

As its documentation clearly states, "LAME is a program which can be used to create compressed audio files (Lame ain't an MP3 encoder)."
Until I read that, I thought it was, though.</p>

<p>I found it confusing trying to understand the mapping of the ffmpeg options to lame, and anyway, less is better, so I now switched to using lame directly instead of ffmpeg for the conversions described below.</p>
-->



<a name="3"></a>

<h4>CBR versus VBR</h4>

<p>As far as I can tell, quite a number of MP3 files use constant bitrate encoding, CBR.</p>

<p>Many MP3 files are encoded using

<a href="http://en.wikipedia.org/wiki/LAME">LAME</a>.

<p>Its documentation states that CBR is discouraged, and variable bitrate,

<a href="http://lame.sourceforge.net/vbr.php">
VBR</a>, should be used instead.</p>

<p>I tried directly using lame for music conversion, but it does not preserve the metadata tags, so I returned to ffmpeg instead anyway.</p>

<p>Still, reading the lame documentation helps understand which of the multitude of ffmpeg tags to use to control the conversion quality, and how.</p>

<!--
<a name="4"></a>

<h4>Converting WAV to MP3</h4>

<p>In the past, I always ripped CDs straight to MP3.</p>

<p>Based on these revelations, I ripped a couple of CDs to

<a href="">
WAV</a> instead,

which is also a lossless format, and uncompressed as well, unlike FLAC, representing a direct copy of the original CD content.

<p>This enables very direct serious comparison of my own personal perception of the WAV and resulting lossy and compressed MP3 variants.</p>
-->


<a name="4"></a>

<h4>Insanely High MP3 Quality is Insufficient</h4>

<p>Armed with these experiences, I tried converting from FLAC to MP3 using the lame -V 0 quality setting, which is termed 'insanely high quality' in the lame documentation.</p>

<p>I still hear a deterioration of clarity and brilliance, though.</p>

<p>This led me to look for further possibilities to force lame to globally maintain a specified minimum rate.</p>

<p>Happily, such a setting does exist using the -b option, and using it to request a minimum bitrate of 256 kbps finally succeeds in producing an output that I am unable to distinguish from the original.</p>


<a name="5"></a>

<h4>Converting M4A to MP3</h4>

<p>Later, I noticed a deterioration converting certain M4A files to MP3.</p>

<!--
<p>Here is a suggestion for a

<a href="">
naive script</a> to

achieve this:</p>

<pre>
mkdir -p mp3s

SAVEIFS=$IFS
IFS=$(echo -en "\n\b")

for i in `find . -type f -iname "*.m4[ab]" -print`; do
echo $i
NAME=`echo $i | sed -e 's/\.\///' -e 's/\.m4b//g' `
echo "doing '$NAME'"
faad --stdio $i | lame --preset standard - "mp3s/${NAME}.mp3"
done

IFS=$SAVEIFS
</pre>

<p>The results were totally disappointing.</p>

<p>use

<a href="">
faad</a>,

the free audio ... decoder to generate a pure unencoded and uncompressed WAV file representing the track contents, and then apply lame to generate the MP3 from that, with all the previous encoding remnants removed, unencumbered by any prior history:

<p>One can use mediainfo to examine the bitrate of the orginal data:</p>


faad and lame with variable bitrate, maximum quality, and specify minimum encoding bitrate:</p>

<pre>
  faad -o X.wav X.m4a
  lame -b 256 -V0 X.wav X.mp3
</pre>

<p>Actually, here is the current version of my m4a2mp3 script:</p>

<pre>
#!/bin/bash

# save and change IFS to allow spaces in filenames
OLDIFS=$IFS
IFS=$'\n'

for f in *.m4a ; do faad -o - "$f" | lame -h -b 192 - "${f%m4a}mp3" ; done

# restore it
IFS=$OLDIFS
</pre>
-->

<p>I still have no perfect solution for this.

<p>Some suggestions for LAME encoding arguments that I tried include:</p>

<pre>
  -V9 --vbr-new -q0 -mj -b32 -F --lowpass 19.7
    --nspsytune --cwlimit 10.7 --athaa-sensitivity 1

  -V2 --vbr-new -q0 --lowpass 19.7 -b96

  -V2 --vbr-new -q0 --lowpass 19.7 --cwlimit 10.7
    --scale 0.99 -b96
</pre>

<p>My current solution includes comparing the original M4A file size with the resulting MP3 size, and looking at the bit rate and mode using

<a href="http://mediainfo.sourceforge.net">mediainfo</a>.</p>

<!--
<p>Pretty heavy stuff.</p>

<p>Another hint, for mac:

"I have ripped over 1,000 cd's to Apple Lossless (ALAC) which are fine on my 160GB iPod.

You can use XLD to convert ALAC to FLAC if need be or a lossy form of AAC or MP3. As the previous poster said, you can convert between lossless formats with no issues.

For auto use, I load 320 or 256 kbps AAC on my iPod and plug into car."

</p>
-->

<p>Here is the <code>m4a2mp3</code> script that I am currently using, and often re-adapting:</p>

<pre class="prettyprint">
#!/bin/bash

# save and change IFS to allow spaces in filenames
OLDIFS=$IFS
IFS=$'\n'

#for f in *.m4a ; do ffmpeg -i "$f" "$f".mp3 ; done
#for f in *.m4a ; do ffmpeg -i "$f" -q:a 0 $(basename -s .m4a "$f").mp3 ; done
#for f in *.m4a ; do ffmpeg -i "$f" -b:a 320k $(basename -s .m4a "$f").mp3 ; done
#for f in *.m4a ; do ffmpeg -i "$f" -ab 300 $(basename -s .m4a "$f").mp3 ; done
#for f in *.m4a ; do ffmpeg -i "$f" -q 0 $(basename -s .m4a "$f").mp3 ; done

for f in *.m4a ; do ffmpeg -i "$f" -q 2 $(basename -s .m4a "$f").mp3 ; done

# this does not preserve the tags:
#for f in *.m4a ; do faad -o - "$f" | lame -V0 -b 256 - "${f%m4a}mp3" ; done

# restore IFS
IFS=$OLDIFS
</pre>

<p>Copy and paste the above to an editor or view the browser source code to see the truncated lines in full.</p>

<p>In the last few runs, I have simply changed the '-q 2' argument up or down a bit so that the resulting MP3 quality matches well with the original M4A.</p>



<a name="6"></a>

<h4>Exporting a Songbird Playlist to M3U</h4>

<p>I presented my Songbird

<a href="http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#3">
M3U playlist extractor</a> when

I was still supporting only MP3 file format.
I enhanced it to support FLAC as well, and now present the updated version.

<p>I sometime use

<a href="http://www.virtualdj.com">
VirtualDJ</a> to play music to dance to, since it provides the crossfade functionality lacking in Songbird.</p>

<p>I can feed it with an M3U playlist.</p>

<p>But...</p>

<p>The biggest gripe I have about Songbird is that it will not export its playlists to any sensible file format at all, in spite of being able to import M3U.</p>

<p>I searched for workarounds and saw many mentions of plugins for achieving this, but none of them worked for me.</p>

<p>There appears to be a lot of confusion among Songbird and its plugins regarding version compatibility.</p>

<p>I found a pretty easy workaround of my own, though, which I have been using successfully for some time now.</p>

<p>I can simply select all songs in a Songbird playlist and hit Cmd-C to copy them to the pasteboard.

<!--
, it will place a text string containing a linefeed delimited list of records in it, each record containing a comma delimited fields.</p>

<p>Each record provides the information about one track, specifying </p>
-->

<p>If you select a single track in Songbird and copy and paste it to an editor, you will see that it places a comma delimited string containing the artist, album and track name on the pasteboard.
Selecting and copying several tracks generates a linefeed-delimited list of these records, i.e. each track information on a separate line.</p>

<p>This information can be used to generate an M3U playlist file, provided the actual file path structure exactly matches the artist, album and track information read from the MP3 or FLAC music file tags.</p>

<!--
<p>I mentioned the confusion I had regarding the use of the

<a href="http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#1">
artist versus album artist tags</a>.</p>

<p>Well, the makers of Songbird seem to have had an issue with this as well, since they export the album artist instead of the artist, as I would have expected.</p>

<p>As a result of this confusion, I have now normalised my music library to have the same information in both of these, and ensure that the music file path also matches this.</p>
-->

<p>Once that is all set up, I can use the following Python script <code>songbird_to_m3u.py</code> to convert the information copied and pasted from Songbird to an M3U playlist referencing the files in my music library, which I can then import into VirtualDJ or any other player:</p>

<pre class="prettyprint">
#!/usr/bin/env python
#
# songbird_to_m3u.py - convert the file tags exported
#                      by songbird to m3u playlist
#
# Jeremy Tammik, Autodesk Inc., 2013-05-12
#
# Artist, Album, Title -->
# /m/Artist/Album/Track*Title.flac
# /m/Artist/Album/Track*Title.mp3
#
# cat songbird_export.txt | songbird_to_m3u.py > songbird_export.m3u
#
import glob, os, sys

nOk = 0
nFailed = 0

while True:
  try: line = raw_input()
  except: break

  #print '>', line

  a = line.strip().split( ', ' )

  if 3 != len(a):

    sys.stderr.write( line + ' - not 3 elements\n' )
    nFailed += 1
    continue

  ok = False
  p = '/m/' + a[0] + '/' + a[1] + '/*' + a[2]
  a1 = glob.glob( p + '.flac' )
  if 1 == len(a1):
    print a1[0]
    ok = True
  else:
    a2 = glob.glob( p + '.mp3' )
    if 1 == len(a2):
      print a2[0]
      ok = True

  if ok:
    nOk += 1
  else:
    sys.stderr.write(
      '\n%s\n%s\nglob returned %d (flac) and %d (mp3)\n\n'
      % (line, p, len(a1), len(a2)) )
    nFailed += 1

sys.stderr.write(
  '%s files passed, %s failed.\n'
  % (nOk, nFailed) )
</pre>

<p>Here is the content of the Mac pasteboard after copying a playlist in Songbird:</p>

<pre>
  Gotan Project, La Revancha Del Tango, Chunga's Revenge
  Outback, Dance The Devil Away, Two In The Bush
  Marla Glen, Humanology, Fever
  Brent Lewis, Thunder Down Under, Outback Attack
  The Chemical Brothers, Hanna, Escape 700
  Shakti, Natural Elements, Come On Baby Dance With Me
  Gabrielle Roth, Tribe, Tsunami 3 - chaos
  Talvin Singh, Oriental Club Disk 2, OK
  Martin O, Der mit der Stimme tanzt, Japaner
  Jazzbit, Unknown, Swingin man
  Yma Sumac, Ultra Lounge - Leopard Skin Fuzzy Sampler, Taki Rari
  Folco Orselli, Generi di Conforto, La ballata di Piazzale Maciachini
  Beatles, White Album CD 2, Good Night
  Natalie Dessay, Vocalises, Vocalise
  Büdi Siebert, Namaste, Lotus Call 1 Varja Guru Mantra
  Jeremy Tammik, Meditation, Stillness One Minute Silence
  Erik Truffaz, Mantis, Saisir
</pre>

<p>Running the <code>songbird_to_m3u.py</code> script on that produces the following output, representing a valid M3U playlist on my file system:</p>

<pre>
  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3
  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3
  /m/Marla Glen/Humanology/13 Fever.flac
  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3
  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3
  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3
  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3
  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3
  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3
  /m/Jazzbit/Unknown/00 Swingin man.mp3
  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3
  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3
  /m/Beatles/White Album CD 2/13 - Good Night.mp3
  /m/Natalie Dessay/Vocalises/01 Vocalise.flac
  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3
  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3
  /m/Erik Truffaz/Mantis/03 Saisir.flac
</pre>

<p>Copy and paste the above to an editor or view the browser source code to see the truncated lines in full.</p>



<a name="7"></a>

<h4>MP3 Track and M3U Playlist Duration</h4>

<p>Once I have an M3U playlist, I would also like to determine the total duration of all the tracks.

<p>I presented my

<a href="http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#4">
mp3duration.py</a> Python

script achieving that, which I now enhanced to handle FLAC files as well.

<p>Here is the updated version:</p>

<pre class="prettyprint">
#!/usr/bin/python
#
# mp3duration.py - retrieve the length of the tracks in
#                  the playlist and calculate the total
#
# Jeremy Tammik, Autodesk Inc., 2013-05-12
#
# /j/sh/mp3duration.py playlist.m3u
#
# http://code.google.com/p/mutagen/wiki/Tutorial
# http://www.doughellmann.com/PyMOTW/subprocess
#
import glob, os, re, subprocess, sys
import mutagen.mp3, mutagen.flac

_find_duration = re.compile( '.*Duration: ([0-9:]+)', re.MULTILINE )

def min_sec_to_seconds( ms ):
  "Convert a minutes:seconds string representation to the appropriate time in seconds."
  a = ms.split(':')
  assert len( a ) in [1,2]
  if 1 == len(a):
    s = float(a[0])
  else:
    s = float(a[0]) * 60 + float(a[1])
  return s

def seconds_to_min_sec( secs ):
  "Return a minutes:seconds string representation of the given number of seconds."
  mins = int(secs) / 60
  secs = int(secs - (mins * 60))
  return "%d:%02d" % (mins, secs)

def retrieve_length( playlist_filename ):
  "Determine length of tracks listed in the given input files (e.g. playlists)."

  print playlist_filename + ' duration:'

  if not os.path.exists( playlist_filename ):
    print "Error: specified playlist '%s' does not exist.\n" % playlist_filename
    raise SystemExit(1)

  f = open( playlist_filename )
  lines = f.readlines()
  f.close()

  total_count = 0
  total_mutagen = 0.0
  total_ffmpeg = 0.0

  print '%8s%8s%8s  %s' % ('mutagen', 'm:s', 'ffmpeg', 'track')

  for line in lines:
    path = line.strip()

    if not path or path[0] == '#':
      continue

    if not os.path.exists( path ):
      print "Error: specified music file '%s' does not exist.\n" % path
      raise SystemExit(2)

    if( path.endswith( 'mp3' ) ):
      audio = mutagen.mp3.MP3( path )
    else:
      assert path.endswith( 'flac' )
      audio = mutagen.flac.FLAC( path )

    #print audio.info.length, audio.info.bitrate, path
    seconds = audio.info.length

    ffmpeg = subprocess.check_output(
      'ffmpeg -i "%s"; exit 0' % path,
      shell = True,
      stderr = subprocess.STDOUT )

    #>>> output = subprocess.check_output(
    #...   'echo to stdout; echo to stderr 1>&2; exit 0', shell=True)
    #to stderr
    #>>> print output
    #to stdout

    #print ffmpeg
    #exit( 1 )

    #lines = ffmpeg.split( '\n' )

    #ffmpeg -report -i path 2>&1 | awk '/Duration/{print $2}'

    match = _find_duration.search( ffmpeg )
    if match: ffmpeg = match.group( 1 )
    else: ffmpeg = '--'

    ffmpeg = ffmpeg.lstrip('0:')
    ffmpeg = min_sec_to_seconds( ffmpeg )

    print '%8.1f%8s%8s  %s' % (seconds, seconds_to_min_sec(seconds), seconds_to_min_sec(ffmpeg), path )

    total_count += 1
    total_mutagen += seconds
    total_ffmpeg += ffmpeg

  s = '-' * 6
  print '%8s%8s%8s  %s' % (s, s, s, s )
  print '%8.1f%8s%8s  total for %s tracks' % (total_mutagen, seconds_to_min_sec(total_mutagen), seconds_to_min_sec(total_ffmpeg), total_count )

def main():
  "Determine length of tracks listed in the given input files (e.g. playlists)."

  for pattern in sys.argv[1:]:
    filelist = glob.glob( pattern )
    for filename in filelist:
      retrieve_length( filename )

if __name__ == '__main__':
  main()
</pre>

<p>Here is the output generated by running it on a playlist containing both MP3 and FLAC files:</p>

<pre>
/j/audio/wave/ $ mp3duration.py LerchenWave-2013-05b.m3u
LerchenWave-2013-05b.m3u duration:
 mutagen     m:s  ffmpeg  track
   304.2    5:04    5:04  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3
   314.9    5:14    5:14  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3
   244.0    4:04    4:04  /m/Marla Glen/Humanology/13 Fever.flac
   315.7    5:15    5:18  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3
   599.5    9:59    4:21  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3
   119.4    1:59    1:59  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3
   344.3    5:44    5:44  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3
   255.5    4:15    4:15  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3
    56.1    0:56    0:56  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3
   187.5    3:07    3:07  /m/Jazzbit/Unknown/00 Swingin man.mp3
   112.0    1:51    1:52  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3
   258.1    4:18    4:18  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3
   191.8    3:11    3:11  /m/Beatles/White Album CD 2/13 - Good Night.mp3
   323.9    5:23    5:23  /m/Natalie Dessay/Vocalises/01 Vocalise.flac
  1036.4   17:16    7:31  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3
    60.1    1:00    1:00  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3
   392.3    6:32    6:32  /m/Erik Truffaz/Mantis/03 Saisir.flac
  ------  ------  ------  ------
  5115.7   85:15   69:49  total for 17 tracks
</pre>

<p>That about covers my current digital music status.</p>

<p>I hope you can find some useful snippets in here.</p>

<p>Happy Sunday!</p>
