<style>
.blue { color: blue; }
.teal { color: teal; }
.maroon { color: maroon; }
.green { color: green; }
.gray { color: gray; }
</style>

<!-- 

- pin all revit links:
  property is read-only through the api, so prompt user to do it
  1251430 [Selecting an Instance of a Revit Link]

- more on driving revit from outside and IFC export, and a nother solution: 
  1251208 [Export Revit model to IFC from API]

-->

<h3>Prompt the User for Pinning and IFC Export</h3>

<p>We recently touched on the topic of 

<a href="http://thebuildingcoder.typepad.com/blog/2009/05/vb-samples-and-other-questions.html#1">
IFC export</a>

and the lack of API access to this functionality.
Another property that the Revit API also does not provide write access to is the Element.Pinned property.
In both of these cases, however, write access is provided through the user interface, and it is possible to programmatically read the current state.
Therefore, an application can determine the current state and prompt the user to execute the required action if necessary.
While it would be nicer to be able to implement a fully automated process, this approach is fool-proof and safe.

<h3>Prompt the User to Pin a Link</h3>

<p>Jim Bish of 

<a href="http://www.inlettechnology.com">
Inlet Technology</a>

recently suggested an effective, simple and reliable work-around for the lack of write access to the Element.Pinned property.
His requirement is especially to pin unpinned Revit link instances.
One solution is to simply

<a href="http://thebuildingcoder.typepad.com/blog/2009/06/convex-hull-and-volume-computation.html?cid=6a00e553e1689788330115718ed107970b#comment-6a00e553e1689788330115718ed107970b">
prompt the user to pin them</a>:

<pre class="code">
<span class="blue">Public</span> <span class="blue">Function</span> Execute( _
&nbsp; <span class="blue">ByVal</span> commandData <span class="blue">As</span> ExternalCommandData, _
&nbsp; <span class="blue">ByRef</span> message <span class="blue">As</span> <span class="blue">String</span>, _
&nbsp; <span class="blue">ByVal</span> elements <span class="blue">As</span> ElementSet) _
<span class="blue">As</span> IExternalCommand.Result _
<span class="blue">Implements</span> IExternalCommand.Execute

&nbsp; <span class="blue">Dim</span> app <span class="blue">As</span> Application = commandData.Application
&nbsp; <span class="blue">Dim</span> doc <span class="blue">As</span> Document = app.ActiveDocument
&nbsp; <span class="blue">Dim</span> element <span class="blue">As</span> Element = <span class="blue">Nothing</span>
&nbsp; <span class="blue">Dim</span> f <span class="blue">As</span> Filter

&nbsp; f = app.Create.Filter.NewCategoryFilter( _
&nbsp; &nbsp; BuiltInCategory.OST_RvtLinks)

&nbsp; <span class="blue">Dim</span> result <span class="blue">As</span> <span class="blue">New</span> List(<span class="blue">Of</span> Element)
&nbsp; <span class="blue">Dim</span> n <span class="blue">As</span> <span class="blue">Integer</span> = doc.Elements(f, result)

&nbsp; <span class="blue">For</span> <span class="blue">Each</span> element <span class="blue">In</span> result
&nbsp; &nbsp; <span class="blue">If</span> <span class="blue">TypeOf</span> (element) <span class="blue">Is</span> Instance <span class="blue">Then</span>
&nbsp; &nbsp; &nbsp; <span class="blue">If</span> <span class="blue">Not</span> element.Pinned <span class="blue">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; MsgBox(<span class="maroon">&quot;Hello! &quot;</span> _
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp; element.ObjectType.Name _
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp; <span class="maroon">&quot; is not pinned! Please pin it.&quot;</span>)
&nbsp; &nbsp; &nbsp; <span class="blue">End</span> <span class="blue">If</span>
&nbsp; &nbsp; <span class="blue">End</span> <span class="blue">If</span>
&nbsp; <span class="blue">Next</span>
<span class="blue">End</span> <span class="blue">Function</span>
</pre>

<p>Some features that might be worth adding to Jim's quick solution:
Some kind of logging functionality, so that you are not forced to acknowledge the message box individually for each non-pinned link.
It might also be helpful to add some more information to the message, such as the link's element id, in a widget allowing you to copy it to the clipboard.
This will enable you to select it in the user interface, for instance in order to zoom in to it.</p>

<h3>Prompt the User to Export to IFC</h3>

<p>Another solution prompting the user to execute a command due to the lack of programmatic access was proposed by Richard Brand of 

<a href="http://www.itannex.com">
Itannex</a>,

to handle the lack of an API to drive the IFC export functionality:

<p>My tool needs to generate a ZIP file containing the Revit file and the IFC export. 
This ZIP file should be created when the user selects a menu item in my application. 
That is why I cannot produce the IFC files through a nightly batch process driving Revit through a journal file. 
I 'solved' it by checking if there is an IFC file present. If not, or if it is not recent, I ask the user to export the model to IFC by hand into a particular directory.
As long as the Revit API does not provide access to the IFC export I guess we have to solve this issue this way. 
It should be much more user friendly if the IFC export would be generated automatically.</p>
