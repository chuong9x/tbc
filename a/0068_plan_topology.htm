<style>
.blue { color: blue; }
.teal { color: teal; }
.maroon { color: maroon; }
.green { color: green; }
</style>

<h3>PlanTopology Class</h3>

<p>Another question raised by Jochen Reichert of the University of Stuttgart last week was the use of the PlanTopology class and its members, which include:</p>

<ul>
<li>Circuits
<li>Level
<li>Phase
<li>Rooms
</ul>

<p>This class represents a plan topology within the Revit project and looks like it might be useful for handling rooms and areas, which could be used for analysis of cost and gross versus net floor area, volume, or facility management. 
Each of the circuits managed by this class represents an enclosed area in a plan view and provides members including:</p>

<ul>
<li>Area, the enclosed area of the circuit.
<li>IsRoomLocated, specifying whether there is a room located in this circuit.
<li>SideNum, the number of sides in the circuit.
</ul>

<p>Harry Mattison of Autodesk provided the following  background information and sample command CmdPlanTopology for testing this class:</p>

<p>PlanTopology contains information about the rooms and circuits on a specific level and phase. A circuit is a closed space bounded by walls where a room can be created. The simple example below reports information about the rooms that already exist and creates new rooms in circuits that don't have rooms. We are aware of some ideas about how circuits and the PlanCircuit class could be improved, which are part of a wish list item that might give you some further ideas about the potential future use of circuits and the plan topology class:</p>

<ul>
<li>There is currently no tie from the relatively abstract PlanCircuit class to the geometry that makes the circuit.</li>
<li>Determine if a room had been placed in a circuit.</li>
<li>Determine which room is related to the circuit.</li>
<li>If a room is not associated with a circuit, determine where this particular circuit is; having some tie to the geometry that defines the circuit would make this more useful.</li>
</ul>

<p>Here is the example that reports information about the rooms that already exist and creates new rooms in circuits that don't have rooms.</p>

<pre class="code">
<span class="teal">Application</span> app = commandData.Application;
<span class="teal">Document</span> doc = app.ActiveDocument;
&nbsp;
<span class="teal">List</span>&lt;<span class="teal">Element</span>&gt; list = <span class="blue">new</span> <span class="teal">List</span>&lt;<span class="teal">Element</span>&gt;();
&nbsp;
<span class="teal">Filter</span> f = app.Create.Filter.NewTypeFilter(
&nbsp; <span class="blue">typeof</span>( <span class="teal">Level</span> ) );
&nbsp;
<span class="blue">int</span> n = doc.get_Elements( f, list );
<span class="teal">Level</span> level = list[0] <span class="blue">as</span> <span class="teal">Level</span>;
&nbsp;
<span class="teal">PlanTopology</span> pt = doc.get_PlanTopology( level );
&nbsp;
<span class="blue">string</span> output = <span class="maroon">"Rooms on "</span>
&nbsp; + level.Name + <span class="maroon">":"</span>
&nbsp; + <span class="maroon">"\n&nbsp; Name and Number : Area"</span>;
&nbsp;
<span class="blue">foreach</span>( <span class="teal">Room</span> r <span class="blue">in</span> pt.Rooms )
{
&nbsp; output += <span class="maroon">"\n&nbsp; "</span> + r.Name + <span class="maroon">" : "</span>
&nbsp; &nbsp; + <span class="teal">Util</span>.RealString( r.Area ) + <span class="maroon">" sqf"</span>;
}
<span class="teal">Util</span>.InfoMsg( output );
&nbsp;
output = <span class="maroon">"Circuits without rooms:"</span>
&nbsp; + <span class="maroon">"\n&nbsp; Number of Sides : Area"</span>;
&nbsp;
<span class="blue">foreach</span>( <span class="teal">PlanCircuit</span> pc <span class="blue">in</span> pt.Circuits )
{
&nbsp; <span class="blue">if</span>( !pc.IsRoomLocated )
&nbsp; {
&nbsp; &nbsp; output += <span class="maroon">"\n&nbsp; "</span> + pc.SideNum + <span class="maroon">" : "</span>
&nbsp; &nbsp; &nbsp; + <span class="teal">Util</span>.RealString( pc.Area ) + <span class="maroon">" sqf"</span>;

&nbsp; &nbsp; <span class="teal">Room</span> r = doc.Create.NewRoom( <span class="blue">null</span>, pc );
&nbsp; }
}
<span class="teal">Util</span>.InfoMsg( output );
</pre>

<p>The code uses Revit 2009 API filters to determine the first level in the model.
The plan topology of that level is retrieved and queried for all its rooms.
In the first loop, the name and area of each room of the plan topology is queried and displayed in a message box.
In the second loop, each circuit with no room is queried for its number of sides and area, and a new room is created for it.
The method NewRoom can be called with an existing unplaced room to place it in the given circuit, or with a null argument to create a new room.</p>

<p>Here is the output generated by the first run in a simple model with two closed wall loops, only one of which has a room placed in it so far:</p>

<pre>
Rooms on Level 1:
  Name and Number : Area
  Room 1 : 278.14 sqf
Circuits without rooms:
  Number of Sides : Area
  4 : 114.53 sqf
</pre>

<p>In all subsequent runs after the first one, rooms have been created in each circuit, and the output changes to this:</p>

<pre>
Rooms on Level 1:
  Name and Number : Area
  Room 1 : 278.14 sqf
  Room 2 : 114.53 sqf
Circuits without rooms:
  Number of Sides : Area
</pre>

<p>Here is

<a href="http://thebuildingcoder.typepad.com/blog/files/bc10019.zip">
version 1.0.0.19</a>

of the complete Visual Studio solution with the new command CmdPlanTopology discussed here.</p>
