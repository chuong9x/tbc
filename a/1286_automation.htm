<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="bc.css">
</head>

<!--

10061813 [Finding out if a registered addin has run?]
using automation to determine when a specific ribbon item is clicked
command execution notification

-->

<h3>UI Automation, Ribbon Panel Item Access, the ItemExecuted Event and Vacation</h3>

<p>Here is an interesting exploration of using UI Automation to traverse the Revit ribbon items and subscribe to an event enabling you to determine when certain commands are executed.</p>

<p>I'll leave you to ponder this while I take a vacation in the snow next week.</p>

<p>Happy Revit add-in programming!</p>

<center>
<img src="file:////j/photo/jeremy/2013/2013-12-31_wildhaus/267_cropped.png" alt="Wildhaus and the Schafberg" width="300"/>
</center>

<p><strong>Question:</strong>

I would like to keep track of all add-ins that are started on a given Revit  installation.
We currently keep track of all our own using specific routines in the add-ins.
But is there a way to keep track of the add-ins that we did not create ourselves?
Like an event that fires after finishing or before starting?
I guess we could look in the journals, but is there a simpler way?</p>

<p><strong>Answer:</strong>

Just as you say and do yourself, keeping track of add-in activity requires special instrumentation, either in the add-in itself or somewhere within Revit.</p>

<p>My first impulse when I started reading your query was to suggest using the journal file, which does exactly what you wish. In the end, you mention it yourself.</p>

<p>I cannot really think of any better method and have heard now and then that various applications do indeed make use of the journal file for these kind of tracking activities.</p>

<p><strong>Response:</strong>

I implemented a journal file scanner and it has been running for some time now, but the results are not reliable because they depend on the users keeping their journal files.</p>

<p>I would like something a little more robust.
Therefore I turn to the add-in command binding.
Is there a way to bind to external commands?
And if so: how can I find the correct ID for the external command?</p>

<p>I figured that I can map all the registered commands when Revit has initialized and subscribe to the .BeforeExecute event of them to log when they are used.</p>

<p><strong>Answer:</strong>

That sounds like a brilliant idea!</p>

<p>Yes, of course you can determine the ID for external commands, and here is a dedicated blog post on

<a href="http://thebuildingcoder.typepad.com/blog/2013/10/programmatic-custom-add-in-external-command-launch.html">launching a custom add-in command</a>.</p>

<p>Please let us know whether that provides what you need.</p>

<p>I think that your requirement and your idea for addressing it are definitely of general interest to the community and generic enough to warrant a blog post, so I would love to implement and publish this, if that is OK, assuming it works.</p>

<p><strong>Response:</strong>

OK, well that's good.</p>

<p>I read through your blog post.</p>

<p>Very good, some follow-ups:</p>

<ol>
<li>For this, I need to know the ribbon panel tab name for the external commands.
I have not yet found a way to get that for ones I have not created myself.
Is this possible through the API?</li>
<li>The name string is generated by the sequence of controls that one has to navigate to the control, and your string represents tab &gt; panel &gt; button.
What scenarios could we encounter?
A pull-down button would give us one more step, right?
Anything else you can think of?</li>
</ol>

<p>Later...</p>

<p>I've been exploring the workflow suggested by Scott Wilson in one of your

<a href="http://thebuildingcoder.typepad.com/blog/ribbon">
blog posts on ribbons</a>.</p>

<p>I only have one question: where does one get the Autodesk.Window namespace?
It's not in any of the standard API-references or is it something I have not seen yet?</p>

<p>Later...</p>

<p>I found it: looked at your

<a href="https://github.com/jeremytammik/ModifyTabButton">ModifyTabButton</a> on GitHub.

It's in the AdWindows.dll assembly.</p>

<p>All right, back to the digging!</p>

<p><strong>Answer:</strong>

Congratulations on making rapid progress.</p>

<p>To answer your questions:</p>

<p>1. Yes, you can get all the tab names by iterating through the panels and their tabs, I think.</p>

<p>Look at the UIApplication.GetRibbonPanels method, start from there, and research what other objects you can traverse from that staring point.</p>

<p>You may even be able to look through them using RevitLookup.</p>

<p>Or, if not, you may be able to add that missing functionality to it yourself  :-)</p>

<p>2. I really don't know off-hand. Please find out and let us know  :-)</p>

<p><strong>Response:</strong>

I'm on fire today!</p>

<p>Seems like you've (or your blog) led me to the Holy Grail (or Pandora's Box):</p>

<p>The AdWindow.dll!</p>

<p>This contains a lot of extremely useful stuff for exploring the UI further; I can't believe I didn't look in a little deeper into this before.</p>

<p>I managed to find all the things I needed to get my AddinCommandBinding: Ids for all the user added external commands, what tab they are on and so on. However the dead-end was when I found that I could not create an AddinCommandBinding for them (maybe I need to do it during start-up? But then again why does the method exist in the UIApplication class?)</p>

<p>Anyway, so I went digging further inside the AdWindows.dll and found that the RibbonButton class has two useful events MouseEnter and MouseLeave.
I could then store what button had the mouse over it and use that in combination with a mouse click event to capture what button was clicked.
So I just plainly googled for click, but then started looking for click events inside the AdWindow.
Couldn't find any useful events so I tried to think of how the events are named in the API.</p>

<p>'Execute' is the word you guys use for a lot of events.
So I searched AdWindow for 'Execute' and found this event:</p>

<p>Autodesk.Windows.ComponentManager.ItemExecuted</p>

<p>Which is just spot on what I wanted &ndash; it fires every time a ribbon item is executed.</p>

<p>I just create a list of what buttons I want to monitor by iterating over the tabs using this:</p>

<pre>
  foreach(Autodesk.Windows.RibbonTab tab
    in Autodesk.Windows.ComponentManager.Ribbon.Tabs)
  {
    if (tab.KeyTip != null)
      continue;

    foreach(var panel in tab.Panels)
    {
      foreach(var item in panel.Source.Items)
      {
</pre>

<p>The KeyTip property is my way (didn't find any other) to figure out if the tab is user-created or not.</p>

<p>Problem solved!</p>

<p>I'm gonna test this for a while to see if performs well.</p>

<p>Have a nice day!</p>

<p><strong>Answer:</strong>

Thank you very much for your research and enthusiasm.</p>

<p>Rudolf Honke has published lots of interesting results making use of the not-officially-supported AdWindow.dll in conjunction with the officially supported Revit API functionality. They are grouped under

<a href="http://thebuildingcoder.typepad.com/blog/automation">
The Building Coder category Automation</a>.</p>

<p>You might also simply want to take a look at the results of searching for 'Rudolf Honke' on the blog.</p>

<p>I implemented a new external command named CmdItemExecuted in

<a href="https://github.com/jeremytammik/the_building_coder_samples">The Building Coder samples</a>

<a href="https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.118.0">version 2015.0.118.0</a> to

capture the gist of this discussion:</p>

<pre class="code">
<span class="blue">#region</span> Namespaces
<span class="blue">using</span> System;
<span class="blue">using</span> System.Diagnostics;
<span class="blue">using</span> Autodesk.Revit.Attributes;
<span class="blue">using</span> Autodesk.Revit.DB;
<span class="blue">using</span> Autodesk.Revit.UI;
<span class="blue">using</span> Autodesk.Windows;
<span class="blue">#endregion</span> <span class="green">// Namespaces</span>
&nbsp;
[<span class="teal">Transaction</span>( <span class="teal">TransactionMode</span>.ReadOnly )]
<span class="blue">class</span> <span class="teal">CmdItemExecuted</span> : <span class="teal">IExternalCommand</span>
{
&nbsp; <span class="blue">static</span> <span class="blue">bool</span> _subscribed = <span class="blue">false</span>;
&nbsp;
&nbsp; <span class="blue">static</span> <span class="blue">void</span> OnItemExecuted(
&nbsp; &nbsp; <span class="blue">object</span> sender,
&nbsp; &nbsp; Autodesk.Internal.Windows
&nbsp; &nbsp; &nbsp; .<span class="teal">RibbonItemExecutedEventArgs</span> e )
&nbsp; {
&nbsp; &nbsp; <span class="blue">string</span> s = ( <span class="blue">null</span> == sender )
&nbsp; &nbsp; &nbsp; ? <span class="maroon">&quot;&lt;nul&gt;&quot;</span>
&nbsp; &nbsp; &nbsp; : sender.ToString();
&nbsp;
&nbsp; &nbsp; Autodesk.Windows.<span class="teal">RibbonItem</span> parent = e.Parent;
&nbsp;
&nbsp; &nbsp; <span class="teal">Debug</span>.Print(
&nbsp; &nbsp; &nbsp; <span class="maroon">&quot;OnItemExecuted: {0} '{1}' in '{2}' cookie {3}&quot;</span>,
&nbsp; &nbsp; &nbsp; s, parent.AutomationName,
&nbsp; &nbsp; &nbsp; e.Item.AutomationName, e.Item.Cookie );
&nbsp; }
&nbsp;
&nbsp; <span class="blue">public</span> <span class="teal">Result</span> Execute(
&nbsp; &nbsp; <span class="teal">ExternalCommandData</span> commandData,
&nbsp; &nbsp; <span class="blue">ref</span> <span class="blue">string</span> message,
&nbsp; &nbsp; <span class="teal">ElementSet</span> elements )
&nbsp; {
&nbsp; &nbsp; <span class="blue">if</span>( _subscribed )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; Autodesk.Windows.<span class="teal">ComponentManager</span>.ItemExecuted
&nbsp; &nbsp; &nbsp; &nbsp; -= OnItemExecuted;
&nbsp;
&nbsp; &nbsp; &nbsp; _subscribed = <span class="blue">false</span>;
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="blue">else</span>
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="teal">RibbonTabCollection</span> tabs
&nbsp; &nbsp; &nbsp; &nbsp; = <span class="teal">ComponentManager</span>.Ribbon.Tabs;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">foreach</span>( <span class="teal">RibbonTab</span> tab <span class="blue">in</span> tabs )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;&nbsp; {0} {1} '{2}'&quot;</span>, tab,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tab.GetType().Name, tab.AutomationName );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( tab.KeyTip == <span class="blue">null</span> )
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// This tab is user defined.</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">foreach</span>( <span class="blue">var</span> panel <span class="blue">in</span> tab.Panels )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// Cannot convert type 'Autodesk.Windows.RibbonPanel' </span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// to 'Autodesk.Revit.UI.RibbonPanel' via a reference </span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// conversion, boxing conversion, unboxing conversion, </span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// wrapping conversion, or null type conversion.</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="green">//</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="green">//Autodesk.Revit.UI.RibbonPanel rp </span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="green">//&nbsp; = panel as Autodesk.Revit.UI.RibbonPanel;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Autodesk.Windows.<span class="teal">RibbonPanel</span> rp
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = panel <span class="blue">as</span> Autodesk.Windows.<span class="teal">RibbonPanel</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;&nbsp; &nbsp; {0} {1}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; panel.ToString(), panel.GetType().Name );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">foreach</span>( <span class="blue">var</span> item <span class="blue">in</span> panel.Source.Items )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Autodesk.Windows.<span class="teal">RibbonItem</span> ri = item
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">as</span> Autodesk.Windows.<span class="teal">RibbonItem</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">string</span> automationName = ri.AutomationName;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;&nbsp; &nbsp; &nbsp; {0} {1} '{2}' {3}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; item.ToString(), item.GetType().Name,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; automationName, ri.Cookie );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; &nbsp; Autodesk.Windows.<span class="teal">ComponentManager</span>.ItemExecuted
&nbsp; &nbsp; &nbsp; &nbsp; += OnItemExecuted;
&nbsp;
&nbsp; &nbsp; &nbsp; _subscribed = <span class="blue">true</span>;
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="blue">return</span> <span class="teal">Result</span>.Succeeded;
&nbsp; }
}
</pre>

<p>Here is a sample log from the Visual Studio debug output console after running this code &ndash; copy and paste to an editor to see the truncated lines in full:</p>

<pre>
  UIFramework.RvtRibbonTab RvtRibbonTab 'Architecture'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Structure'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Systems'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Insert'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Annotate'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Analyze'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Massing & Site'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Collaborate'
  UIFramework.RvtRibbonTab RvtRibbonTab 'View'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Manage'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Create'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Insert'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Annotate'
  UIFramework.RvtRibbonTab RvtRibbonTab 'View'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Manage'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Add-Ins'
  Autodesk.Windows.RibbonTab RibbonTab 'Ribbon Sampler'
    Autodesk.Windows.RibbonPanel RibbonPanel
      Autodesk.Windows.RibbonButton RibbonButton 'Hello World' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%PushButtonHello_Hello World_
      Autodesk.Windows.RibbonSplitButton RibbonSplitButton 'Command Data' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%SplitButton_Split Button_
      Autodesk.Windows.RibbonSplitButton RibbonSplitButton 'Pulldown' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%PulldownButton_Pulldown_
      UIFramework.RvtRibbonCombo RvtRibbonCombo '' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%ComboBox__
      Autodesk.Windows.RibbonRowPanel RibbonRowPanel '' Item=__
      Autodesk.Windows.RibbonPanelBreak RibbonPanelBreak '' Item=__
      Autodesk.Windows.RibbonRadioButtonGroup RibbonRadioButtonGroup 'Command
 Data' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%RadioButton__
      Autodesk.Windows.RibbonTextBox RibbonTextBox '' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%Text Box__
  UIFramework.RvtRibbonTab RvtRibbonTab 'Modify'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Modify'
  UIFramework.RvtRibbonTab RvtRibbonTab 'In-Place Model'
  UIFramework.RvtRibbonTab RvtRibbonTab 'In-Place Mass'
  UIFramework.RvtRibbonTab RvtRibbonTab 'Family Editor'
OnItemExecuted: 'ADN Bc A-I' in 'Item Executed and List Command Buttons' cookie Item=CustomCtrl_%CustomCtrl_%CustomCtrl_%Add-Ins%RvtSamples%ADN Bc A-I%Item Executed and List Command Buttons_Item Executed and List Command Buttons_
OnItemExecuted: 'Basics' in 'About Revit' cookie Item=CustomCtrl_%CustomCtrl_%CustomCtrl_%Add-Ins%RvtSamples%Basics%About Revit_About Revit_
OnItemExecuted: 'Basics' in 'Hello Revit (CS)' cookie Item=CustomCtrl_%CustomCtrl_%CustomCtrl_%Add-Ins%RvtSamples%Basics%Hello Revit (CS)_Hello Revit (CS)_
OnItemExecuted: 'Basics' in 'Hello Revit (VB)' cookie Item=CustomCtrl_%CustomCtrl_%CustomCtrl_%Add-Ins%RvtSamples%Basics%Hello Revit (VB)_Hello Revit (VB)_
</pre>

