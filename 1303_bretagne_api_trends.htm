<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="bc.css">
</head>

<!--

http://thebuildingcoder.typepad.com/blog/2015/03/calculating-gross-and-net-wall-areas.html?cid=6a00e553e16897883301b8d0f58dec970c#comment-6a00e553e16897883301b8d0f58dec970c
Revit API uses ElementId and requires system type
q by Dave, answers by Arnost and Martin

/j/photo/jeremy/2015/2015-03-31_bretagne/
/j/photo/jeremy/2015/2015-03-31_bretagne/20150331_103750_cropped.jpg

https://en.wikipedia.org/wiki/Flag_of_Brittany

walk
Le Château de Sable, 38 Rue de l'Europe, 29840 Porspoder
O'Porsmeur, 82 Rue du Port, 29840 Porspoder
sentier cotier GR 34

porspoder_walk_map.png

-->


<h3>Revit API Trends and Team Meeting in Bretagne</h3>

<p>Here is an illuminating explanation by Arno&scaron;t L&ouml;bel and Martin Schmid on some <a href="#3">Revit API development trends</a> that have already been underway for a couple of releases.</p>

<p>Before I get to them, a quick report from our ADN team meeting:</p>


<a name="2"></a>

<h4>ADN European Team Meeting in Bretagne</h4>

<p>As you may have noticed from

<a href="https://twitter.com/adamthenagy">
Adam Nagy's tweets</a> in

the past few days, I am at a team meeting with my European ADN colleagues:</p>

<center>
<img src="file:////j/photo/jeremy/2015/2015-03-31_bretagne/20150331_103750_silhouettes_cropped.jpg" alt="Team meeting in Brittany" width="400"/>
</center>

<p>We are convening in

<a href="https://en.wikipedia.org/wiki/Brittany">Brittany</a>,

home of our manager Cyrille Fauvel.</p>

<center>
<img src="img/Flag_of_Brittany_Gwenn_ha_du_218.png" alt="Flag of Brittany, named Gwenn-ha-du" width="218"/>
</center>

<p>The hotel has a nice view of the wild Atlantic Ocean coast:</p>

<center>
<img src="file:////j/photo/jeremy/2015/2015-03-31_bretagne/20150330_172153_view_cropped.jpg" alt="View of the coast and waves" width="400"/>
</center>

<p>Here we are at lunch, except for Adam, our social media expert photographer:</p>

<center>
<img src="file:////j/photo/jeremy/2015/2015-03-31_bretagne/20150331_123621_lunch_cropped.jpg" alt="EMEA ADN team at lunch" width="400"/>
</center>

<p>Unfortunately, I have to leave again today, all too soon, to get back home for the Easter holiday.</p>

<p>Luckily, I was able to experience the landscape at least a little bit after our all-day meeting yesterday by taking a nice walk from our meeting

<a href="http://www.lechateaudesablehotel.fr">
Hôtel Le Château de Sable</a> &ndash;

'Kastell-Treaz' in Breton &ndash; to the <a href="https://www.facebook.com/porsmeur">O'Porsmeur restaurant</a>:</p>

<center>
<img src="img/porspoder_walk_map.png" alt="Walk from Hôtel Le Château de Sable to O'Porsmeur restaurant" width="276"/>
</center>

<p>Better still, I was not forced to walk on the roads, but could follow the GR34 hiking path

<a href="http://www.wmaker.net/opcc/gr34">randonnée en Bretagne sur le GR34</a>:</a>

<center>
<img src="img/GR_34_bretagne.jpeg" alt="Randonnée en Bretagne sur le GR34" width="450"/>
</center>

<p>My section from Portsall via Porspoder to Lanildut forms part of its

<a href="http://www.wmaker.net/opcc/gr34/Etape-5-de-l-Aber-Benoit-au-Faou_r6.html">
fifth stage from l'Aber-Benoit to Faou</a>.</p>

<p>Back to the Revit API...</p>


<a name="3"></a>

<h4>Revit API Development Trends</h4>

<p>We have had a long-term vision of where the Revit API is headed, and regularly explain what we are aiming for during conferences and meetings, such as the Autodesk University panel sessions and DevDays conferences.</p>

<p>For people who have not attended any such sessions, some changes may seem rather mystifying, disconcerting, ugly or inconvenient.</p>

<p>Such a sentiment prompted this

<a href="http://thebuildingcoder.typepad.com/blog/2015/03/calculating-gross-and-net-wall-areas.html?cid=6a00e553e16897883301b8d0f58dec970c#comment-6a00e553e16897883301b8d0f58dec970c">comment</a> by

Dave on

<a href="http://thebuildingcoder.typepad.com/blog/2015/03/calculating-gross-and-net-wall-areas.html">calculating gross and net wall areas</a>:</p>

<p><strong>Question:</strong>

<p>This is pretty much just a gripe, but bear with me if you don't mind. From the diff you posted above:</p>

<pre>
  - foreach( View v in sheet.Views )
  + foreach( ElementId id in viewIds )
  {
  +   View v = doc.GetElement( id ) as View;
  +
</pre>

<p>What? That's hardly an improvement! Now client code is even more verbose.</p>

<p>Also the old paradigm, if it had been updated to return IEnumerable&lt;View&gt;, would be more amenable to use with Linq queries for post filtering.</p>

<p>I'm not a fan of this one either:</p>

<pre>
  - pipe = doc.Create.NewPipe( q0, q1,
  -   pipe_type_standard ); // 2014

  + pipe = Pipe.Create( doc, systemTypeId,
  +   pipe_type_standard.Id, levelId, q0, q1 ); // 2015
</pre>

<p>For the pipe, I now need to go find a systemTypeId from somewhere, but what if I don't want to assign this at creation time?</p>

<p>Not sure it's doing any good to post this, but I like to vent occasionally.</p>

<p><strong>Answer:</strong>

Thank you for your comments, which I will reinterpret as constructive questions that raise interesting issues that help illustrate some API design principles and future trends important and worthwhile understanding.</p>

<p>I asked Arnošt Löbel and Martin Schmid for an in-depth explanation, and they reply:</p>

<p><strong>Arnošt:</strong>

Boy, is that a loaded question of what? Where do I start? I am afraid I cannot give a satisfactory answer and be brief at the same time. I’ll try to answer in stages for that very reason.</p>

<p><u>A) Very brief explanation</u></p>

<p>We tend to use functions that take or return element Ids rather then element objects because:</p>

<ul>
<li>It’s faster</li>
<li>It’s safer</li>
<li>It’s consistent and ties directly to what Revit does internally</li>
</ul>

<p><u>B) Detailed and boring explanation</u></p>

<p>When we originally exposed the API (2005?), there was no direct link between the API and internal Revit code. That had turned out to be a maintenance nightmare. As the API has developed from tiny to large and huge we have realised we simply cannot maintain two parallel hierarchies. That’s why we have developed a framework that allows us to generate the public API directly from the internal native code. Now, basically, what we Revit programmers see, the API programmer gets. Sometime we add certain public method for the API programmer’s convenience, but the majority of the API is pretty much a mirror of Revit internal classes and interfaces.</p>

<p>This applies both to the case of methods using Ids as well as the originally used element creating factories. For the latter, it’s very straightforward: We simply do not have such factories internally and we would not like having them. We believe that element creation is easier when it lives with the element class itself. It is also discoverable better that way.</p>

<p>As for the element Ids - it has been part of Revit coding standard pretty much since ever. I mentioned that the main reasons are safety and speed. We often can do with just element Ids because that allows us to use elements without loading them to memory. For example, if I am looking for certain kind of a view, I can quickly get a list of their Ids, test what they are without expanding them (this is a fast test), and then only get the view I need. That mean I would be expanding one potential element only instead of, say, some hundred of view elements.</p>

<p>The safety aspect has to do with the fact that element objects can become inaccessible when deleted (naturally) or undone or redone. Such operations are not always obvious or visible to the internal programmer who holds a pointer to an element, which leads to very undesirable problem of dangling, invalid pointers. If the programmer uses the element's Id instead, however, then operations on the element are safe. All the programmer needs to do is to test if the element obtained for the given Id is NULL or not. Yes, it is somehow less convenient, but it is incomparably safer with almost no performance penalty. We have made internal element lookup so fast, that it is practically instant.</p>

<p><u>C) The case of Pipe creation</u></p>

<p>On top of the above explanation, there is more about this API that perhaps deserves further explanation. I would need to talk to the MEP team to be certain, but I have seen the pattern in other APIs, thus I assume my guess will be very close to what the MEP folks would tell me. The changes the user sees in 2015 are due to our continuing effort to separate Revit UI layer from the underlying model, to which we typically refer to as Revit DB. Without going into great details, the separation between those two should be such that the DB does not know about the UI, while the UI can know about the DB. Makes sense? So, even though it is not apparent when looking at the original pre-2015 pipe creation, the method (which is obviously a DB method) used to reach out to the UI layer to fetch the current type a pipe would be created with if the creation started via the UI. That, for us, is no longer acceptable and it is not how Revit works internally. The original pipe-creation method did what it did because it was written manually and did not reflect Revit internals. With our effort of tying the API tightly with Revit internals, such approach is no longer possible. The API programmer now needs to do what Revit programmers do too, which is:</p>

<ul>
<li>If there is UI, find out via the UI interface what the current type is and use that.</li>
<li>If UI is not accessible (for whatever reason), the programmer simply must know what type is to be used.</li>
</ul>

<p>I hope my answers are satisfactory. I realise they are not the briefest, but I tried my best. </p>


<p><strong>Martin:</strong>

Why did we modify the Revit API to require a pipe system type when creating a pipe? &ndash; To be consistent with the UI.</p>


<p>Many thanks to Arnošt and Martin for their detailed and succinct explanations, respectively!</p>

<p>I hope this clarifies.</p>