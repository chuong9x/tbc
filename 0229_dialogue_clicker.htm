<head>
<link rel="stylesheet" type="text/css" href="bc.css">
</head>

<!--

  1. use revit events
  2. dialogue clicker in C:\a\src\clicker:
  - 1229273 [AecArchMgd.dll problems]
  - 1231294 [Problems with ADT crashing on exit]
  - 1251961 [lengthening a wall that is joined to another wall via the API (unjoin)]
  - email dialogue with greg wesner, subject 'Code to click OK'
  3. use windows hook:
  - 1253699 [Disable Revit messages when executing command]

-->

<h3>Dismiss Dialogue using Windows API</h3>

<p>I am often confronted with unwanted dialogues popping up when I am trying to drive some application programmatically.
In Revit, many dialogues raise an event when they are displayed and allow us to implement an add-in application to handle them automatically.
Unfortunately, as noted in the discussion on

<a href="http://thebuildingcoder.typepad.com/blog/2009/06/autoconfirm-save-using-dialogboxshowing-event.html">
using the DialogBoxShowing event</a>,

some of the Revit dialogues do not raise such an event when displayed, so we cannot use the standard Revit API to handle or dismiss them.</p>

<p>Also, there are many other applications besides Revit that I am trying to drive programmatically, and they often do not provide any API at all, let alone a possibility to disable or automatically handle any of their user interface message boxes.

<p>Furthermore, there may be situations within Revit where the DialogBoxShowing event is raised and the dialogue can be handled, but this causes problems within Revit.
For instance, one developer reports that the DialogBoxShowing event handler crashes when trying to hide the dialog using an override result after the dialogue has been triggered due to closing a transaction using EndTransaction.
In that case, Revit says that the document was modified outside the transaction and generates an exception.</p>

<p><strong>Question:</strong> What can I do to automatically handle or dismiss dialogues in these situations?

<p><strong>Answer:</strong> As said, most Revit messages can be caught and responded to programmatically by a plug-in application by handling the Revit dialogue box DialogBoxShowing event, and
source code and a description for exploring this kind of situation is provided in the

<a href="http://thebuildingcoder.typepad.com/blog/2009/06/autoconfirm-save-using-dialogboxshowing-event.html">
discussion</a> mentioned above.

<p>The easiest way to find out whether you can use this event to handle your specific dialogue is to:

<ul>
<li>Implement and install the dialogue box handler.
<li>Set a breakpoint in the event handler.
<li>Reproduce the situation in which the dialogue is displayed by Revit.
<li>Check whether the event was fired or not.
</ul>

<p>Inside the event handler, the debugger will show you what data is being passed in and thus how you can identify this dialogue in your code for automatic processing.

<p>On the other hand, if the specific dialogue you are confronted with is not accessible in the Revit call-back, or you are dealing with some completely different application lacking the DialogBoxShowing event, I will explain below how you can use the

<a href="#1">.NET framework in C#</a> and

<a href="#2">VB</a> or the

<a href="#3">native Windows API</a> to handle it automatically instead.

In short:

<ul>
<li>In the .NET framework, you can use methods from the WinApi.User32 namespace like FindWindow, EnumWindows, and GetWindowText from inside a System.Timers.Timer instance to determine that a certain window is being displayed by the Windows OS and close it using WinApi.User32.SendMessage.
<li>In the native Windows API, similar functionality can be achieved by creating a hook in the main Revit window with SetWindowsHookEx and sending a WM_CLOSE or some other message to a dialogue when it is displayed.
</ul>

<a name="1"></a>

<h4>.NET Dialogue Clicker in C#</h4>

<p>Here is the C# source code and entire Visual Studio solution for a little utility named

<a href="zip/JtClicker.zip">JtClicker</a> that

I have used many times in the past and is very near and dear to me.
It was especially useful during my time in Autodesk Consulting, when we were always automating a large number of different applications which unfortunately were equipped with user interfaces as well as APIs.
The user interfaces would often insist on popping up various irritating dialogue boxes which could not be suppressed programmatically.</p>

<p>The solution that I developed for this is a Windows API based stand-alone command-line utility that simply sits and waits for a dialogue with certain characteristics to appear.
If and when such a dialogue is displayed, the utility immediately dismisses it in a certain predefined way.</p>

<p>This solution I implemented is thus a generic dialogue clicker in C# using the .NET framework to access the underlying Windows API.
In fact, it has nothing at all to do with the Revit API.</p>

<p>Since every dialogue is different, we need a lot of flexibility in the details of identifying and handling various specific dialogues.
The two main requirements for a high degree of flexibility are:</p>

<ul>
<li>How to identify that the dialogue we are interested in has been displayed.
<li>How the dialogue should be dismissed, once it has been identified.
</ul>

<p>Therefore, this utility will always require some tweaking before use and is only useful in source code format for that reason.
Check out the source code and the following discussion I had on that topic with my colleague Greg Wesner of Autodesk Consulting for details:</p>


<a name="2"></a>

<h4>.NET Dialogue Clicker in VB</h4>

<p>I was prompted to dive into this subject again recently by Greg Wesner of Autodesk Consulting.
Here is an example of my interaction with him when he made use of <strong>JtClicker</strong>, in which Greg also provides a VB version of the original C# implementation:

<p><strong>[Q]</strong> I heard you might have a sample of code for how to 'spoof' a click of the OK button in a windows dialog.
Specifically, I need to launch the options dialog in AutoCAD and then close it immediately with an OK click, i.e. I cannot cancel it.
Closing the dialog with OK results in AutoCAD refreshing all the paths.
Launching is obviously no problem but the OK click is tougher.
I'm working in VB.NET, so a .NET sample is really what I'm after.

<p><strong>[A]</strong> Yes, I am appending my little dialogue clicker to this mail.
There are comments inside form1 explaining its function and usage.
It searches for a dialogue using certain characteristics.
Once the dialogue appears, it sends windows messages to it in EnumChildProc.
You will need to tweak those messages to hit the button you need.

<p><strong>[Q]</strong> Thanks Jeremy. That was exactly what I needed. Hooked it all up and it is working great.

<p><strong>[A]</strong> Very glad to hear that it works for you!
Have you changed or improved anything in it?
If so, could you show me what you fixed or improved?

<p><strong>[Q]</strong> Well, I wish I could say that I improved on it, but you pretty much had all the parts I needed.
I was actually able to 'dumb' it down some because I could hard code the dialog name "Options" and the button "OK".
I also tested that "Options" and "OK" would dismiss the Options dialog in AutoCAD as expected with the original project files you sent.

<p>I was hoping that I wouldn't need to use the timer and would be able to just make the call straight to EnumWindows.
But that didn't work because the Options dialog doesn't actually come up until my function returns.
So I had to use the timer as well to delay the call to EnumWindows.
I found dropping the interval to 300ms was better though, because you barely see the dialog come up.
I call Timer.Stop() as soon as I find the button I'm looking for, because I will only need it to happen once every time the dialog comes up.
I am thinking about adding some defensive code that counts how many times we call EnumWindows in the Timer, and if we go above a certain number of times (maybe 500), we stop trying.
That way if anything happens and the Options dialog never comes up, we don't chew up CPU cycles forever.

<p>One thing I did do was translate WinApi.vb and the EnumWindowsProc() and EnumChildProc() methods to VB.
So I could pass that on to you in case you get requests for this in VB.
First, here is the module WinApi.vb providing access to the Windows API calls:

<pre class="code">
<span class="blue">Imports</span> System
<span class="blue">Imports</span> System.Runtime.InteropServices
<span class="blue">Imports</span> System.Text
&nbsp;
<span class="blue">Module</span> User32
&nbsp; <span class="blue">Delegate</span> <span class="blue">Function</span> EnumWindowsProc(<span class="blue">ByVal</span> hWnd <span class="blue">As</span> <span class="blue">Integer</span>, <span class="blue">ByVal</span> lParam <span class="blue">As</span> <span class="blue">Integer</span>) <span class="blue">As</span> <span class="blue">Boolean</span>

&nbsp; &lt;DllImport(<span class="maroon">&quot;user32.dll&quot;</span>, CharSet:=CharSet.Unicode)&gt; _
&nbsp; <span class="blue">Function</span> FindWindow(<span class="blue">ByVal</span> className <span class="blue">As</span> <span class="blue">String</span>, <span class="blue">ByVal</span> windowName <span class="blue">As</span> <span class="blue">String</span>) <span class="blue">As</span> <span class="blue">Integer</span>
&nbsp; <span class="blue">End</span> <span class="blue">Function</span>

&nbsp; &lt;DllImport(<span class="maroon">&quot;user32.dll&quot;</span>, CharSet:=CharSet.Unicode)&gt; _
&nbsp; <span class="blue">Function</span> EnumWindows(<span class="blue">ByVal</span> callbackFunc <span class="blue">As</span> EnumWindowsProc, <span class="blue">ByVal</span> lParam <span class="blue">As</span> <span class="blue">Integer</span>) <span class="blue">As</span> <span class="blue">Integer</span>
&nbsp; <span class="blue">End</span> <span class="blue">Function</span>

&nbsp; &lt;DllImport(<span class="maroon">&quot;user32.dll&quot;</span>, CharSet:=CharSet.Unicode)&gt; _
&nbsp; <span class="blue">Function</span> EnumChildWindows(<span class="blue">ByVal</span> hwnd <span class="blue">As</span> <span class="blue">Integer</span>, <span class="blue">ByVal</span> callbackFunc <span class="blue">As</span> EnumWindowsProc, <span class="blue">ByVal</span> lParam <span class="blue">As</span> <span class="blue">Integer</span>) <span class="blue">As</span> <span class="blue">Integer</span>
&nbsp; <span class="blue">End</span> <span class="blue">Function</span>

&nbsp; &lt;DllImport(<span class="maroon">&quot;user32.dll&quot;</span>, CharSet:=CharSet.Unicode)&gt; _
&nbsp; <span class="blue">Function</span> GetWindowText(<span class="blue">ByVal</span> hwnd <span class="blue">As</span> <span class="blue">Integer</span>, <span class="blue">ByVal</span> buff <span class="blue">As</span> StringBuilder, <span class="blue">ByVal</span> maxCount <span class="blue">As</span> <span class="blue">Integer</span>) <span class="blue">As</span> <span class="blue">Integer</span>
&nbsp; <span class="blue">End</span> <span class="blue">Function</span>

&nbsp; &lt;DllImport(<span class="maroon">&quot;user32.dll&quot;</span>, CharSet:=CharSet.Unicode)&gt; _
&nbsp; <span class="blue">Function</span> GetLastActivePopup(<span class="blue">ByVal</span> hwnd <span class="blue">As</span> <span class="blue">Integer</span>) <span class="blue">As</span> <span class="blue">Integer</span>
&nbsp; <span class="blue">End</span> <span class="blue">Function</span>

&nbsp; &lt;DllImport(<span class="maroon">&quot;user32.dll&quot;</span>, CharSet:=CharSet.Unicode)&gt; _
&nbsp; <span class="blue">Function</span> SendMessage(<span class="blue">ByVal</span> hwnd <span class="blue">As</span> <span class="blue">Integer</span>, <span class="blue">ByVal</span> Msg <span class="blue">As</span> <span class="blue">Integer</span>, <span class="blue">ByVal</span> wParam <span class="blue">As</span> <span class="blue">Integer</span>, <span class="blue">ByVal</span> lParam <span class="blue">As</span> <span class="blue">Integer</span>) <span class="blue">As</span> <span class="blue">Integer</span>
&nbsp; <span class="blue">End</span> <span class="blue">Function</span>

&nbsp; <span class="blue">Public</span> BM_SETSTATE <span class="blue">As</span> <span class="blue">Integer</span> = 243
&nbsp; <span class="blue">Public</span> WM_LBUTTONDOWN <span class="blue">As</span> <span class="blue">Integer</span> = 513
&nbsp; <span class="blue">Public</span> WM_LBUTTONUP <span class="blue">As</span> <span class="blue">Integer</span> = 514
<span class="blue">End</span> <span class="blue">Module</span>
</pre>

<p>Here is the main application:

<pre class="code">
<span class="blue">Private</span> timer1 <span class="blue">As</span> Timer
<span class="blue">Private</span> timer_interval <span class="blue">As</span> <span class="blue">Integer</span> = 300&nbsp; <span class="green">' in milliseconds so 1000 = 1 second</span>
<span class="blue">Private</span> timer_attempts <span class="blue">As</span> <span class="blue">Integer</span>

<span class="blue">Public</span> <span class="blue">Function</span> EnumWindowsProc(<span class="blue">ByVal</span> hwnd <span class="blue">As</span> <span class="blue">Integer</span>, <span class="blue">ByVal</span> lParam <span class="blue">As</span> <span class="blue">Integer</span>) <span class="blue">As</span> <span class="blue">Boolean</span>
&nbsp; <span class="blue">Dim</span> sbTitle <span class="blue">As</span> <span class="blue">New</span> StringBuilder(256)
&nbsp; <span class="blue">Dim</span> test <span class="blue">As</span> <span class="blue">Integer</span> = User32.GetWindowText(hwnd, sbTitle, sbTitle.Capacity)
&nbsp; <span class="blue">Dim</span> title <span class="blue">As</span> <span class="blue">String</span> = sbTitle.ToString()
&nbsp; <span class="blue">If</span> title.Length = 0 <span class="blue">Then</span>
&nbsp; &nbsp; <span class="blue">Return</span> <span class="blue">True</span>
&nbsp; <span class="blue">End</span> <span class="blue">If</span>
&nbsp; <span class="blue">If</span> title = <span class="maroon">&quot;Options&quot;</span> <span class="blue">Then</span>
&nbsp; <span class="blue">Else</span>
&nbsp; &nbsp; <span class="blue">Return</span> <span class="blue">True</span>
&nbsp; <span class="blue">End</span> <span class="blue">If</span>
&nbsp; User32.EnumChildWindows(hwnd, <span class="blue">New</span> User32.EnumWindowsProc(<span class="blue">AddressOf</span> EnumChildProc), 0)
&nbsp; <span class="blue">Return</span> <span class="blue">False</span>
<span class="blue">End</span> <span class="blue">Function</span>

<span class="blue">Public</span> <span class="blue">Function</span> EnumChildProc(<span class="blue">ByVal</span> hwnd <span class="blue">As</span> <span class="blue">Integer</span>, <span class="blue">ByVal</span> lParam <span class="blue">As</span> <span class="blue">Integer</span>) <span class="blue">As</span> <span class="blue">Boolean</span>
&nbsp; <span class="blue">Dim</span> sbTitle <span class="blue">As</span> <span class="blue">New</span> StringBuilder(256)
&nbsp; User32.GetWindowText(hwnd, sbTitle, sbTitle.Capacity)
&nbsp; <span class="blue">Dim</span> title <span class="blue">As</span> <span class="blue">String</span> = sbTitle.ToString()
&nbsp; <span class="blue">If</span> title.Length = 0 <span class="blue">Then</span>
&nbsp; &nbsp; <span class="blue">Return</span> <span class="blue">True</span>
&nbsp; <span class="blue">End</span> <span class="blue">If</span>
&nbsp; <span class="blue">If</span> title = <span class="maroon">&quot;OK&quot;</span> <span class="blue">Then</span>
&nbsp; <span class="blue">Else</span>
&nbsp; &nbsp; <span class="blue">Return</span> <span class="blue">True</span>
&nbsp; <span class="blue">End</span> <span class="blue">If</span>
&nbsp; User32.SendMessage(hwnd, User32.BM_SETSTATE, 1, 0)
&nbsp; User32.SendMessage(hwnd, User32.WM_LBUTTONDOWN, 0, 0)
&nbsp; User32.SendMessage(hwnd, User32.WM_LBUTTONUP, 0, 0)
&nbsp; User32.SendMessage(hwnd, User32.BM_SETSTATE, 1, 0)
&nbsp; timer1.Stop()
&nbsp; timer1 = <span class="blue">Nothing</span>
&nbsp; <span class="blue">Return</span> <span class="blue">False</span>
<span class="blue">End</span> <span class="blue">Function</span>

<span class="blue">Public</span> <span class="blue">Sub</span> timer1_Tick(<span class="blue">ByVal</span> sender <span class="blue">As</span> <span class="blue">Object</span>, <span class="blue">ByVal</span> e <span class="blue">As</span> EventArgs)
&nbsp; <span class="green">'timer_attempts is a failsafe to make sure that if for some reason the Options dialog</span>
&nbsp; <span class="green">' never comes up, we don't keep looking for it forever. We usually find the dialog on the</span>
&nbsp; <span class="green">' first few tries, so if it doesn't come up in about the first minute, we give up</span>
&nbsp; <span class="blue">If</span> timer_attempts &lt; 300 <span class="blue">Then</span>
&nbsp; &nbsp; User32.EnumWindows(<span class="blue">New</span> User32.EnumWindowsProc(<span class="blue">AddressOf</span> EnumWindowsProc), 0)
&nbsp; <span class="blue">Else</span>
&nbsp; &nbsp; timer1.Stop()
&nbsp; <span class="blue">End</span> <span class="blue">If</span>
&nbsp; timer_attempts += 1
&nbsp; Debug.Print(timer_attempts.ToString())
<span class="blue">End</span> <span class="blue">Sub</span>

<span class="green">' The options dialog will not come up until our function returns, so we setup a timer</span>
<span class="green">' that will check every 300 milliseconds to see if it can find the dialog. Once it finds</span>
<span class="green">' the dialog and clicks OK, it stops.</span>
<span class="blue">Public</span> <span class="blue">Sub</span> closeOptionsDialog()
&nbsp; timer_attempts = 0
&nbsp; <span class="blue">If</span> timer1 <span class="blue">Is</span> <span class="blue">Nothing</span> <span class="blue">Then</span>
&nbsp; &nbsp; timer1 = <span class="blue">New</span> Timer()
&nbsp; <span class="blue">End</span> <span class="blue">If</span>
&nbsp; timer1.Interval = timer_interval
&nbsp; <span class="blue">AddHandler</span> timer1.Tick, <span class="blue">New</span> EventHandler(<span class="blue">AddressOf</span> timer1_Tick)
&nbsp; timer1.Start()
<span class="blue">End</span> <span class="blue">Sub</span>
</pre>

<p>If the source code lines are truncated by your browser, you can copy and paste the text to a text editor.</p>


<a name="3"></a>

<h4>Using a native Windows API Hook</h4>

<p>The JtClicker dialogue clicker application described above is using the .NET framework to identify the dialogue and send messages to dismiss it.
Since the Win32 portion of the .NET framework is just a wrapper around native Windows API calls, the same functionality can also be implemented more directly using the native API.

<p>Here is a report on using a Windows hook to dismiss a dialogue triggered by closing a Revit transaction.

<p>I investigated using a hook, and this is the solution :-)
I created a hook in the main Revit window with SetWindowsHookEx and send messages to the dialogue when it is detected.
Initially I sent a WM_CLOSE message to close it, later I changed it to click the OK button instead.
This works really well, even if the dialog is shown when ending a transaction, in which case the DialogBoxShowing event generates an exception if I try to hide the dialog with OverrideResult.</p>

<p>My hook function is:

<pre class="code">
<span class="blue">private</span> <span class="blue">static</span> <span class="blue">void</span> ProcessWindow(
  <span class="teal">IntPtr</span> hwnd )
{
&nbsp; <span class="blue">if</span> (App.OcultarMensajesRevit)
&nbsp; {
&nbsp; &nbsp; <span class="green">// Buscamos el bot&#243;n de aceptar y lo pulsamos.</span>
&nbsp; &nbsp; <span class="blue">int</span> ID_OK = 1;
&nbsp; &nbsp; <span class="teal">IntPtr</span> hwndOk = Win32.Functions.GetDlgItem(
&nbsp; &nbsp; &nbsp; hwnd, ID_OK );

&nbsp; &nbsp; <span class="blue">if</span> (hwndOk != <span class="teal">IntPtr</span>.Zero)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; Win32.Functions.SendMessage(
&nbsp; &nbsp; &nbsp; &nbsp; hwndOk, (<span class="blue">uint</span>)Win32.Messages.WM_LBUTTONDOWN,
&nbsp; &nbsp; &nbsp; &nbsp; (<span class="blue">int</span>)Win32.KeyStates.MK_LBUTTON, 0 );

&nbsp; &nbsp; &nbsp; Win32.Functions.SendMessage(
&nbsp; &nbsp; &nbsp; &nbsp; hwndOk, (<span class="blue">uint</span>)Win32.Messages.WM_LBUTTONUP,
&nbsp; &nbsp; &nbsp; &nbsp; (<span class="blue">int</span>)Win32.KeyStates.MK_LBUTTON, 0 );
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="green">//Win32.Functions.SendMessage(</span>
&nbsp; &nbsp; <span class="green">//  hwnd, (uint)Win32.Messages.WM_CLOSE, 0, 0 );</span>
&nbsp; }
}
</pre>

<p>App.OcultarMensajesRevit is a variable I created to enable dialogue auto closing.
Instead of sending a WM_CLOSE message to the window to cancel it, I observed I needed to push the OK button for all things to work, so I search for that button and send it a button down and a button up message to simulate a mouse click.

<p>To connect the hook function, I used the

<a href="http://www.codeproject.com/KB/dialog/WindowInterceptor.aspx">
WindowInterceptor class</a>

I found at CodeProject.

<p>Then I add the following in the Startup event of my application:

<pre class="code">
<span class="teal">Process</span> process = <span class="teal">Process</span>.GetCurrentProcess();

<span class="teal">IntPtr</span> hwnd = process.MainWindowHandle;

App._windowsInterceptor = <span class="blue">new</span> WindowInterceptor(
  hwnd, ProcessWindow );
</pre>

<p>To clean up at the end, I add the following on shutdown:

<pre class="code">
App._windowsInterceptor.Stop();
</pre>
