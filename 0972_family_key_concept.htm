<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="bc.css">
</head>

<h3>Key Concepts of the Family Editor</h3>

<p>Today I am returning back home from the very successful

<a href="http://www.autodesk.ru/adsk/servlet/pc/index?id=21516340&siteID=871736">
Revit API DevCamp in Moscow</a>.</p>

<p>We received very good feedback from the participating developers who were so excited to learn about Revit programming that they ignored the hot environment, the unbearable sound of the false fire alarm and crazy running down the exterior staircase and back up again to the Autodesk offices on the 17<sup>th</sup> floor.</p>

<p>Here is Артур Кураков (Artur Kurakov) teaching one of the Revit API beginner sessions:</p>

<center>
<img src="file:////j/photo/jeremy/2013/2013-06-25_moscow/p6240127.jpg" alt="" width="400"/>
</center>

<p>I presented in three sessions, on the

<a href="http://thebuildingcoder.typepad.com/blog/2013/03/revit-2014-api-and-room-plan-view-boundary-polygon-loops.html#2">
Revit 2014 API</a>,

my

<a href="http://thebuildingcoder.typepad.com/blog/2013/05/my-cloud-based-2d-editor-implementation-status.html">
2D round-trip cloud-based Revit model editor</a>,

and, together with my colleague Steven Campbell, Revit Content Project Manager and our resident Revit family expert, on the <i>Key Concepts of the Family Editor</i>.</p>

<p>Steve demonstrates the basics and some advanced aspects of the manual creation of a Revit family, key concepts that you as a Revit add-in developer absolutely must be aware of.</p>

<p>I had the honour and pleasure of helping out by implementing some sample add-in commands that I am rather happy with, showing how to drive families and their instances programmatically in the Revit project environment.
We'll get to those in a moment.</p>

<p>Let's start out with Steve's presentations:</p>

<ul>
<li><a href="#2">Key family concepts</a></li>
<li><a href="#2b">Building your first parametric Revit family</a></li>
<li><a href="#3">Key family concepts slide deck bullets</a></li>
<li><a href="#3b">Building your first parametric Revit family slide deck bullets</a></li>
<li><a href="#4">Complete illustrated slide decks</a></li>
<li><a href="#5">Family API topics</a></li>
<!--
<li><a href="#5">Load family and place instances</a></li>
<li><a href="#6">Pick interaction and modify instances</a></li>
<li><a href="#7">Instance and symbol retrieval, nested type modification</a></li>
-->
</ul>

<p>Here are the two class descriptions, to define the context:</p>

<a name="2"></a>

<h4>1-4 &ndash; Key Concepts of the Family Editor &ndash; Steve Campbell (Стив Кэмпбелл)</h4>

<p>Mastering Revit family creation is a key to the success when using Revit.
The same is true for Revit programmers.
The use of Family API is largely analogous to the UI.
Creating a family without fully understanding how Revit families work may lead to a bumpy road later on with your tasks.
Knowing how much you can get through proper use of families opens infinite possibilities.
This session offers an effective opportunity to learn directly from the family content expert, covering the following topics:</p>

<ul>
<li>Best practices</li>
<li>Constraints &ndash; bone, muscle and skin analogy</li>
<li>Types versus instances</li>
<li>Family template selection</li>
</ul>


<a name="2b"></a>

<h4>1-5 &ndash; Building Your First Parametric Revit Family &ndash; Steve Campbell and Jeremy Tammik (Стив Кэмпбелл и Джереми Тэммик)</h4>

<p>This is the continuation of the basic class on the key concepts of the family editor, presenting the following topics:

<ul>
<li>Building your first parametric Revit family</li>
<li>Driving nested families</li>
<li>Programmatic use of families: place and modify instances, etc.</li>
</ul>


<p>To give you a rough idea of the presentation contents, here is quick run-down of the slide deck bullet points:</p>

<a name="3"></a>

<h4>Key Concepts of the Family Editor &ndash; Slide Deck Bullets</h4>


<h5>Families</h5>
<p>What is a family?</p>
<p>A family is a group of elements with a common set of properties, called parameters, constraints, and a related graphical representations.</p>
<h5>Types of Families:</h5>
<p>System vs. Standalone vs. In Place</p>
<p>System Families:</p>
<p>Typically assemblies that are constructed on the construction site</p>
<p>Wall, Floors, Roofs, Ceiling, with some exceptions...</p>
<p>They only exist in a project or template file.</p>
<p>Standalone or "Loadable" Families:</p>
<p>Typically are manufactured pieces that are delivered to the construction site ready to install. They are intended to be used across many projects. Example: Windows, Doors, Light Fixtures, etc…</p>
<p>They are individual .rfa files.</p>
<p>In Place Families:</p>
<p>Project unique, built on site items that is stored only in the project.</p>
<h5>Bone, Muscle and Skin:</h5>
<p>So what is the best, most reliable way to build a family?</p>
<p>Build with the Bone, Muscle and Skin method.</p>
<p>Why?</p>
<p>Highest level of constraint is a labeled dimension attached to a reference plane.</p>
<p>The Bones, Muscle and Skin method describes the family as:</p>
<p>Bones = Reference Planes & Reference Lines</p>
<p>Muscle = Dimension, Label Parameters, Automatic Sketch Dimensions</p>
<p>Skin = Solids/Voids and Symbolic Linework</p>

<p>Blog Post by Steve Stafford:

<a href="http://revitoped.blogspot.de/2009/04/family-editor-bones-muscle-skin.html">
The Family Editor: Bones, Muscle & Skin</a></p>

<h5>The Bones: Workplanes</h5>

<p>A work plane is a virtual 2-dimensional surface.</p>
<p>A work plane is used in the following ways:</p>
<ul>
<li>as the origin for a view</li>
<li>for sketching elements on</li>
<li>for placing work plane-based components on</li>
</ul>
<p>Reference planes are the bones of a family</p>
<ul>
<li>They are a defined infinite plane in space</li>
<li>They are intended to drive the geometric constraints</li>
</ul>
<p>They have the added capability of defining the origin in a family, dimensioning to a family in a project, control snapping behavior and provide the availability of instance based shape handles.</p>
<p>Reference Lines are 3D lines with a start and end point that contains 4 workplanes.</p>
<p>They were designed to specifically for driving angular constraints.</p>
<h5>The Muscles: Constraints and Parameters</h5>
<h5>Constraints</h5>
<p>Constraints are a method of limiting or restricting an elements movement.</p>
<p>4 Types of constraints in Revit</p>
<ul>
<li>Dimensions</li>
<li>Labeled Parameters</li>
<li>Automatic Sketch Dimensions</li>
<li>Pins</li>
</ul>
<p>Constraints don't have to be static, they can be driven by a parameter value. Additionally a parameter’s value can also be driven by a formula.</p>
<h5>Parameters:</h5>
<p>A Parameter is a setting that determines the appearance or behavior of an element, type, or view.</p>
<p>Parameters store and communicate information about all elements in a model. Parameters are used to define and modify elements, as well as to communicate model information in tags and schedules.</p>
<p>Parameter Types:</p>
<p>3 basic types:</p>
<p>System, Family and Shared parameters…</p>
<p>System Parameters:</p>
<p>Are built in parameters defined in the software, they can't be removed or renamed, but they do schedule.</p>
<p>Note: when the parameter is selected in the Family Types dialog modify button is greyed out.</p>
<p>Family Parameters:</p>
<p>Are user based parameters that don't schedule.</p>
<p>Shared Parameters:</p>
<p>Are user based parameter with a shared definition and GUID that do schedule. The definition is stored in a shared parameter file, so the parameter can be loaded into many families.</p>
<h5>Parameter Data:</h5>
<p>Type Based Parameters:</p>
<p>Predefined size typical that can be found in a manufactures catalog.</p>
<p>Instance Based Parameters:</p>
<p>Variable based user input parameters used on items the can come in any length, like a wide flange beam is manufactured to any length the structure engineer requires. In this case the length of the beam is instance based.</p>
<p>Reporting Parameter:</p>
<p>Instance based parameter that can extract a value from a generic condition. This type of parameter can only be a length or angle.</p>
<h5>The Skin: Elements</h5>
<p>There are 4 types of elements:</p>
<ul>
<li>Model</li>
<li>View specific</li>
<li>View element</li>
<li>Datum elements</li>
</ul>
<p>Model Elements: (available in all views)</p>
<ul>
<li>Solids and Voids</li>
<li>Extrusions, Blend, Revolve, Sweep and Swept Blend</li>
<li>Model Lines</li>
</ul>
<p>View Specific: (available in the views created in)</p>
<ul>
<li>Symbolic Lines</li>
<li>Detail Lines</li>
</ul>
<p>Each have element properties, for example:</p>
<p>Model Elements:</p>
<ul>
<li>Subcategory</li>
<li>Material</li>
<li>Visible</li>
<li>Visibility/Graphics</li>
</ul>
<p>These properties can be used to control how an element looks and is displayed, along with other properties of that element.</p>
<h5>Where do I start?</h5>
<h5>Family Templates:</h5>
<p>How do I decide which template to start from?</p>
<p>Don't select a template just based on the category, thinking about the functionality first will give you more options.</p>
<p>Functionality is not tied to the category but is tied to the template.</p>
<p>The category adds the family parameters, built in parameters and subcategories required for that category. Also this selection will effect how the family schedules.</p>
<p>Note: It does take some learning all the special cases in Revit.</p>
<p>Family Templates:</p>
<p>Decision tree</p>
<p>2D vs. 3D family?</p>
<p>2D &ndash; What is the use?</p>
<ul>
<li>Detail Item</li>
<li>Profile</li>
<li>Annotation</li>
<li>Titleblock</li>
</ul>
<p>3D &ndash; Does the family require specific functionality?</p>
<p>Yes &ndash; What is the special functionality for?</p>
<ul>
<li>Baluster</li>
<li>Structural Framing</li>
<li>Rebar</li>
<li>Pattern Based</li>
</ul>
<p>No &ndash; Does the family require a host?</p>
<p>Yes &ndash; Which host?</p>
<ul>
<li>Wall Based</li>
<li>Ceiling Based</li>
<li>Floor Based</li>
<li>Roof Based</li>
<li>Face Based</li>
</ul>
<p>No &ndash; Then chose from:</p>
<ul>
<li>Standalone (Level Based)</li>
<li>2 Level Based (Column)</li>
<li>Line Based</li>
<li>Adaptive</li>
</ul>
<p>Then choose a category.</p>
<p>Many of the family template are open to multiple categories giving you different functionality depending on your choices.</p>
<p>Example:</p>
<p>User wants to build an escalator</p>
<p>If they follow the category first, the user will have adjust the escalator height on placement and any time the floor to floor height changes.</p>
<p>If they follow the functionality first you can end up with a 2 level aware escalator that re-adjust its size automatically when the floor to floor height changes.</p>
<p>Template behaviors vs. category behaviors</p>
<p>Template have behaviors built in in relation to hosting, placement methods or even special editors</p>
<p>While categories have behaviors that are controlled by the settings in the Family Parameters under Family Category and Parameters dialog.</p>
<p>Changing the category changes the options available in the Family Parameters list. Some of the options include "Always Vertical", "Cut with Voids When Loaded" and "Shared"</p>
<p>Additionally setting the category changes the available built in sub-categories and parameters.</p>
<p>Visual example &ndash; Generic Model to Doors</p>
<h5>The Process:</h5>
<p>The “process” for building families is the most important aspect of family creation that one needs to learn.</p>
<h5>Process order:</h5>
<ol>
<li>Pick your template</li>
<li>Plan (Insertion Point, Parametric Origin, etc.)</li>
<li>Layout Reference Planes (add The Bones)</li>
<li>Add Parameters and Constraints (add The Muscles)</li>
<li>Add multiple host thickness types (for testing hosted families)</li>
<li>Add 2 or more types</li>
<li>Flex Types and Host (Testing Procedure)</li>
<li>Add a Single Level of Geometry ( add The Skin)</li>
<li>Repeat until you are satisfied with the results</li>
<li>Test in Project Environment (create testing project)</li>
</ol>
<h5>Tips for Success:</h5>
<p>A successful piece of content meets all the users needs for BIM.</p>
<p>Build not only for the user but how the information will be use along the whole BIM life cycle.</p>
<p>Ask yourself</p>
<ul>
<li>What is your use case? And how will it be used?</li>
<li>What is the proper level of detail and or level of development for this piece of content?</p></li>
</ul>
<p>Additionally try to meet all requirements for: </p>
<ul>
<li>Proper graphic representation in all view types.</li>
<li>Enough information provided to support the down stream applications.</li>
<li>Good parametrics for the expected use cases.</li>
<li>Good performance</li>
</ul>
<h5>Additional Topics:</h5>
<ul>
<li>Type Catalogs</li>
<li>Is Reference</li>
</ul>
<h5>Type Catalogs:</h5>
<p>Type Catalogs are an external group of types or catalog of a family in a delimited text format. Type catalog allow the user to selectively load a type from a long list.</p>
<p>The type catalog name must match the family name but with a .txt extension.</p>
<p>Tip:</p>
<p>The simplest way to create a type catalog is to export the current types by:</p>
<p>Click "R" &gt; Export &gt; (Family Types).</p>
<p>Open the file in a text editor and modify as needed.</p>
<pre>
,Manufacturer##other##,Length##length##centimeters,Width##length##centimeters, Height##length##centimeters
MA36x30,Revit,36.5,2.75,30
MA40x24,Revit,40.5,3.25,24
</pre>
<p>The first line defines the delimiter and the parameters in the type catalog.</p>
<p>The first character of the first line is the delimiter, in this case a comma ','.</p>
<p>The schema:</p>
<pre>
&lt;parameter name&gt;##&lt;parameter type&gt;##&lt;units&gt;,
</pre>
<p>The next lines are the catalog entries:</p>
<pre>
&lt;type name1&gt;,&lt;parameter1&gt;,&lt;parameter2&gt;,&lt;parameter3&gt;,&lt;parameter4&gt;
</pre>
<p>Parameter Declaration Table</p>
<h5>Is Reference:</h5>
<p>Reference planes have a property called “Is Reference”. By setting this property, you specify that the reference plane can be dimensioned or snapped to when you place a family into a project.</p>
<p>Additionally labeled instance parameters attached to reference planes with weak or strong “Is Reference” will allow shape handles for the user to control.</p>
<p>A “strong reference” has the highest priority for dimensioning and snapping.</p>
<p>For example, you create a window family and place it into a project. As you are placing the family, temporary dimensions snap to any strong references in the family. When you select the family in the project, temporary dimensions appear at the strong references. If you place a permanent dimension, the strong references in the window geometry highlight first. A strong reference takes precedence over a wall reference point (such as its centerline).</p>
<p>A “Weak reference” has the lowest priority for dimensioning and snapping. When you place the family into the project and dimension to it, you may need to press Tab to select a weak reference, as any strong references highlight first.</p>
<p>A “Not a reference” is not visible in the project environment so you cannot dimension or snap to those locations in a project.</p>
<p>All named “Is Reference”: Left, Right, Top… are considered strong references.</p>
<p>But the “Name” of the reference plane has no relation to the function of the “Is Reference” parameter.</p>



<a name="3b"></a>

<h4>Building Your First Parametric Revit Family &ndash; Slide Deck Bullets</h4>

<h5>Building Your First Parametric Revit Family</h5>

<p>What are we going to do in this class?</p>

<ol>
<li>Build a simple table</li>
<ul>
<li>Plan it first</li>
<li>Build the Bones, Muscles and Skin</li>
</ul>
<li>Drive Families from the API &ndash; Part 1</li>
<ul>
<li>Load</li>
<li>Place</li>
<li>Create new type</li>
<li>Select</li>
<li>Modify</li>
</ul>
<li>Discuss and show Nesting in the Family Editor</li>
<ul>
<li>Parameter Linking</li>
<li>Shared families</li>
<li>Show examples</li>
</ul>
<li>Drive Families from the API &ndash; Part 2</li>
<ul>
<li>Select all instances</li>
<li>Modify nested family type</li>
</ul>
</ol>

<h5>The Simple Table</h5>

<p>Planning questions to answer:</p>

<ol>
<li>Which template?</li>
<ul>
<li>M_Generic Model.rft</li>
</ul>

<li>Which category?</li>
<ul>
<li>Furniture</li>
</ul>

<li>Placement?</li>
<ul>
<li>Origin to be centered Front/Back and Left/Right, on the Level</li>
</ul>

<li>Parametrics?</li>
<ul>
<li>How to grow, equal Front/Back and Left/Right, up from Level</li>
</ul>

<li>Special behaviour?</li>
<ul>
<li>None</li>
</ul>

<li>Types to create?</li>
<ul>
<li>1500x650x720mm</li>
<li>800x800x760mm</li>
</ul>
</ol>

<h5>Process of building The Simple Table</h5>

<p>Build in levels of detail or complexity using the Bones, Muscle and Skin methodology.</p>

<p>Process (short version):</p>

<ul>
<li>Layout Reference Planes (The Bones)</li>
<li>Add Parameters and Constraints (The Muscles)</li>
<li>Flex Types and Host (Testing Procedure)</li>
<li>Add a Single Level of Geometry (The Skin)</li>
<li>Flex Types and Host (Testing Procedure)</li>
<li>Repeat for every level of detail or complexity</li>
<li>Test in project environment</li>
</ul>

<p>Order of Complexity:</p>

<ul>
<li>Table Top</li>
<li>Legs</li>
<li>Apron</li>
</ul>


<h5>Driving Families From API &ndash; Part 1</h5>

<p>Table family:</p>

<ul>
<li>Load family</li>
<li>Place instances</li>
<li>Create new type</li>
<li>Select instances</li>
<li>Modify instance symbol</li>
</ul>


<h5>Nesting</h5>

<p>Nesting enables the use of reusable parts in the family editor.</p>

<ul>
<li>The Parts can be driven from the host family.</li>
<li>They can schedule separately (with limitations).</li>
<li>They can be swappable.</li>
</ul>

<p>Example:</p>

<ul>
<li>A swappable panel door family that is fully parametric.</li>
<li>One family with 3 door panel families nested into the host.</li>
</ul>


<h5>Nesting Topics</h5>

<p>Parameter Linking:</p>

<ul>
<li>Parameters can be linked from the host family to the nested families.</li>
<li>Use the “Associate Family Parameter” button to link the 2 parameters.</li>
</ul>

<p>Shared Families:</p>

<ul>
<li>Allow a family to be scheduled in a project.</li>
<li>Limitation: Only instance based parameters can be linked.</li>
</ul>

<h5>Nesting Examples</h5>

<ul>
<li>Open Web Joist that the web resize and array based on the depth and length</li>
<li>Window grill pattern that can define number of spacing bars needed</li>
<li>Kitchen cabinets with swappable door and drawer fronts</li>
<li>Modular playground equipment</li>
</ul>


<h5>Driving Families From API &ndash; Part 2</h5>

<p>Kitchen cabinets:</p>

<ul>
<li>Multiple select all instances</li>
<li>Modify nested family type</li>
</ul>


<h5>Additional Resources</h5>

<ul>
<li>Blogs</li>
<ul>
<li><a href="http://thebuildingcoder.typepad.com">The Building Coder</a></li>
<li><a href="http://revitoped.blogspot.com">Revit OpEd &ndash; Steve Stafford</a></li>
<li><a href="http://do-u-revit.blogspot.com">do-u-revit.blogspot.com</a></li>
</ul>

<li>Newsgroups:</li>
<ul>
<li>AUGI &ndash; <a href="http://www.augi.com">www.augi.com</a></li>
<li><a href="http://www.revitforum.org/forum.php">www.revitforum.org/forum.php</a></li>
</ul>

<li>Books:</li>
<ul>
<li><a href="http://paulaubin.com">Paul Aubin</a></li>
</ul>
</ul>


<a name="4"></a>

<h4>Complete Slide Decks</h4>

<p>In order to provide the associated images, here are the complete illustrated

<a href="file:////a/j/adn/devcamp/2013/doc/1-4_key_family_concepts.pdf">Key Family Concepts</a> and

<a href="file:////a/j/adn/devcamp/2013/doc/1-5_5_parametric_family.pdf">Parametric Family</a> slide decks.</p>



<a name="5"></a>

<h4>Family API Topics</h4>

<p>Steve's presentations above cover the key family editor concepts from a user point of view.</p>

<p>How to make use of this functionality programmatically is a large important topic that has been frequently discussed here in the past, e.g. looking at:</p>

<ul>
<li><a href="http://thebuildingcoder.typepad.com/blog/2009/08/the-revit-family-api.html">The Revit Family API</a></li>
<li><a href="http://thebuildingcoder.typepad.com/blog/2011/06/creating-and-inserting-an-extrusion-family.html">Creating and inserting an extrusion family</a></li>
<li><a href="http://thebuildingcoder.typepad.com/blog/family">All family API related posts</a></li>
</ul>

<p>To supplement the existing blog posts and Steve's product usage presentation for add-in developers, we decided to add new improved demonstrations of the following fundamental programming concepts to this overview:</p>

<ol>
<li>Load family and place instances</li>
<li>Pick interaction and modify instances</li>
<li>Instance and symbol retrieval, nested type modification</li>
</ol>

<p>This is where it gets really interesting for you, I hope.</p>

<p>Here is a snapshot of the current fully functional state of my

<a href="file:////a/j/adn/devcamp/2013/zip/FamilyApi09.zip">FamilyApi</a> sample add-in

implementing the following three external commands providing a nice clean implementation of those concepts, plus an external application wrapper defining a compact user interface to access and launch them:</p>

<ol>
<li>CmdTableLoadPlace</li>
<li>CmdTableNewTypeModify</li>
<li>CmdKitchenUpdate</li>
</ol>

<p>The detailed explanation of these three commands is still forthcoming, hopefully tomorrow, so keep your eyes peeled.</p>

<!--
<p>I also plan to add an , and possibly clean up other details as well, e.g. implement a generic pre- and post-selection class based on the TableSelector used by CmdTableNewTypeModify.</p>
-->
