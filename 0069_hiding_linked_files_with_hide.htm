<style>
.blue { color: blue; }
.teal { color: teal; }
.maroon { color: maroon; }
.green { color: green; }
</style>

<h3>Hiding Imported Files</h3>

<p>

<a href="http://roddotnet.blogspot.com">Rod Howarth</a>

raised a question in the 

<a href="http://thebuildingcoder.typepad.com/blog/2008/12/linked-files.html">
discussion on linked files</a>:

</p>

<p><strong>Question:</strong> I'm trying to make a command to turn off the visibility of linked Revit and DWG models in the current view.</p>

<p>The intent is to turn off the visibility for all imported categories in the drawing, i.e. all imported CAD files. This would be like going to Visibility/Graphics > Imported Categories > Show imported categories in this view.</p>

<p>Is there an easy way to do this, or am I going to have to loop over each element, checking if its symbol's name ends in '.dwg' or '.rvt' or is there a certain thing I can look for, i.e. something that tells me its an imported category, instead of just going by the name?</p>

<p>For DWG, I simply loop through the document settings categories and make each category whose name ends with ".dwg" invisible in the current view.</p>

<p>However, this does not work for RVT, so I had a look with RvtMgdDbg, and it says that my linked file on the plan is part of the OST_Rvtlinks built-in category.</p>

<p>So I changed my code to do:</p>

<pre>
Document doc = app.ActiveDocument;
Categories categories = doc.Settings.Categories;

// get category for linked files
Category linkedRevitCat 
  = categories.get_Item(
    BuiltInCategory.OST_RvtLinks );

// loop through all categories in document
foreach( Category c in categories ) 
{
  // if they end with dwg or rvt set 
  // them as !curvisibility in current view
  if (c.Name.ToLower().EndsWith(".dwg") 
    || c.Name.ToLower().Contains(".rvt") 
    || c.Name.ToLower().EndsWith(".dwf")
    || c.Name.ToLower().EndsWith(".dxf") 
    || c.Name.ToLower().EndsWith(".dwfx") 
    || (linkedRevitCat != null 
      && c.Id.Equals( linkedRevitCat.Id )) )
  {
    //set visibility to be opposite of what they are now
    doc.ActiveView.setVisibility( c, 
      !c.get_Visible( doc.ActiveView ) );
  }
}
</pre>

<p>Unfortunately, linkedRevitCat always is null, and when I run the elements filter API sample, OST_RvtLinks doesn't come up as a category list?</p>

<p><strong>Answer:</strong>
First of all, thank you Rod for the interesting question and for pointing out the positive information on how simple it is to hide the linked DWG files.</p>

<p>Joe Ye discovered the following built-in category behaviour: 
There is no easy way to filter out those imported categories quickly.
I found one hint that can make your add-in quicker, though:</p>

<ul>
<li>For the built-in categories, the element id is always negative.</li>
<li>For imported ones, which are created after the DWG is imported, the element id is positive.</li>
</ul>

<p>Using this rule, it is no longer necessary to extract the substring and perform a string comparison for built-in categories.</p>

<p>Phil Xia responded to the question on the OST_RvtLinks built-in category: 
Indeed we cannot retrieve the OST_RvtLinks built-in category from the document settings categories. 
We can get it from the element category property, however:</p>

<pre>
  ElementIterator i = doc.Elements;
  Element e = null;
  while( i.MoveNext() )
  {
    e = i.Current as Element;
    if( e.Name.Contains(".rvt") 
      && e.Category != null 
      && e.Category.Id == BuiltInCategory.OST_RvtLinks )
    {
      break;
    }
  }
</pre>

<p>We cannot hide the RVT link element via the View.SetVisibility method like we do for the DWG link element.
All the RVT link elements return the same category OST_Rvtlinks, so we cannot control the visibility for individual ones using this method.</p>

<p>In theory, there is a another possible approach:
We have added some methods to hide and unhide individual elements in the Revit 2009 web update 2:</p>

<ul>
<li>void View.Hide( ElementSet );</li>
<li>void View.Unhide( ElementSet );</li>
<li>bool Element.IsHidden( View );</li>
<li>bool Element.CanBeHidden( View );</li>
</ul>

<p>But these still do not hide the Revit link instances, which may be a problem in the API. 
They can be hidden through the user interface.</p>

<pre>
Instance rvtLinkInst = . . . // retrieve revit link instance
bool canHidden = rvtLInkInst.CanBeHidden( view ); // this always returns false
elems.Insert( rvtLinkInst ); // insert instance into element set
view.Hide( elems ); // this throws an exception
</pre>

<p>I hope thes various hints are of some use and will be interested in hearing whether they help resolve your issue, Rod.</p>