<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="bc.css">
</head>

<!--

#revitapi #adsk #bim #adskdevnetwrk

akn_include

-->


<h3>Transferring a Wall Type</h3>

<p>Let's look at transferring a wall type from one document to another.</p>

<p>In fact, we already did so, way back in 2011, as an example about how to possibly approach the task of at least partially programmatically <a href="http://thebuildingcoder.typepad.com/blog/2011/09/transfer-project-standards.html">transferring project standards</a>.</p>

<p>Now Parley submitted a <a href="http://thebuildingcoder.typepad.com/blog/2011/09/transfer-project-standards.html?cid=6a00e553e16897883301bb08275f46970d#comment-6a00e553e16897883301bb08275f46970d">comment</a> on that, saying:</p>

<p><strong>Question:</strong> We could still really use this...
This post originally was from 2011.
Any update on API access for this tool?</p>

<p><strong>Answer:</strong> Glad to hear it sounds useful to you.</p>

<p>Well, nothing that I present here is really a tool, just sample source code for you to create your own tools from.</p>

<p>This should be pretty straightforward to migrate to Revit 2016, though.</p>

<p>On second thoughts, looking more closely at the text, I notice that I included the code above in The Building Coder samples as an external command CmdCopyWallType.</p>

<p>Therefore, it has been continually migrated every year, and the Revit 2015 version is provided in
<a href="https://github.com/jeremytammik/the_building_coder_samples">The Building Coder samples GitHub repository</a>.</p>

<p>The code for the <a href="https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdCopyWallType.cs">external command CmdCopyWallType</a> is available there, already migrated to Revit 2015, and all the intervening versions as well.</p>

<p>As an added bonus, though, I went and tested the command for you.</p>

<p>I discovered that the transaction was not nicely encapsulated in a using statement, as it should be, so I fixed that.</p>

<p>I also discovered that a bug was introduced during the migration from Revit 2013 to 2014.
Apparently, this command was never tested in Revit 2014 and the error remained undetected ever since.
So I fixed that as well.</p>

<p>The Revit 2015 implementation now looks like this:</p>

<pre class="code">
[<span class="teal">Transaction</span>( <span class="teal">TransactionMode</span>.Manual )]
<span class="blue">class</span> <span class="teal">CmdCopyWallType</span> : <span class="teal">IExternalCommand</span>
{
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;summary&gt;</span>
&nbsp; <span class="gray">///</span><span class="green"> Source project to copy system type from.</span>
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;/summary&gt;</span>
&nbsp; <span class="blue">const</span> <span class="blue">string</span> _source_project_path
&nbsp; &nbsp; = <span class="maroon">&quot;Z:/a/case/sfdc/06676034/test/NewWallType.rvt&quot;</span>;
&nbsp;
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;summary&gt;</span>
&nbsp; <span class="gray">///</span><span class="green"> Source wall type name to copy.</span>
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;/summary&gt;</span>
&nbsp; <span class="blue">const</span> <span class="blue">string</span> _wall_type_name = <span class="maroon">&quot;NewWallType&quot;</span>;
&nbsp;
&nbsp; <span class="blue">public</span> <span class="teal">Result</span> Execute(
&nbsp; &nbsp; <span class="teal">ExternalCommandData</span> commandData,
&nbsp; &nbsp; <span class="blue">ref</span> <span class="blue">string</span> message,
&nbsp; &nbsp; <span class="teal">ElementSet</span> elements )
&nbsp; {
&nbsp; &nbsp; <span class="teal">UIApplication</span> uiapp = commandData.Application;
&nbsp; &nbsp; <span class="teal">UIDocument</span> uidoc = uiapp.ActiveUIDocument;
&nbsp; &nbsp; <span class="teal">Application</span> app = uiapp.Application;
&nbsp; &nbsp; <span class="teal">Document</span> doc = uidoc.Document;
&nbsp;
&nbsp; &nbsp; <span class="green">// Open source project</span>
&nbsp;
&nbsp; &nbsp; <span class="teal">Document</span> docHasFamily = app.OpenDocumentFile(
&nbsp; &nbsp; &nbsp; _source_project_path );
&nbsp;
&nbsp; &nbsp; <span class="green">// Find system family to copy, e.g. using a named wall type</span>
&nbsp;
&nbsp; &nbsp; <span class="teal">WallType</span> wallType = <span class="blue">null</span>;
&nbsp;
&nbsp; &nbsp; <span class="teal">FilteredElementCollector</span> wallTypes
&nbsp; &nbsp; &nbsp; = <span class="blue">new</span> <span class="teal">FilteredElementCollector</span>( docHasFamily ) <span class="green">// 2014</span>
&nbsp; &nbsp; &nbsp; &nbsp; .OfClass( <span class="blue">typeof</span>( <span class="teal">WallType</span> ) );
&nbsp;
&nbsp; &nbsp; <span class="blue">int</span> i = 0;
&nbsp;
&nbsp; &nbsp; <span class="blue">foreach</span>( <span class="teal">WallType</span> wt <span class="blue">in</span> wallTypes )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">string</span> name = wt.Name;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;&nbsp; {0} {1}&quot;</span>, ++i, name );
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( name.Equals( _wall_type_name ) )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; wallType = wt;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">break</span>;
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">if</span>( <span class="blue">null</span> == wallType )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; message = <span class="blue">string</span>.Format(
&nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;Cannot find source wall type '{0}'&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; + <span class="maroon">&quot; in source document '{1}'. &quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; _wall_type_name, _source_project_path );
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">return</span> <span class="teal">Result</span>.Failed;
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="green">// Create a new wall type in current document</span>
&nbsp;
&nbsp; &nbsp; <span class="blue">using</span>( <span class="teal">Transaction</span> t = <span class="blue">new</span> <span class="teal">Transaction</span>( doc ) )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; t.Start( <span class="maroon">&quot;Transfer Wall Type&quot;</span> );
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="teal">WallType</span> newWallType = <span class="blue">null</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; wallTypes = <span class="blue">new</span> <span class="teal">FilteredElementCollector</span>( doc )
&nbsp; &nbsp; &nbsp; &nbsp; .OfClass( <span class="blue">typeof</span>( <span class="teal">WallType</span> ) ); <span class="green">// 2014</span>
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">foreach</span>( <span class="teal">WallType</span> wt <span class="blue">in</span> wallTypes )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( wt.Kind == wallType.Kind )
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newWallType = wt.Duplicate( _wall_type_name )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">as</span> <span class="teal">WallType</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="blue">string</span>.Format(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;New wall type '{0}' created.&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _wall_type_name ) );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">break</span>;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="green">// Assign parameter values from source wall type:</span>
&nbsp;
<span class="blue">#if</span> COPY_INDIVIDUAL_PARAMETER_VALUE
<span class="gray">&nbsp; &nbsp; // Example: individually copy the &quot;Function&quot; parameter value:</span>
&nbsp;
<span class="gray">&nbsp; &nbsp; BuiltInParameter bip = BuiltInParameter.FUNCTION_PARAM;</span>
<span class="gray">&nbsp; &nbsp; string function = wallType.get_Parameter( bip ).AsString();</span>
<span class="gray">&nbsp; &nbsp; Parameter p = newWallType.get_Parameter( bip );</span>
<span class="gray">&nbsp; &nbsp; p.Set( function );</span>
<span class="blue">#endif</span> <span class="green">// COPY_INDIVIDUAL_PARAMETER_VALUE</span>
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="teal">Parameter</span> p = <span class="blue">null</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">foreach</span>( <span class="teal">Parameter</span> p2 <span class="blue">in</span> newWallType.Parameters )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Definition</span> d = p2.Definition;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( p2.IsReadOnly )
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="blue">string</span>.Format(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;Parameter '{0}' is read-only.&quot;</span>, d.Name ) );
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p = wallType.get_Parameter( d );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( <span class="blue">null</span> == p )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="blue">string</span>.Format(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;Parameter '{0}' not found on source wall type.&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; d.Name ) );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( p.StorageType == <span class="teal">StorageType</span>.ElementId )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// Here you have to find the corresponding</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// element in the target document.</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="blue">string</span>.Format(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;Parameter '{0}' is an element id.&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; d.Name ) );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( p.StorageType == <span class="teal">StorageType</span>.Double )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p2.Set( p.AsDouble() );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">else</span> <span class="blue">if</span>( p.StorageType == <span class="teal">StorageType</span>.String )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p2.Set( p.AsString() );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">else</span> <span class="blue">if</span>( p.StorageType == <span class="teal">StorageType</span>.Integer )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p2.Set( p.AsInteger() );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="blue">string</span>.Format(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;Parameter '{0}' copied.&quot;</span>, d.Name ) );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// Note:</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// If a shared parameter parameter is attached,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// you need to create the shared parameter first,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// then copy the parameter value.</span>
&nbsp; &nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="green">// If the system family type has some other properties,</span>
&nbsp; &nbsp; &nbsp; <span class="green">// you need to copy them as well here. Reflection can</span>
&nbsp; &nbsp; &nbsp; <span class="green">// be used to determine the available properties.</span>
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="teal">MemberInfo</span>[] memberInfos = newWallType.GetType()
&nbsp; &nbsp; &nbsp; &nbsp; .GetMembers( <span class="teal">BindingFlags</span>.GetProperty );
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">foreach</span>( <span class="teal">MemberInfo</span> m <span class="blue">in</span> memberInfos )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// Copy the writable property values here.</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// As there are no property writable for</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="green">// Walltype, I ignore this process here.</span>
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; t.Commit();
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="blue">return</span> <span class="teal">Result</span>.Succeeded;
&nbsp; }
}
</pre>

<p>The updated version of The Building Code samples is
<a href="https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.120.10">
release 2015.0.120.10</a>.</p>

<p>So there you are.</p>

<p>Have fun!</p>

<p><strong>Addendum:</strong> As Matt Taylor kindly points out below, the Revit 2014 API introduced the powerful
<a href="http://thebuildingcoder.typepad.com/blog/2013/05/copy-and-paste-api-applications-and-modeless-assertion.html">
copy and paste API</a>,
which can be used to easily implement a more complete solution that the one presented above.</p>
