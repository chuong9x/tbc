<style>
.blue { color: blue; }
.teal { color: teal; }
.maroon { color: maroon; }
.green { color: green; }
</style>

<h3>Room and Wall Adjacency</h3>

<p><strong>Question:</strong>
How can I obtain the part of a wall that touches a room, especially its face area?
The wall can be adjacent to more than one room.</p>

<p><strong>Answer:</strong>
You will probably find the Room object's Boundary property useful.
It returns the boundary of the room in a BoundarySegmentArrayArray object, i.e. an array of boundaries or loops.
A room may have more than one boundary loop if its floor surface contains holes, which is why this returns an array of arrays.
Each boundary consists of a BoundarySegmentArray item, which is a list of BoundarySegment elements.
Each such element represents a segment of a room boundary and has a property Element, which provides access to the element that is responsible for producing this boundary segment.
That means that from the room, you can figure out what part of its boundary is generated by which wall.
If you then go to each of these bounding walls, you can ask it for further information to discover the surface area that it generates adjacent to the given room.</p>

<p>The use and analysis of the Room Boundary property is demonstrated by the RoomViewer SDK sample.</p>

<p>I implemented a new external command class CmdRoomWallAdjacency to demonstrate the principle.
It analyses the currently selected rooms in the model, or all rooms if none have been selected.
For each room, it iterates over all its boundary segments and lists the bounding elements and their adjacent length, i.e. the length of the curve that they generate which forms part of the room boundary.
This may well be less than the total length of the element.
For all wall elements, its total length and its total area are also listed.
The total area of a wall is queried from the built-in parameter HOST_AREA_COMPUTED, as discussed in our early post on

<a href="http://thebuildingcoder.typepad.com/blog/2008/09/selecting-all-w.html">
selecting all walls</a>.</p>

<p>We have already discussed more complex ways of calculating areas for

<a href="http://thebuildingcoder.typepad.com/blog/2008/12/2d-polygon-areas-and-outer-loop.html">
2D</a>

and

<a href="http://thebuildingcoder.typepad.com/blog/2008/12/3d-polygon-areas.html">
3D</a>

polygons and their

<a href="http://thebuildingcoder.typepad.com/blog/2008/12/polygon-transformation.html">
transformations</a>

directly from the underlying wall geometry, instead of relying on the black box result provided by the built-in parameter.

The

<a href="http://thebuildingcoder.typepad.com/blog/2009/01/plantopology-class.html">
plan topology</a>

object provided by the Revit API may also be useful in this context.</p>

<p>Here is the implementation of the command mainline:</p>

<pre class="code">
<span class="teal">Application</span> app = commandData.Application;
<span class="teal">Document</span> doc = app.ActiveDocument;
&nbsp;
<span class="teal">List</span>&lt;<span class="teal">Element</span>&gt; rooms = <span class="blue">new</span> <span class="teal">List</span>&lt;<span class="teal">Element</span>&gt;();
<span class="blue">if</span>( !<span class="teal">Util</span>.GetSelectedElementsOrAll(
&nbsp; rooms, doc, <span class="blue">typeof</span>( <span class="teal">Room</span> ) ) )
{
&nbsp; <span class="teal">Selection</span> sel = doc.Selection;
&nbsp; message = ( 0 &lt; sel.Elements.Size )
&nbsp; &nbsp; ? <span class="maroon">"Please select some room elements."</span>
&nbsp; &nbsp; : <span class="maroon">"No room elements found."</span>;
&nbsp; <span class="blue">return</span> <span class="teal">CmdResult</span>.Failed;
}
<span class="blue">foreach</span>( <span class="teal">Room</span> room <span class="blue">in</span> rooms )
{
&nbsp; DetermineAdjacentElementLengthsAndWallAreas(
&nbsp; &nbsp; room );
}
<span class="blue">return</span> <span class="teal">CmdResult</span>.Failed;
</pre>

<p>It retrieves the currently selected rooms in the model, or all rooms if none have been selected, using the utility method GetSelectedElementsOrAll, and then iterates over each wall, applying the worker method DetermineAdjacentElementLengthsAndWallAreas to it.
Here is the implementation of the worker method:</p>

<pre class="code">
<span class="blue">void</span> DetermineAdjacentElementLengthsAndWallAreas(
&nbsp; <span class="teal">Room</span> room )
{
&nbsp; <span class="teal">BoundarySegmentArrayArray</span> boundaries
&nbsp; &nbsp; = room.Boundary;
&nbsp;
&nbsp; <span class="blue">int</span> n = boundaries.Size;
&nbsp;
&nbsp; <span class="teal">Debug</span>.Print(
&nbsp; &nbsp; <span class="maroon">"{0} has {1} boundar{2}{3}"</span>,
&nbsp; &nbsp; <span class="teal">Util</span>.ElementDescription( room ),
&nbsp; &nbsp; n, <span class="teal">Util</span>.PluralSuffixY( n ),
&nbsp; &nbsp; <span class="teal">Util</span>.DotOrColon( n ) );
&nbsp;
&nbsp; <span class="blue">int</span> iBoundary = 0, iSegment;
&nbsp;
&nbsp; <span class="blue">foreach</span>( <span class="teal">BoundarySegmentArray</span> b <span class="blue">in</span> boundaries )
&nbsp; {
&nbsp; &nbsp; ++iBoundary;
&nbsp; &nbsp; iSegment = 0;
&nbsp; &nbsp; <span class="blue">foreach</span>( <span class="teal">BoundarySegment</span> s <span class="blue">in</span> b )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; ++iSegment;
&nbsp; &nbsp; &nbsp; <span class="teal">Element</span> neighbour = s.Element;
&nbsp; &nbsp; &nbsp; <span class="teal">Curve</span> curve = s.Curve;
&nbsp; &nbsp; &nbsp; <span class="blue">double</span> length = curve.Length;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print(
&nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">"&nbsp; Neighbour {0}:{1} {2} has {3}"</span>
&nbsp; &nbsp; &nbsp; &nbsp; + <span class="maroon">" feet adjacent to room."</span>,
&nbsp; &nbsp; &nbsp; &nbsp; iBoundary, iSegment,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Util</span>.ElementDescription( neighbour ),
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Util</span>.RealString( length ) );
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( neighbour <span class="blue">is</span> <span class="teal">Wall</span> )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Wall</span> wall = neighbour <span class="blue">as</span> <span class="teal">Wall</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Parameter</span> p = wall.get_Parameter(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">BuiltInParameter</span>.HOST_AREA_COMPUTED );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">double</span> area = p.AsDouble();
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">LocationCurve</span> lc
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = wall.Location <span class="blue">as</span> <span class="teal">LocationCurve</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">double</span> wallLength = lc.Curve.Length;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">"&nbsp; &nbsp; This wall has a total length"</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + <span class="maroon">" and area of {0} feet and {1}"</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + <span class="maroon">" square feet."</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Util</span>.RealString( wallLength ),
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Util</span>.RealString( area ) );
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; }
}
</pre>

<p>It retrieves the room boundaries, prints a report on their number and the room identity, iterates over the boundaries and their segments, and checks each segment for the adjacent generating elements.
If the neighbouring element is a wall, its total length and area are also listed.</p>

<p>Here is the result of running this command on a simple square house containing one single room:</p>

<pre>
Rooms <127284 Room 1> has 1 boundary:
  Neighbour 1:1 Walls <127248 Generic - 200mm> has 22.31 feet adjacent to room.
    This wall has a total length and area of 22.97 feet and 283.65 square feet.
  Neighbour 1:2 Walls <127249 Generic - 200mm> has 12.47 feet adjacent to room.
    This wall has a total length and area of 13.12 feet and 172.22 square feet.
  Neighbour 1:3 Walls <127250 Generic - 200mm> has 22.31 feet adjacent to room.
    This wall has a total length and area of 22.97 feet and 301.39 square feet.
  Neighbour 1:4 Walls <127251 Generic - 200mm> has 12.47 feet adjacent to room.
    This wall has a total length and area of 13.12 feet and 163.61 square feet.
</pre>

<p>The reason for the varying surfaces reported for the walls is due to the way their connections and intersections in the corners of the house have been generated by Revit.</p>

<p>Here is the output when a room is bounded by some walls that extend out beyond the room, so that only part of them are actually adjacent to it:</p>

<pre>
Rooms <128358 Room 2> has 1 boundary:
  Neighbour 1:1 Walls <128146 Generic - 200mm> has 5.91 feet adjacent to room.
    This wall has a total length and area of 42.65 feet and 1119.45 square feet.
  Neighbour 1:2 Walls <128348 Generic - 200mm> has 4.27 feet adjacent to room.
    This wall has a total length and area of 4.92 feet and 111.94 square feet.
  Neighbour 1:3 Walls <128302 Generic - 200mm> has 5.91 feet adjacent to room.
    This wall has a total length and area of 19.69 feet and 499.45 square feet.
  Neighbour 1:4 Walls <128256 Generic - 200mm> has 4.27 feet adjacent to room.
    This wall has a total length and area of 9.84 feet and 241.11 square feet.
</pre>

<p>As you can see, the room boundary curve only reports the adjacent length, whereas the total wall length for some of the walls is much larger.</p>

<p>To determine the adjacent surface area is trivial if the wall has a constant height, since in that case it is a constant factor multiplied by the wall length. If the height varies, it becomes more complex.</p>

<p>Many thanks to Massimiliano Revelli of 

<a href="http://www.infosys.it">
Informatica System srl</a>

for raising this issue.</p>
