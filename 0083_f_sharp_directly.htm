<style>
.blue { color: blue; }
.teal { color: teal; }
.maroon { color: maroon; }
.green { color: green; }
</style>

<h3>Use F# Directly in Revit</h3>

<p>Still struggling to load a native F# module directly as a Revit add-in?
Ralf Huvendiek had a quick look at this issue and created all three different flavours of external commands implemented in F# that can be called directly as external Revit tools:</p>

<ol type="1">
<li>Defined in a namespace.</li>
<li>Defined in a module.</li>
<li>Defined in a module within a namespace.</li>
</ol>

<p>The problem I had when 

<a href="http://thebuildingcoder.typepad.com/blog/2009/01/hello-f-via-c.html">
calling F# via C#</a>

is caused by the line specifying 'module BuildingCoder', which generates the strange class names.
But even those strange names can be entered and will work in the Revit.ini file.</p>

<p>The decorated name defined for the Execute method in the derived class by adding the interface prefix to it is also no problem.
Apparently, the CLR ignores the name and uses some other method, maybe a position within a table, to determine what method to look up and call.</p>

<p>Here is Ralf's implementation of the three external command classes and their Execute methods;
please watch out for the overly long lines in the F# source code ... you may have to copy and paste to an editor to see the full text:<p>

<h4>Namespace</h4>

<pre class="code">
<span class="blue">#light</span>

<span class="blue">namespace</span> RevitAddin

<span class="blue">open</span> Autodesk.Revit

<span class="blue">type</span> RevitAddin() =
  <span class="blue">interface</span> Autodesk.Revit.IExternalCommand <span class="blue">with</span>
    <span class="blue">member public</span> this.Execute( cData, strMessage : string byref, aElements ) =
      strMessage <- "Hello world from RevitAddin.RevitAddin"
      Autodesk.Revit.IExternalCommand.Result.Failed
</pre>

<h4>Module</h4>

<pre class="code">
<span class="blue">#light</span>

<span class="blue">module</span> RevitAddinModule

<span class="blue">type</span> RevitAddin() =
  <span class="blue">interface</span> Autodesk.Revit.IExternalCommand <span class="blue">with</span>
    <span class="blue">member public</span> this.Execute( cData, strMessage : string byref, aElements ) =
      strMessage <- "Hello world from RevitAddinModule.RevitAddin"
      Autodesk.Revit.IExternalCommand.Result.Failed
</pre>

<h4>Module within Namespace</h4>

<pre class="code">
<span class="blue">#light</span>

<span class="blue">namespace</span> RevitAddin

<span class="blue">module</span> RevitAddinModule

<span class="blue">type</span> RevitAddin() =
  <span class="blue">interface</span> Autodesk.Revit.IExternalCommand <span class="blue">with</span>
    <span class="blue">member public</span> this.Execute( cData, strMessage : string byref, aElements ) =
      strMessage <- "Hello world from RevitAddin.RevitAddinModule.RevitAddin"
      Autodesk.Revit.IExternalCommand.Result.Failed
</pre>

<p>The corresponding Revit.ini entries for loading the three external commands thus defined look like this:</p>

<pre>
[ExternalCommands]
ECCount=3

ECName1=F# 1
ECDescription1=F# in namespace
ECAssembly1=...\RevitAddin.dll
ECClassName1=RevitAddin.RevitAddin

ECName2=F# 2
ECDescription2=F# in module
ECAssembly2=...\RevitAddin.dll
ECClassName2=RevitAddinModule+RevitAddin

ECName3=F# 3
ECDescription3=F# in namespace and module
ECAssembly3=...\RevitAddin.dll
ECClassName3=RevitAddin.RevitAddinModule+RevitAddin
</pre>

<p>The three dots need to be replaced by the full path name of your assembly.</p>

<p>Here is the complete Visual Studio 2008 F# solution

<a href="zip/FsRevitAddin.zip">
FsRevitAddin.zip</a>.

<p>So nothing more to stop you from checking out this exciting new functional language and creating a Revit-based entry for 

<a href="http://thebuildingcoder.typepad.com/blog/2009/01/f-contest.html">
Kean's F# programming contest</a>.

<p>Several people asked how I retrieved the full class name including namespace prefix from 

<a href="http://thebuildingcoder.typepad.com/blog/2008/10/converting-between-vb-and-c-and-net-decompilation.html">
Reflector</a>.

In my installation, the full name of the declaring type is listed in the bottom panel when you select a class or method:</p>

<img src="img/reflector_full_class_name.png" alt="Reflector displaying the full class name"/>

<h4>3DS Max, Maya and MotionBuilder Training</h4>

<p>Rendering is another topic of interest to some Revit developers, so please note that the Media and Entertainment team are inviting all interested parties to a series of free online trainings to

<a href="http://through-the-interface.typepad.com/through_the_interface/2009/01/free-online-training-learn-3ds-max-maya-or-motionbuilder-apis-in-just-one-hour-a-day.html">
learn 3ds Max, Maya or MotionBuilder APIs in just one hour a day</a>

during the March, April and May time frame.</p>

<h4>Lunedi Sera in Verona</h4>

<p>Last night was very enjoyable 
... I took a yoga class with Marco in the Scuola Massalungo, opposite the faculty of economy in the Zona Universit&aacute;, then had an enjoyable meal in the eminently recommendable Osteria al Duca in Via Arche Scaligere 2, where I met Mauro Neri and had my 'realest' Italian conversation so far, for a couple of hours 
... perfect preparation for the first Revit API introduction in Italiano today.</p>
