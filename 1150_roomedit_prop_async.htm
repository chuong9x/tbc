<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="bc.css">
<script src="http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js"></script>
</head>

<!--

-->

<h3>Room Editor Element Properties and the Async Trap</h3>

<p>I made significant progress with my Tech Summit preparations, in spite of trying to "dance at many weddings", as the Germans say, i.e. juggle too many balls at once, what with new technologies, meetups, hackathons, AU preparations, support cases, email requests, blogging and all the normal everyday admin work that we are all confronted with.</p>

<p>I originally had plans for three main enhancements of the room editor:</p>

<ol>
<li>Display sheet, views and floor plan geometry</li>
<ul>
<li>Revit add-in part implemented, web part aborted</li>
</ul>
<li>Improve the 2D graphical editing</li>
<ul>
<li>Integrated Raphaël.FreeTransform module</li>
<li>Removed it because it ignores SVG view box transformation</li>
</ul>
<li>Store, edit and update non-graphical property data</li>
</ol>

<p><strong>1.</strong> I implemented the Revit add-in part to determine and display the nested

<a href="http://thebuildingcoder.typepad.com/blog/2014/04/determining-the-size-and-location-of-viewports-on-a-sheet.html">size and location of viewports on a sheet</a> and the

<a href="http://thebuildingcoder.typepad.com/blog/2014/04/revit-as-a-service-and-sheet-view-transform.html">
sheet-view-element transforms</a> to

generate simplified floor plan geometry in a preview window, and also added the code to upload and store all the required information for that in the cloud database.</p>

<p>Displaying and editing it in the HTML, SVG and JavaScript-implemented browser view, however, turned out to be too much work for too little value, so I aborted that part.</p>

<p><strong>2.</strong> I integrated the

<a href="https://github.com/ElbertF/Raphael.FreeTransform">Raphaël.FreeTransform</a> module

supporting grip editing of the parts, to replace my rather clunky 'rotate' and 'rotate counter-clockwise' buttons.</p>

<p>However, that module does not work reliably together with the SVG ViewBox functionality that I use to transform the paper coordinates, so I gave that up as well rather than complicating things yet more.</p>

<p><strong>3.</strong> Finally, we get to the storage, editing and updating of non-graphical property data.</p>

<p>That is complete now.</p>

<p>To round it off, let me mention the last stumbling block I encountered and solved, a significant hiccup concerning <a href="#2">async callback function execution</a> demonstrating a typical experience that everyone working with web interfaces and asynchronous calls needs to run into now and again.</p>

<p>The current complete solution is available for <a href="#3">download</a> from GitHub.</p>



<a name="2"></a>

<h4>Falling into the Async Trap Again</h4>

<p>One of the things I struggled with in my initial roomedit implementation last year was the asynchronous response to database queries.</p>

<p>The solution I ended up with was to implement cascading response handlers: submit the second query within the function handling the response to the first, and so on.</p>

<p>I fell into the same trap now again.</p>

<p>I implemented the following function save_doc to store a modified document:</p>

<pre class="prettyprint">
// save a furniture document

function save_doc(fdoc) {
  if( fdoc.hasOwnProperty('loop') ) {
    delete fdoc.loop;
  }
  db.saveDoc( fdoc,
    function (err, data) {
      if (err) {
        alert(err);
      }
    }
  );
}
</pre>

<p>It is called from this helper method that retrieves modified element properties from a form, updates and saves the document, and then sets a new window location, back to where we came from:</p>

<pre class="prettyprint">
// save modified element properties

function save_properties(fdoc,do_save) {
  if(do_save) {
    var a = fdoc.properties;
    var keys = jt_get_keys( a );
    var n = keys.length;
    var modified_count = 0;
    for( var i=0; i&lt;n; ++i ) {
      var key = keys[i];
      var val = a[key];
      var key_id = unspace(key);
      if( 'w' == val[0] ) {
        var w = $('#' + key_id);
        var val2 = w.val();
        if( val2 != val.slice(2) ) {
          ++modified_count;
          fdoc.properties[key] = 'w ' + val2;
        }
      }
    }
    if( 0 &lt; modified_count ) {
      save_doc(fdoc);
    }
  }
  var rid = fdoc.roomId;
  window.location.href = url + '?roomid=' + rid;
}
</pre>

<p>This implementation worked fine when testing on a local database on the mac, but not on Windows.</p>

<p>I even saw an error message flash up sometimes, with no possibility to pause it to read the message or otherwise track it down.</p>

<p>After some debugging on both systems, using both Firefox and Chrome, I suddenly realised what the problem was.</p>

<p>If save_doc is called, an asynchronous new thread to store the modified document via a RESTful database call is launched.
Setting the window location href property immediately afterwards interferes with that process.</p>

<p>The situation obviously only appears if some property is modified and the save_doc function is called.</p>

<p>Here is the updated implementation resolving the problem, by setting the window location within the database response handler if that path is taken, and in the main thread (as before) otherwise:</p>

<pre class="prettyprint">
// save modified element properties

function save_properties(fdoc,do_save) {
  var modified_count = 0;
  var url_room = url + '?roomid=' + fdoc.roomId;

  if(do_save) {
    var a = fdoc.properties;
    var keys = jt_get_keys( a );
    var n = keys.length;
    for( var i=0; i&lt;n; ++i ) {
      var key = keys[i];
      var val = a[key];
      var key_id = unspace(key);
      if( 'w' == val[0] ) {
        var w = $('#' + key_id);
        var val2 = w.val(); // equals w.attr('value');
        if( val2 != val.slice(2) ) {
          ++modified_count;
          fdoc.properties[key] = 'w ' + val2;
        }
      }
    }
    if( 0 &lt; modified_count ) {
      if( fdoc.hasOwnProperty('loop') ) {
        delete fdoc.loop;
      }
      db.saveDoc( fdoc,
        function (err, data) {
          if (err) {
            console.log(err);
            alert(JSON.stringify(err));
          }
          window.location.href = url_room;
        }
      );
    }
  }
  // bad boy!
  // cannot execute anything important here,
  // because that will interfere with the async
  // callback function execution in save_doc.
  //var rid = fdoc.roomId;
  //window.location.href = url + '?roomid=' + rid;

  if( 0 == modified_count ) {
    window.location.href = url_room;
  }
}
</pre>

<p>With that in place, and numerous other little snags addressed and resolved, all works fine now.</p>

<p>The room editor implements round-trip display and editing of both non-graphical and graphical properties &ndash; element parameter values and family instance location and rotation.</p>


<a name="3"></a>

<h4>Download</h4>

<p>The updated CouchDB database design, Kanso package definition and sample dataset is available from the

<a href="https://github.com/jeremytammik/roomedit">roomedit GitHub repository</a>,

and the version described above is

<a href="https://github.com/jeremytammik/roomedit/releases/tag/2.0.0.6">release 2.0.0.6</a>.</p>

<p>The RoomEditorApp Revit add-in with its Visual Studio solution and add-in manifest is provided in the

<a href="https://github.com/jeremytammik/RoomEditorApp">RoomEditorApp GitHub repository</a>,

and the version described above is

<a href="https://github.com/jeremytammik/RoomEditorApp/releases/tag/2015.0.2.15">2015.0.2.15</a>.</p>
