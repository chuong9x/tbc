<head>
<link rel="stylesheet" type="text/css" href="bc.css">
</head>

<h3>Retrieve MEP Elements and Connectors</h3>

<p>My colleague Martin Schmid recently asked about the feasibility of listing all unconnected connectors in a Revit MEP model.
To do so, the first step is to retrieve all the elements that can potentially have connectors, and then examine their connectors to see which of them are not connected to a neighbouring element.

<p>We looked at many examples of using the filtered element collectors in the past. A summary of previous posts is given in the discussion on

<a href="http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html">
parameter filters</a>,

and we since also discussed a correction on using the

<a href="http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html">
element name parameter filter</a> and

the recommendation

<a href="http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html">
not to retrieve all database elements</a>.

<p>The types of MEP connectors that we are looking for include the following:

<ul>
<li>Duct
<li>Pipe
<li>Conduit
<li>Cable Tray
<li>Electrical
</ul>

<p>The elements that can conceivably host such connectors include:

<ul>
<li>Duct
<li>Pipe
<li>Conduit
<li>Cable Tray
<li>Wire
<li>Fittings between the aforementioned objects, including certain categories of family instances.
</ul>

<p>After some initial prototyping, we discovered that wires are special.
In Martin's words:</p>

<p>The one area that may be suspect is wires.
If a wire is a homerun, it would be expected that one of its ends would be disconnected.
However, it does not seem to be possible to check if the wire is a homerun or not.
There is no property such as IsHomerun.
Another thought that comes to mind is that whether a wire is intended to be a homerun or not cannot be known:</p>

<center>
<img src="img/loose_connector_disconnected_homerun.png" alt="Disconnected homerun"/>
</center>

<p>I therefore suggest that we skip checks on 'Electrical' connectors, but still check for Conduit and Cable Tray connectors.</p>

<p>With that in mind, I implemented the following method GetConnectorElements to retrieve all elements in given document which may have some kind of MEP connector.
I start off with a list of all categories of family instances that I am interested in, OR them all together, and AND that category list with the family instance type.
The resulting specialised family instance filter is ORed with the other types of interest, and a filtered element collector is created from that.
The categories included in the list but commented out are actually only used by the specialised
MEP elements that we retrieve anyway by their System.Type.
When actually using it, I have the choice of including wires or not by setting the Boolean argument include_wires:</p>

<pre class="code">
<span class="blue">static</span> <span class="teal">FilteredElementCollector</span> GetConnectorElements(
&nbsp; <span class="teal">Document</span> doc,
&nbsp; <span class="blue">bool</span> include_wires )
{
&nbsp; <span class="green">// what categories of family instances</span>
&nbsp; <span class="green">// are we interested in?</span>
&nbsp;
&nbsp; <span class="teal">BuiltInCategory</span>[] bics = <span class="blue">new</span> <span class="teal">BuiltInCategory</span>[] {
&nbsp; &nbsp; <span class="green">//BuiltInCategory.OST_CableTray,</span>
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_CableTrayFitting,
&nbsp; &nbsp; <span class="green">//BuiltInCategory.OST_Conduit,</span>
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_ConduitFitting,
&nbsp; &nbsp; <span class="green">//BuiltInCategory.OST_DuctCurves,</span>
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_DuctFitting,
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_DuctTerminal,
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_ElectricalEquipment,
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_ElectricalFixtures,
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_LightingDevices,
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_LightingFixtures,
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_MechanicalEquipment,
&nbsp; &nbsp; <span class="green">//BuiltInCategory.OST_PipeCurves,</span>
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_PipeFitting,
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_PlumbingFixtures,
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_SpecialityEquipment,
&nbsp; &nbsp; <span class="teal">BuiltInCategory</span>.OST_Sprinklers,
&nbsp; &nbsp; <span class="green">//BuiltInCategory.OST_Wire,</span>
&nbsp; };
&nbsp;
&nbsp; <span class="teal">IList</span>&lt;<span class="teal">ElementFilter</span>&gt; a
&nbsp; &nbsp; = <span class="blue">new</span> <span class="teal">List</span>&lt;<span class="teal">ElementFilter</span>&gt;( bics.Count() );
&nbsp;
&nbsp; <span class="blue">foreach</span>( <span class="teal">BuiltInCategory</span> bic <span class="blue">in</span> bics )
&nbsp; {
&nbsp; &nbsp; a.Add( <span class="blue">new</span> <span class="teal">ElementCategoryFilter</span>( bic ) );
&nbsp; }
&nbsp;
&nbsp; <span class="teal">LogicalOrFilter</span> categoryFilter
&nbsp; &nbsp; = <span class="blue">new</span> <span class="teal">LogicalOrFilter</span>( a );
&nbsp;
&nbsp; <span class="teal">LogicalAndFilter</span> familyInstanceFilter
&nbsp; &nbsp; = <span class="blue">new</span> <span class="teal">LogicalAndFilter</span>( categoryFilter,
&nbsp; &nbsp; &nbsp; <span class="blue">new</span> <span class="teal">ElementClassFilter</span>(
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">typeof</span>( <span class="teal">FamilyInstance</span> ) ) );
&nbsp;
&nbsp; <span class="teal">IList</span>&lt;<span class="teal">ElementFilter</span>&gt; b
&nbsp; &nbsp; = <span class="blue">new</span> <span class="teal">List</span>&lt;<span class="teal">ElementFilter</span>&gt;( 6 );
&nbsp;
&nbsp; b.Add( <span class="blue">new</span> <span class="teal">ElementClassFilter</span>( <span class="blue">typeof</span>( <span class="teal">CableTray</span> ) ) );
&nbsp; b.Add( <span class="blue">new</span> <span class="teal">ElementClassFilter</span>( <span class="blue">typeof</span>( <span class="teal">Conduit</span> ) ) );
&nbsp; b.Add( <span class="blue">new</span> <span class="teal">ElementClassFilter</span>( <span class="blue">typeof</span>( <span class="teal">Duct</span> ) ) );
&nbsp; b.Add( <span class="blue">new</span> <span class="teal">ElementClassFilter</span>( <span class="blue">typeof</span>( <span class="teal">Pipe</span> ) ) );
&nbsp;
&nbsp; <span class="blue">if</span>( include_wires )
&nbsp; {
&nbsp; &nbsp; b.Add( <span class="blue">new</span> <span class="teal">ElementClassFilter</span>( <span class="blue">typeof</span>( <span class="teal">Wire</span> ) ) );
&nbsp; }

&nbsp; b.Add( familyInstanceFilter );
&nbsp;
&nbsp; <span class="teal">LogicalOrFilter</span> classFilter
&nbsp; &nbsp; = <span class="blue">new</span> <span class="teal">LogicalOrFilter</span>( b );
&nbsp;
&nbsp; <span class="teal">FilteredElementCollector</span> collector
&nbsp; &nbsp; = <span class="blue">new</span> <span class="teal">FilteredElementCollector</span>( doc );
&nbsp;
&nbsp; collector.WherePasses( classFilter );
&nbsp;
&nbsp; <span class="blue">return</span> collector;
}
</pre>

<p>Once I have collected all elements that may contain connectors, I want to iterate over all their connectors and check each one to see whether it is connected to a neighbouring element at the other side.</p>

<p>All connectors on a Revit MEP element are accessed through the Connectors collection of a connector manager which is available through the element properties.
Unfortunately, the access to the connector manager varies somewhat by element type, so I implemented a dedicated function to unify the different access methods:</p>

<ul>
<li>On a family instance, the connector manager is accessible as a property of the MEPModel property, both of which may be null.</li>
<li>On a wire, the connector manager is directly accessible as a property of the Wire class.</li>
<li>All other MEP elements are derived from the MEPCurve base class, which also provides direct access to the connector manager through a property.</li>
</ul>

<p>This leads to following implementation of the GetConnectors method, which returns the connectors of any given element, or null if none are present:</p>

<pre class="code">
<span class="blue">static</span> <span class="teal">ConnectorSet</span> GetConnectors( <span class="teal">Element</span> e )
{
&nbsp; <span class="teal">ConnectorSet</span> connectors = <span class="blue">null</span>;
&nbsp;
&nbsp; <span class="blue">if</span>( e <span class="blue">is</span> <span class="teal">FamilyInstance</span> )
&nbsp; {
&nbsp; &nbsp; <span class="teal">MEPModel</span> m = ( ( <span class="teal">FamilyInstance</span> ) e ).MEPModel;
&nbsp;
&nbsp; &nbsp; <span class="blue">if</span>( <span class="blue">null</span> != m
&nbsp; &nbsp; &nbsp; &amp;&amp; <span class="blue">null</span> != m.ConnectorManager )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; connectors = m.ConnectorManager.Connectors;
&nbsp; &nbsp; }
&nbsp; }
&nbsp; <span class="blue">else</span> <span class="blue">if</span>( e <span class="blue">is</span> <span class="teal">Wire</span> )
&nbsp; {
&nbsp; &nbsp; connectors = ( ( <span class="teal">Wire</span> ) e )
&nbsp; &nbsp; &nbsp; .ConnectorManager.Connectors;
&nbsp; }
&nbsp; <span class="blue">else</span>
&nbsp; {
&nbsp; &nbsp; <span class="teal">Debug</span>.Assert(
&nbsp; &nbsp; &nbsp; e.GetType().IsSubclassOf( <span class="blue">typeof</span>( <span class="teal">MEPCurve</span> ) ),
&nbsp; &nbsp; &nbsp; <span class="maroon">&quot;expected all candidate connector provider &quot;</span>
&nbsp; &nbsp; &nbsp; + <span class="maroon">&quot;elements to be either family instances or &quot;</span>
&nbsp; &nbsp; &nbsp; + <span class="maroon">&quot;derived from MEPCurve&quot;</span> );
&nbsp;
&nbsp; &nbsp; <span class="blue">if</span>( e <span class="blue">is</span> <span class="teal">MEPCurve</span> )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; connectors = ( ( <span class="teal">MEPCurve</span> ) e )
&nbsp; &nbsp; &nbsp; &nbsp; .ConnectorManager.Connectors;
&nbsp; &nbsp; }
&nbsp; }
&nbsp; <span class="blue">return</span> connectors;
}
</pre>

<p>With these tools in hand, I am ready to address Martin's original intent, which will be discussed in a future post.</p>
