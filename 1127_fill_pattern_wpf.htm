<head>
<link rel="stylesheet" type="text/css" href="bc.css">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>

<!--

Игнатович Александр Сергеевич 

RE: adding new materials from list futher enhancement

-->

<h3>WPF Fill Pattern Viewer Control</h3>

<p>Today, I present a useful stand-alone WPF control for viewing Revit fill patterns, originally implemented by Victor Checkalin, Виктор Чекалин, shared with us by Alexander Ignatovich, Александр Игнатович, of

<a href="http://www.iv-com.ru">
Investicionnaya Venchurnaya Companiya</a>,

as part of further enhancements for the

<a href="http://thebuildingcoder.typepad.com/blog/2014/03/adding-new-materials-from-list-updated-again.html">
AddMaterial add-in</a>.

The rest of his new enhancements will be discussed as soon as possible in a future post.</p>

<p>The AddMaterials add-in reads a list of material properties from an Excel spreadsheet and generates Revit material elements accordingly.</p>

<p>The input data includes columns defining the material surface and cut patterns.</p>

<p>These patterns are displayed graphically like this in the third and fourth columns of Alex' WPF control:</p>

<center>
<img src="img/add_materials_ai_one.png" alt="AddMaterial WPF form" width="400"/>
</center>

<p>Making use of the WPF fill pattern control in your own add-in is achieved in two simple steps:</p>

<ul>
<li>Add a copy of the XAML module FillPatternViewerControlWpf.xaml to your Visual Studio add-in project.</li>
<li>Add references to the FillPatternViewerControlWpf control in your own XAML form source.</li>
</ul>

<p>The fill pattern viewer XAML module appears like this in the solution explorer:</p>

<center>
<img src="img/fill_pattern_wpf.png" alt="FillPatternViewerControl XAML module" width="326"/>
</center>

<p>Here is the XAML code to define the surface and cut pattern columns in the form shown above:</p>

<pre class="code">
&nbsp; <span class="blue">&lt;</span><span class="maroon">GridViewColumn</span><span class="blue"> </span><span class="red">Header</span><span class="blue">=</span>&quot;<span class="blue">Surface</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">Width</span><span class="blue">=</span>&quot;<span class="blue">80</span>&quot;<span class="blue">&gt;</span>
&nbsp; &nbsp;
&nbsp; <span class="blue">&nbsp; &lt;</span><span class="maroon">GridViewColumn.CellTemplate</span><span class="blue">&gt;</span>
&nbsp; <span class="blue">&nbsp; &nbsp; &lt;</span><span class="maroon">DataTemplate</span><span class="blue"> </span><span class="red">DataType</span>
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; =</span>&quot;<span class="blue">{x:Type ViewModel:MaterialViewModel}</span>&quot;<span class="blue">&gt;</span>
&nbsp; &nbsp;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &lt;</span><span class="maroon">Border</span><span class="blue"> </span><span class="red">CornerRadius</span><span class="blue">=</span>&quot;<span class="blue">2</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">BorderThickness</span><span class="blue">=</span>&quot;<span class="blue">1</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">BorderBrush</span><span class="blue">=</span>&quot;<span class="blue">Gray</span>&quot;<span class="blue">&gt;</span>
&nbsp; &nbsp;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &lt;</span><span class="maroon">Controls:FillPatternViewerControlWpf</span>
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">HorizontalAlignment</span><span class="blue">=</span>&quot;<span class="blue">Stretch</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">Height</span><span class="blue">=</span>&quot;<span class="blue">30</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">Margin</span><span class="blue">=</span>&quot;<span class="blue">1,3</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">FillPattern</span><span class="blue">=</span>&quot;<span class="blue">{Binding SurfacePattern}</span>&quot;<span class="blue">/&gt;</span>
&nbsp; &nbsp;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &lt;/</span><span class="maroon">Border</span><span class="blue">&gt;</span>
&nbsp; <span class="blue">&nbsp; &nbsp; &lt;/</span><span class="maroon">DataTemplate</span><span class="blue">&gt;</span>
&nbsp; <span class="blue">&nbsp; &lt;/</span><span class="maroon">GridViewColumn.CellTemplate</span><span class="blue">&gt;</span>
&nbsp; <span class="blue">&lt;/</span><span class="maroon">GridViewColumn</span><span class="blue">&gt;</span>
&nbsp; &nbsp;
&nbsp; <span class="blue">&lt;</span><span class="maroon">GridViewColumn</span><span class="blue"> </span><span class="red">Header</span><span class="blue">=</span>&quot;<span class="blue">Cut</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">Width</span><span class="blue">=</span>&quot;<span class="blue">80</span>&quot;<span class="blue">&gt;</span>
&nbsp; &nbsp;
&nbsp; <span class="blue">&nbsp; &lt;</span><span class="maroon">GridViewColumn.CellTemplate</span><span class="blue">&gt;</span>
&nbsp; <span class="blue">&nbsp; &nbsp; &lt;</span><span class="maroon">DataTemplate</span><span class="blue"> </span><span class="red">DataType</span>
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; =</span>&quot;<span class="blue">{x:Type ViewModel:MaterialViewModel}</span>&quot;<span class="blue">&gt;</span>
&nbsp; &nbsp;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &lt;</span><span class="maroon">Border</span><span class="blue"> </span><span class="red">CornerRadius</span><span class="blue">=</span>&quot;<span class="blue">2</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">BorderThickness</span><span class="blue">=</span>&quot;<span class="blue">1</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">BorderBrush</span><span class="blue">=</span>&quot;<span class="blue">Gray</span>&quot;<span class="blue">&gt;</span>
&nbsp; &nbsp;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &lt;</span><span class="maroon">Controls:FillPatternViewerControlWpf</span>
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">HorizontalAlignment</span><span class="blue">=</span>&quot;<span class="blue">Stretch</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">Height</span><span class="blue">=</span>&quot;<span class="blue">30</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">Margin</span><span class="blue">=</span>&quot;<span class="blue">1,3</span>&quot;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">FillPattern</span><span class="blue">=</span>&quot;<span class="blue">{Binding CutPattern}</span>&quot;<span class="blue">/&gt;</span>
&nbsp; &nbsp;
&nbsp; <span class="blue">&nbsp; &nbsp; &nbsp; &lt;/</span><span class="maroon">Border</span><span class="blue">&gt;</span>
&nbsp; <span class="blue">&nbsp; &nbsp; &lt;/</span><span class="maroon">DataTemplate</span><span class="blue">&gt;</span>
&nbsp; <span class="blue">&nbsp; &lt;/</span><span class="maroon">GridViewColumn.CellTemplate</span><span class="blue">&gt;</span>
&nbsp; <span class="blue">&lt;/</span><span class="maroon">GridViewColumn</span><span class="blue">&gt;</span>
</pre>

<p>The fill pattern viewer control is defined by its XAML description plus the C# code defining its associated behaviour.</p>

<p>The XAML description looks like this:</p>

<pre class="code">
<span class="blue">&lt;</span><span class="maroon">UserControl</span><span class="blue"> </span>
&nbsp; <span class="red">x:Class</span><span class="blue">=</span>&quot;<span class="blue">AddMaterials.View.Controls.FillPatternViewerControlWpf</span>&quot;
&nbsp; <span class="red">xmlns</span><span class="blue">=</span>&quot;<span class="blue">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span>&quot;
&nbsp; <span class="red">xmlns:x</span><span class="blue">=</span>&quot;<span class="blue">http://schemas.microsoft.com/winfx/2006/xaml</span>&quot;
&nbsp; <span class="red">xmlns:mc</span><span class="blue">=</span>&quot;<span class="blue">http://schemas.openxmlformats.org/markup-compatibility/2006</span>&quot;
&nbsp; <span class="red">xmlns:d</span><span class="blue">=</span>&quot;<span class="blue">http://schemas.microsoft.com/expression/blend/2008</span>&quot;
&nbsp; <span class="red">xmlns:Converters</span><span class="blue">=</span>&quot;<span class="blue">clr-namespace:AddMaterials.View.Converters</span>&quot;<span class="blue"> </span>
&nbsp; <span class="red">mc:Ignorable</span><span class="blue">=</span>&quot;<span class="blue">d</span>&quot;
&nbsp; <span class="red">d:DesignHeight</span><span class="blue">=</span>&quot;<span class="blue">300</span>&quot;<span class="blue">
&nbsp; </span><span class="red">d:DesignWidth</span><span class="blue">=</span>&quot;<span class="blue">300</span>&quot;<span class="blue">&gt;</span>
&nbsp;
<span class="blue">&nbsp; &lt;</span><span class="maroon">Grid</span><span class="blue"> </span><span class="red">Name</span><span class="blue">=</span>&quot;<span class="blue">_grid</span>&quot;<span class="blue"> </span>
<span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">ToolTip</span><span class="blue">=</span>&quot;<span class="blue">{Binding Path=FillPattern.Name, </span>
<span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RelativeSource={RelativeSource </span>
<span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AncestorType={x:Type UserControl}}}</span>&quot;<span class="blue">&gt;</span>

<span class="blue">&nbsp; &nbsp; &lt;</span><span class="maroon">Grid.Resources</span><span class="blue">&gt;</span>
<span class="blue">&nbsp; &nbsp; &nbsp; &lt;</span><span class="maroon">Converters:BitmapToImageSourceConverter</span><span class="blue"> </span>
<span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="red">x:Key</span><span class="blue">=</span>&quot;<span class="blue">BitmapToImageSourceConverter</span>&quot;<span class="blue">/&gt;</span>
<span class="blue">&nbsp; &nbsp; &lt;/</span><span class="maroon">Grid.Resources</span><span class="blue">&gt;</span>

<span class="blue">&nbsp; &nbsp; &lt;</span><span class="maroon">Image</span><span class="blue"> </span><span class="red">Source</span><span class="blue">=</span>&quot;<span class="blue">{Binding Path=FillPatternImage, </span>
<span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; RelativeSource={RelativeSource </span>
<span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; AncestorType={x:Type UserControl}},&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span>
<span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Converter={StaticResource BitmapToImageSourceConverter}}</span>&quot;
<span class="blue">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span><span class="red">Stretch</span><span class="blue">=</span>&quot;<span class="blue">None</span>&quot;<span class="blue">/&gt;</span>
&nbsp;
<span class="blue">&nbsp; &lt;/</span><span class="maroon">Grid</span><span class="blue">&gt;</span>
<span class="blue">&lt;/</span><span class="maroon">UserControl</span><span class="blue">&gt;</span>
</pre>

<p>The C# code defining its behaviour is where the real action takes place, in the DrawFillPattern method, which retrieves and displays the graphical data defined by the Revit FillGrid instances managed by the FillPattern object:</p>

<pre class="code">
<span class="blue">using</span> System;
<span class="blue">using</span> System.ComponentModel;
<span class="blue">using</span> System.Diagnostics;
<span class="blue">using</span> System.Drawing;
<span class="blue">using</span> System.Linq;
<span class="blue">using</span> System.Windows;
<span class="blue">using</span> Autodesk.Revit.DB;
<span class="blue">using</span> <span class="teal">Image</span> = System.Drawing.<span class="teal">Image</span>;
<span class="blue">using</span> <span class="teal">Matrix</span> = System.Drawing.Drawing2D.<span class="teal">Matrix</span>;
<span class="blue">using</span> <span class="teal">Rectangle</span> = System.Drawing.<span class="teal">Rectangle</span>;
&nbsp;
<span class="blue">namespace</span> AddMaterials.View.Controls
{
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;summary&gt;</span>
&nbsp; <span class="gray">///</span><span class="green"> Interaction logic for FillPatternViewerControlWpf.xaml</span>
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;/summary&gt;</span>
&nbsp; <span class="blue">public</span> <span class="blue">partial</span> <span class="blue">class</span> <span class="teal">FillPatternViewerControlWpf</span>
&nbsp; &nbsp; : <span class="teal">INotifyPropertyChanged</span>
&nbsp; {
&nbsp; &nbsp; <span class="blue">private</span> <span class="blue">const</span> <span class="blue">float</span> Scale = 50;
&nbsp; &nbsp; <span class="blue">private</span> <span class="teal">Bitmap</span> fillPatternImg;
&nbsp;
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">static</span> <span class="blue">readonly</span> <span class="teal">DependencyProperty</span>
&nbsp; &nbsp; &nbsp; FillPatternProperty = <span class="teal">DependencyProperty</span>
&nbsp; &nbsp; &nbsp; &nbsp; .RegisterAttached( <span class="maroon">&quot;FillPattern&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">typeof</span>( <span class="teal">FillPattern</span> ),
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">typeof</span>( <span class="teal">FillPatternViewerControlWpf</span> ),
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">new</span> <span class="teal">UIPropertyMetadata</span>( <span class="blue">null</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OnFillPatternChanged ) );
&nbsp;
&nbsp; &nbsp; <span class="blue">private</span> <span class="blue">static</span> <span class="blue">void</span> OnFillPatternChanged(
&nbsp; &nbsp; &nbsp; <span class="teal">DependencyObject</span> d,
&nbsp; &nbsp; &nbsp; <span class="teal">DependencyPropertyChangedEventArgs</span> e )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">var</span> fillPatternViewerControl
&nbsp; &nbsp; &nbsp; &nbsp; = d <span class="blue">as</span> <span class="teal">FillPatternViewerControlWpf</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( fillPatternViewerControl == <span class="blue">null</span> ) <span class="blue">return</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; fillPatternViewerControl.OnPropertyChanged(
&nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;FillPattern&quot;</span> );
&nbsp;
&nbsp; &nbsp; &nbsp; fillPatternViewerControl.CreateFillPatternImage();
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">public</span> <span class="teal">FillPattern</span> FillPattern
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">get</span>
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">return</span> (<span class="teal">FillPattern</span>) GetValue(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FillPatternProperty );
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; <span class="blue">set</span>
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; SetValue( FillPatternProperty, <span class="blue">value</span> );
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">public</span> <span class="teal">FillPattern</span> GetFillPattern(
&nbsp; &nbsp; &nbsp; <span class="teal">DependencyObject</span> obj )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">return</span> (<span class="teal">FillPattern</span>) obj.GetValue(
&nbsp; &nbsp; &nbsp; &nbsp; FillPatternProperty );
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">void</span> SetFillPattern(
&nbsp; &nbsp; &nbsp; <span class="teal">DependencyObject</span> obj,
&nbsp; &nbsp; &nbsp; <span class="teal">FillPattern</span> value )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; obj.SetValue( FillPatternProperty, value );
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">public</span> FillPatternViewerControlWpf()
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; InitializeComponent();
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">public</span> <span class="blue">event</span> <span class="teal">PropertyChangedEventHandler</span>
&nbsp; &nbsp; &nbsp; PropertyChanged;
&nbsp;
&nbsp; &nbsp; <span class="green">//[NotifyPropertyChangedInvocator]</span>
&nbsp; &nbsp; <span class="blue">protected</span> <span class="blue">virtual</span> <span class="blue">void</span> OnPropertyChanged(
&nbsp; &nbsp; &nbsp; <span class="blue">string</span> propertyName )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">var</span> handler = PropertyChanged;
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( handler != <span class="blue">null</span> ) handler( <span class="blue">this</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">new</span> <span class="teal">PropertyChangedEventArgs</span>( propertyName ) );
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">public</span> <span class="teal">Image</span> FillPatternImage
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">get</span>
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( fillPatternImg == <span class="blue">null</span> )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CreateFillPatternImage();
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">return</span> fillPatternImg;
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">private</span> <span class="blue">void</span> CreateFillPatternImage()
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( FillPattern == <span class="blue">null</span> )
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">return</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">var</span> width =
&nbsp; &nbsp; &nbsp; &nbsp; ( ActualWidth == 0 ? Width : ActualWidth ) == 0
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? 100
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : ( ActualWidth == 0 ? Width : ActualWidth );
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( <span class="blue">double</span>.IsNaN( width ) )
&nbsp; &nbsp; &nbsp; &nbsp; width = 100;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">var</span> height =
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ( ActualHeight == 0 ? Height : ActualHeight ) == 0
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? 30
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : ( ActualHeight == 0 ? Height : ActualHeight );
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( <span class="blue">double</span>.IsNaN( height ) )
&nbsp; &nbsp; &nbsp; &nbsp; height = 30;
&nbsp;
&nbsp; &nbsp; &nbsp; fillPatternImg = <span class="blue">new</span> <span class="teal">Bitmap</span>(
&nbsp; &nbsp; &nbsp; &nbsp; (<span class="blue">int</span>) width, (<span class="blue">int</span>) height );
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">using</span>( <span class="blue">var</span> g = <span class="teal">Graphics</span>.FromImage(
&nbsp; &nbsp; &nbsp; &nbsp; fillPatternImg ) )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; DrawFillPattern( g );
&nbsp; &nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; &nbsp; OnPropertyChanged( <span class="maroon">&quot;FillPatternImage&quot;</span> );
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">private</span> <span class="blue">void</span> DrawFillPattern( <span class="teal">Graphics</span> g )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">float</span> matrixScale;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">var</span> fillPattern = FillPattern;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( fillPattern == <span class="blue">null</span> )
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">return</span>;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">if</span>( fillPattern.Target == <span class="teal">FillPatternTarget</span>.Model )
&nbsp; &nbsp; &nbsp; &nbsp; matrixScale = Scale;
&nbsp; &nbsp; &nbsp; <span class="blue">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; matrixScale = Scale * 10;
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">try</span>
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> width =
&nbsp; &nbsp; &nbsp; &nbsp; ( ActualWidth == 0 ? Width : ActualWidth ) == 0
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? 100
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : ( ActualWidth == 0 ? Width : ActualWidth );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( <span class="blue">double</span>.IsNaN( width ) )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width = 100;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> height =
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ( ActualHeight == 0 ? Height : ActualHeight ) == 0
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? 30
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : ( ActualHeight == 0 ? Height : ActualHeight );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( <span class="blue">double</span>.IsNaN( height ) )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; height = 30;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> rect = <span class="blue">new</span> <span class="teal">Rectangle</span>( 0, 0,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (<span class="blue">int</span>) width, (<span class="blue">int</span>) height );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> centerX = ( rect.Left + rect.Left
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + rect.Width ) / 2;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> centerY = ( rect.Top + rect.Top
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + rect.Height ) / 2;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; g.TranslateTransform( centerX, centerY );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> rectF = <span class="blue">new</span> <span class="teal">Rectangle</span>( -1, -1, 2, 2 );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; g.FillRectangle( <span class="teal">Brushes</span>.Blue, rectF );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; g.ResetTransform();
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> fillGrids = fillPattern.GetFillGrids();
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;FilPattern name: {0}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fillPattern.Name );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;Grids count: {0}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fillGrids.Count );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">foreach</span>( <span class="blue">var</span> fillGrid <span class="blue">in</span> fillGrids )
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> degreeAngle = (<span class="blue">float</span>) RadianToGradus(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fillGrid.Angle );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="blue">new</span> <span class="blue">string</span>( <span class="maroon">'-'</span>, 100 ) );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;\tOrigin: U: {0} V:{1}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fillGrid.Origin.U, fillGrid.Origin.V );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;\tOffset: {0}&quot;</span>, fillGrid.Offset );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;\tAngle: {0}&quot;</span>, degreeAngle );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;\tShift: {0}&quot;</span>, fillGrid.Shift );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> pen = <span class="blue">new</span> <span class="teal">Pen</span>( System.Drawing.<span class="teal">Color</span>.Black )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Width = 1f / matrixScale
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">float</span> dashLength = 1;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> segments = fillGrid.GetSegments();
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( segments.Count &gt; 0 )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pen.DashPattern = segments
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .Select( <span class="teal">Convert</span>.ToSingle )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ToArray();
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;\tSegments:&quot;</span> );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">foreach</span>( <span class="blue">var</span> segment <span class="blue">in</span> segments )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( <span class="maroon">&quot;\t\t{0}&quot;</span>, segment );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dashLength = pen.DashPattern.Sum();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g.ResetTransform();
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> rotateMatrix = <span class="blue">new</span> <span class="teal">Matrix</span>();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rotateMatrix.Rotate( degreeAngle );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> matrix = <span class="blue">new</span> <span class="teal">Matrix</span>( 1, 0, 0, -1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; centerX, centerY );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix.Scale( matrixScale, matrixScale );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix.Translate( (<span class="blue">float</span>) fillGrid.Origin.U,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (<span class="blue">float</span>) fillGrid.Origin.V );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> backMatrix = matrix.Clone();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; backMatrix.Multiply( rotateMatrix );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix.Multiply( rotateMatrix );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">bool</span> first = <span class="blue">true</span>;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">for</span>( <span class="blue">int</span> i = 20; i &gt; 0; i-- )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">if</span>( !first )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix.Translate( (<span class="blue">float</span>) fillGrid.Shift,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (<span class="blue">float</span>) fillGrid.Offset );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; backMatrix.Translate( (<span class="blue">float</span>) fillGrid.Shift,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -(<span class="blue">float</span>) fillGrid.Offset );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; first = <span class="blue">false</span>;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">var</span> offset = ( -10 ) * dashLength;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matrix.Translate( offset, 0 );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; backMatrix.Translate( offset, 0 );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g.Transform = matrix;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g.DrawLine( pen, <span class="blue">new</span> <span class="teal">PointF</span>( 0, 0 ),
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">new</span> <span class="teal">PointF</span>( 200, 0 ) );
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g.Transform = backMatrix;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g.DrawLine( pen, <span class="blue">new</span> <span class="teal">PointF</span>( 0, 0 ),
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="blue">new</span> <span class="teal">PointF</span>( 200, 0 ) );
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; <span class="blue">catch</span>( <span class="teal">Exception</span> ex )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Print( ex.Message );
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="blue">private</span> <span class="blue">double</span> RadianToGradus( <span class="blue">double</span> radian )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">return</span> radian * 180 / <span class="teal">Math</span>.PI;
&nbsp; &nbsp; }
&nbsp; }
}
</pre>

<p>The source code, Visual Studio solution and add-in manifest of the complete AddMaterials add-in including the fill pattern viewer WPF control is provided in the

<a href="https://github.com/jeremytammik/AddMaterials">AddMaterials GitHub repository</a>.</p>

<p>The version discussed above is

<a href="https://github.com/jeremytammik/AddMaterials/releases/tag/2014.0.0.2">
release 2014.0.0.2</a>.</p>

<p>Many thanks to Victor for the implementation and to Alex for sharing this valuable tool!</p>
